
/**
 * This file was auto-generated by swig2ts.js
 */


type attributeDeclSAXFunc = {}
type attributeSAXFunc = {}
type cdataBlockSAXFunc = {}
type charactersSAXFunc = {}
type commentSAXFunc = {}
type elementDeclSAXFunc = {}
type endDocumentSAXFunc = {}
type endElementNsSAX2Func = {}
type endElementSAXFunc = {}
type entityDeclSAXFunc = {}
type errorSAXFunc = {}
type externalSubsetSAXFunc = {}
type fatalErrorSAXFunc = {}
type getEntitySAXFunc = {}
type getParameterEntitySAXFunc = {}
type hasExternalSubsetSAXFunc = {}
type hasInternalSubsetSAXFunc = {}
type htmlDocPtr = xmlDocPtr & {}
type htmlElemDesc = {}
export type htmlElemDescPtr = {
            name: string,   // q(const).char
            startTag: string,   // char
            endTag: string,   // char
            saveEndTag: string,   // char
            empty: string,   // char
            depr: string,   // char
            dtd: string,   // char
            isinline: string,   // char
            desc: string,   // q(const).char
            subelts: string,   // q(const).char
            defaultsubelt: string,   // q(const).char
            attrs_opt: string,   // q(const).char
            attrs_depr: string,   // q(const).char
            attrs_req: string,   // q(const).char

getCPtr: {
            (): number,
        }}
type htmlEntityDesc = {}
export type htmlEntityDescPtr = {
            value: number,   // unsigned int
            name: string,   // q(const).char
            desc: string,   // q(const).char

getCPtr: {
            (): number,
        }}
type htmlNodePtr = {}
type htmlParserCtxt = {}
type htmlParserCtxtPtr = {}
type htmlParserInput = {}
type htmlParserInputPtr = {}
type htmlParserNodeInfo = {}
type htmlParserOption = {}
type htmlSAXHandler = {}
type htmlSAXHandlerPtr = {}
type htmlStatus = {}
type ignorableWhitespaceSAXFunc = {}
type internalSubsetSAXFunc = {}
type isStandaloneSAXFunc = {}
type notationDeclSAXFunc = {}
type processingInstructionSAXFunc = {}
type referenceSAXFunc = {}
type resolveEntitySAXFunc = {}
type setDocumentLocatorSAXFunc = {}
type startDocumentSAXFunc = {}
type startElementNsSAX2Func = {}
type startElementSAXFunc = {}
type unparsedEntityDeclSAXFunc = {}
type warningSAXFunc = {}
type xlinkActuate = {}
type xlinkExtendedLinkFunk = {}
type xlinkExtendedLinkSetFunk = {}
type xlinkHRef = {}
type xlinkHandler = {}
export type xlinkHandlerPtr = {
            simple: xlinkSimpleLinkFunk,   // xlinkSimpleLinkFunk
            extended: xlinkExtendedLinkFunk,   // xlinkExtendedLinkFunk
            set: xlinkExtendedLinkSetFunk,   // xlinkExtendedLinkSetFunk

getCPtr: {
            (): number,
        }}
type xlinkNodeDetectFunc = {}
type xlinkRole = {}
type xlinkShow = {}
type xlinkSimpleLinkFunk = {}
type xlinkTitle = {}
type xlinkType = {}
type xmlAttr = {}
export type xmlAttrPtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlNodePtr,   // struct _xmlNode
            next: xmlAttrPtr,   // struct _xmlAttr
            prev: xmlAttrPtr,   // struct _xmlAttr
            doc: xmlDocPtr,   // struct _xmlDoc
            ns: xmlNsPtr,   // xmlNs
            atype: xmlAttributeType,   // xmlAttributeType
            psvi: any,   // void

getCPtr: {
            (): number,
        }}
type xmlAttribute = {}
type xmlAttributeDefault = {}
export type xmlAttributePtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // _xmlNode
            last: xmlNodePtr,   // _xmlNode
            parent: xmlDtdPtr,   // _xmlDtd
            next: xmlNodePtr,   // _xmlNode
            prev: xmlNodePtr,   // _xmlNode
            doc: xmlDocPtr,   // _xmlDoc
            nexth: xmlAttributePtr,   // _xmlAttribute
            atype: xmlAttributeType,   // xmlAttributeType
            def: xmlAttributeDefault,   // xmlAttributeDefault
            defaultValue: string,   // q(const).xmlChar
            tree: xmlEnumerationPtr,   // xmlEnumerationPtr
            prefix: string,   // q(const).xmlChar
            elem: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
type xmlAttributeTable = {}
type xmlAttributeTablePtr = {}
type xmlAttributeType = {}
type xmlAutomata = {}
type xmlAutomataPtr = {}
type xmlAutomataState = {}
type xmlAutomataStatePtr = {}
type xmlBuf = {}
type xmlBufPtr = {}
type xmlBuffer = {}
type xmlBufferAllocationScheme = {}
export type xmlBufferPtr = {
            content: string,   // xmlChar
            use: number,   // unsigned int
            size: number,   // unsigned int
            alloc: xmlBufferAllocationScheme,   // xmlBufferAllocationScheme
            contentIO: string,   // xmlChar

getCPtr: {
            (): number,
        }}
type xmlCatalog = {}
type xmlCatalogAllow = {}
type xmlCatalogPrefer = {}
type xmlCatalogPtr = {}
type xmlChLRange = {}
export type xmlChLRangePtr = {
            low: number,   // unsigned int
            high: number,   // unsigned int

getCPtr: {
            (): number,
        }}
type xmlChRangeGroup = {}
export type xmlChRangeGroupPtr = {
            nbShortRange: number,   // int
            nbLongRange: number,   // int
            shortRange: xmlChSRange,   // q(const).xmlChSRange
            longRange: xmlChLRange,   // q(const).xmlChLRange

getCPtr: {
            (): number,
        }}
type xmlChSRange = {}
export type xmlChSRangePtr = {
            low: number,   // unsigned short
            high: number,   // unsigned short

getCPtr: {
            (): number,
        }}
type xmlChar = {}
type xmlCharEncoding = {}
type xmlCharEncodingHandler = {}
export type xmlCharEncodingHandlerPtr = {
            name: string,   // char
            input: xmlCharEncodingInputFunc,   // xmlCharEncodingInputFunc
            output: xmlCharEncodingOutputFunc,   // xmlCharEncodingOutputFunc

getCPtr: {
            (): number,
        }}
type xmlCharEncodingInputFunc = {}
type xmlCharEncodingOutputFunc = {}
type xmlDOMWrapAcquireNsFunction = {}
type xmlDOMWrapCtxt = {}
export type xmlDOMWrapCtxtPtr = {
            _private: any,   // void
            type: number,   // int
            namespaceMap: any,   // void
            getNsForNodeFunc: xmlDOMWrapAcquireNsFunction,   // xmlDOMWrapAcquireNsFunction

getCPtr: {
            (): number,
        }}
type xmlDeregisterNodeFunc = {}
type xmlDict = {}
type xmlDictPtr = {}
type xmlDoc = {}
type xmlDocProperties = {}
export type xmlDocPtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // char
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlNodePtr,   // struct _xmlNode
            next: xmlNodePtr,   // struct _xmlNode
            prev: xmlNodePtr,   // struct _xmlNode
            doc: xmlDocPtr,   // struct _xmlDoc
            compression: number,   // int
            standalone: number,   // int
            intSubset: xmlDtdPtr,   // struct _xmlDtd
            extSubset: xmlDtdPtr,   // struct _xmlDtd
            oldNs: xmlNsPtr,   // struct _xmlNs
            version: string,   // q(const).xmlChar
            encoding: string,   // q(const).xmlChar
            ids: any,   // void
            refs: any,   // void
            URL: string,   // q(const).xmlChar
            charset: number,   // int
            dict: xmlDictPtr,   // struct _xmlDict
            psvi: any,   // void
            parseFlags: number,   // int
            properties: number,   // int

getCPtr: {
            (): number,
        }}
type xmlDtd = {}
export type xmlDtdPtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlDocPtr,   // struct _xmlDoc
            next: xmlNodePtr,   // struct _xmlNode
            prev: xmlNodePtr,   // struct _xmlNode
            doc: xmlDocPtr,   // struct _xmlDoc
            notations: any,   // void
            elements: any,   // void
            attributes: any,   // void
            entities: any,   // void
            ExternalID: string,   // q(const).xmlChar
            SystemID: string,   // q(const).xmlChar
            pentities: any,   // void

getCPtr: {
            (): number,
        }}
type xmlElement = {}
type xmlElementContent = {}
type xmlElementContentOccur = {}
export type xmlElementContentPtr = {
            type: xmlElementContentType,   // xmlElementContentType
            ocur: xmlElementContentOccur,   // xmlElementContentOccur
            name: string,   // q(const).xmlChar
            c1: xmlElementContentPtr,   // _xmlElementContent
            c2: xmlElementContentPtr,   // _xmlElementContent
            parent: xmlElementContentPtr,   // _xmlElementContent
            prefix: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
type xmlElementContentType = {}
export type xmlElementPtr = xmlNodePtr & {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlDtdPtr,   // struct _xmlDtd
            next: xmlNodePtr,   // struct _xmlNode
            prev: xmlNodePtr,   // struct _xmlNode
            doc: xmlDocPtr,   // struct _xmlDoc
            etype: xmlElementTypeVal,   // xmlElementTypeVal
            content: xmlElementContentPtr,   // xmlElementContentPtr
            attributes: xmlAttributePtr,   // xmlAttributePtr
            prefix: string,   // q(const).xmlChar
            contModel: xmlRegexpPtr,   // xmlRegexpPtr

getCPtr: {
            (): number,
        }}
type xmlElementTable = {}
type xmlElementTablePtr = {}
type xmlElementType = {}
type xmlElementTypeVal = {}
type xmlEntitiesTable = {}
type xmlEntitiesTablePtr = {}
type xmlEntity = {}
export type xmlEntityPtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlDtdPtr,   // struct _xmlDtd
            next: xmlNodePtr,   // struct _xmlNode
            prev: xmlNodePtr,   // struct _xmlNode
            doc: xmlDocPtr,   // struct _xmlDoc
            orig: string,   // xmlChar
            content: string,   // xmlChar
            length: number,   // int
            etype: xmlEntityType,   // xmlEntityType
            ExternalID: string,   // q(const).xmlChar
            SystemID: string,   // q(const).xmlChar
            nexte: xmlEntityPtr,   // struct _xmlEntity
            URI: string,   // q(const).xmlChar
            owner: number,   // int
            checked: number,   // int

getCPtr: {
            (): number,
        }}
type xmlEntityReferenceFunc = {}
type xmlEntityType = {}
type xmlEnumeration = {}
export type xmlEnumerationPtr = {
            next: xmlEnumerationPtr,   // _xmlEnumeration
            name: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
type xmlError = {}
type xmlErrorDomain = {}
type xmlErrorLevel = {}
export type xmlErrorPtr = {
            domain: number,   // int
            code: number,   // int
            message: string,   // char
            level: xmlErrorLevel,   // xmlErrorLevel
            file: string,   // char
            line: number,   // int
            str1: string,   // char
            str2: string,   // char
            str3: string,   // char
            int1: number,   // int
            int2: number,   // int
            ctxt: any,   // void
            node: any,   // void

getCPtr: {
            (): number,
        }}
type xmlExternalEntityLoader = {}
type xmlFeature = {}
type xmlFreeFunc = {}
type xmlGenericErrorFunc = {}
type xmlGlobalState = {}
export type xmlGlobalStatePtr = {
            xmlParserVersion: string,   // q(const).char
            xmlDefaultSAXLocator: xmlSAXLocator,   // xmlSAXLocator
            xmlDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
            docbDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
            htmlDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
            xmlFree: xmlFreeFunc,   // xmlFreeFunc
            xmlMalloc: xmlMallocFunc,   // xmlMallocFunc
            xmlMemStrdup: xmlStrdupFunc,   // xmlStrdupFunc
            xmlRealloc: xmlReallocFunc,   // xmlReallocFunc
            xmlGenericError: xmlGenericErrorFunc,   // xmlGenericErrorFunc
            xmlStructuredError: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc
            xmlGenericErrorContext: any,   // void
            oldXMLWDcompatibility: number,   // int
            xmlBufferAllocScheme: xmlBufferAllocationScheme,   // xmlBufferAllocationScheme
            xmlDefaultBufferSize: number,   // int
            xmlSubstituteEntitiesDefaultValue: number,   // int
            xmlDoValidityCheckingDefaultValue: number,   // int
            xmlGetWarningsDefaultValue: number,   // int
            xmlKeepBlanksDefaultValue: number,   // int
            xmlLineNumbersDefaultValue: number,   // int
            xmlLoadExtDtdDefaultValue: number,   // int
            xmlParserDebugEntities: number,   // int
            xmlPedanticParserDefaultValue: number,   // int
            xmlSaveNoEmptyTags: number,   // int
            xmlIndentTreeOutput: number,   // int
            xmlTreeIndentString: string,   // q(const).char
            xmlRegisterNodeDefaultValue: xmlRegisterNodeFunc,   // xmlRegisterNodeFunc
            xmlDeregisterNodeDefaultValue: xmlDeregisterNodeFunc,   // xmlDeregisterNodeFunc
            xmlMallocAtomic: xmlMallocFunc,   // xmlMallocFunc
            xmlLastError: xmlError,   // xmlError
            xmlParserInputBufferCreateFilenameValue: xmlParserInputBufferCreateFilenameFunc,   // xmlParserInputBufferCreateFilenameFunc
            xmlOutputBufferCreateFilenameValue: xmlOutputBufferCreateFilenameFunc,   // xmlOutputBufferCreateFilenameFunc
            xmlStructuredErrorContext: any,   // void

getCPtr: {
            (): number,
        }}
type xmlHashCopier = {}
type xmlHashDeallocator = {}
type xmlHashScanner = {}
type xmlHashScannerFull = {}
type xmlHashTable = {}
type xmlHashTablePtr = {}
type xmlID = {}
export type xmlIDPtr = {
            next: xmlIDPtr,   // _xmlID
            value: string,   // q(const).xmlChar
            attr: xmlAttrPtr,   // xmlAttrPtr
            name: string,   // q(const).xmlChar
            lineno: number,   // int
            doc: xmlDocPtr,   // _xmlDoc

getCPtr: {
            (): number,
        }}
type xmlIDTable = {}
type xmlIDTablePtr = {}
type xmlInputCloseCallback = {}
type xmlInputMatchCallback = {}
type xmlInputOpenCallback = {}
type xmlInputReadCallback = {}
type xmlLink = {}
type xmlLinkPtr = {}
type xmlList = {}
type xmlListDataCompare = {}
type xmlListDeallocator = {}
type xmlListPtr = {}
type xmlListWalker = {}
type xmlLocationSet = {}
export type xmlLocationSetPtr = {
            locNr: number,   // int
            locMax: number,   // int
            locTab: xmlXPathObjectPtr,   // xmlXPathObjectPtr

getCPtr: {
            (): number,
        }}
type xmlMallocFunc = {}
type xmlModule = {}
type xmlModuleOption = {}
type xmlModulePtr = {}
type xmlMutex = {}
type xmlMutexPtr = {}
type xmlNode = {}
export type xmlNodePtr = {
            _private: any,   // void
            type: xmlElementType,   // xmlElementType
            name: string,   // q(const).xmlChar
            children: xmlNodePtr,   // struct _xmlNode
            last: xmlNodePtr,   // struct _xmlNode
            parent: xmlNodePtr,   // struct _xmlNode
            next: xmlNodePtr,   // struct _xmlNode
            prev: xmlNodePtr,   // struct _xmlNode
            doc: xmlDocPtr,   // struct _xmlDoc
            ns: xmlNsPtr,   // xmlNs
            content: string,   // xmlChar
            properties: xmlAttrPtr,   // struct _xmlAttr
            nsDef: xmlNsPtr,   // xmlNs
            psvi: any,   // void
            line: number,   // unsigned short
            extra: number,   // unsigned short

getCPtr: {
            (): number,
        }}
type xmlNodeSet = {}
export type xmlNodeSetPtr = {
            nodeNr: number,   // int
            nodeMax: number,   // int
            nodeTab: xmlNodePtr,   // xmlNodePtr

getCPtr: {
            (): number,
        }}
type xmlNotation = {}
export type xmlNotationPtr = {
            name: string,   // q(const).xmlChar
            PublicID: string,   // q(const).xmlChar
            SystemID: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
type xmlNotationTable = {}
type xmlNotationTablePtr = {}
type xmlNs = {}
export type xmlNsPtr = {
            next: xmlNsPtr,   // struct _xmlNs
            type: xmlNsPtr,   // xmlNsType
            href: string,   // q(const).xmlChar
            prefix: string,   // q(const).xmlChar
            _private: any,   // void
            context: xmlDocPtr,   // struct _xmlDoc

getCPtr: {
            (): number,
        }}
type xmlNsType = {}
type xmlOutputBuffer = {}
type xmlOutputBufferCreateFilenameFunc = {}
export type xmlOutputBufferPtr = {
            context: any,   // void
            writecallback: xmlOutputWriteCallback,   // xmlOutputWriteCallback
            closecallback: xmlOutputCloseCallback,   // xmlOutputCloseCallback
            encoder: xmlCharEncodingHandlerPtr,   // xmlCharEncodingHandlerPtr
            buffer: xmlBufPtr,   // xmlBufPtr
            conv: xmlBufPtr,   // xmlBufPtr
            written: number,   // int
            error: number,   // int

getCPtr: {
            (): number,
        }}
type xmlOutputCloseCallback = {}
type xmlOutputMatchCallback = {}
type xmlOutputOpenCallback = {}
type xmlOutputWriteCallback = {}
type xmlParserCtxt = {}
export type xmlParserCtxtPtr = {
            sax: xmlSAXHandlerPtr,   // _xmlSAXHandler
            userData: any,   // void
            myDoc: xmlDocPtr,   // xmlDocPtr
            wellFormed: number,   // int
            replaceEntities: number,   // int
            version: string,   // q(const).xmlChar
            encoding: string,   // q(const).xmlChar
            standalone: number,   // int
            html: number,   // int
            input: xmlParserInputPtr,   // xmlParserInputPtr
            inputNr: number,   // int
            inputMax: number,   // int
            inputTab: xmlParserInputPtr,   // xmlParserInputPtr
            node: xmlNodePtr,   // xmlNodePtr
            nodeNr: number,   // int
            nodeMax: number,   // int
            nodeTab: xmlNodePtr,   // xmlNodePtr
            record_info: number,   // int
            node_seq: xmlParserNodeInfoSeq,   // xmlParserNodeInfoSeq
            errNo: number,   // int
            hasExternalSubset: number,   // int
            hasPErefs: number,   // int
            external: number,   // int
            valid: number,   // int
            validate: number,   // int
            vctxt: xmlValidCtxt,   // xmlValidCtxt
            instate: xmlParserInputState,   // xmlParserInputState
            token: number,   // int
            directory: string,   // char
            name: string,   // q(const).xmlChar
            nameNr: number,   // int
            nameMax: number,   // int
            nameTab: string,   // q(const).xmlChar
            nbChars: number,   // long
            checkIndex: number,   // long
            keepBlanks: number,   // int
            disableSAX: number,   // int
            inSubset: number,   // int
            intSubName: string,   // q(const).xmlChar
            extSubURI: string,   // xmlChar
            extSubSystem: string,   // xmlChar
            space: number,   // int
            spaceNr: number,   // int
            spaceMax: number,   // int
            spaceTab: number,   // int
            depth: number,   // int
            entity: xmlParserInputPtr,   // xmlParserInputPtr
            charset: number,   // int
            nodelen: number,   // int
            nodemem: number,   // int
            pedantic: number,   // int
            _private: any,   // void
            loadsubset: number,   // int
            linenumbers: number,   // int
            catalogs: any,   // void
            recovery: number,   // int
            progressive: number,   // int
            dict: xmlDictPtr,   // xmlDictPtr
            atts: string,   // q(const).xmlChar
            maxatts: number,   // int
            docdict: number,   // int
            str_xml: string,   // q(const).xmlChar
            str_xmlns: string,   // q(const).xmlChar
            str_xml_ns: string,   // q(const).xmlChar
            sax2: number,   // int
            nsNr: number,   // int
            nsMax: number,   // int
            nsTab: string,   // q(const).xmlChar
            attallocs: number,   // int
            pushTab: any,   // void
            attsDefault: xmlHashTablePtr,   // xmlHashTablePtr
            attsSpecial: xmlHashTablePtr,   // xmlHashTablePtr
            nsWellFormed: number,   // int
            options: number,   // int
            dictNames: number,   // int
            freeElemsNr: number,   // int
            freeElems: xmlNodePtr,   // xmlNodePtr
            freeAttrsNr: number,   // int
            freeAttrs: xmlAttrPtr,   // xmlAttrPtr
            lastError: xmlError,   // xmlError
            parseMode: xmlParserMode,   // xmlParserMode
            nbentities: number,   // unsigned long
            sizeentities: number,   // unsigned long
            nodeInfo: xmlParserNodeInfo,   // xmlParserNodeInfo
            nodeInfoNr: number,   // int
            nodeInfoMax: number,   // int
            nodeInfoTab: xmlParserNodeInfo,   // xmlParserNodeInfo
            input_id: number,   // int
            sizeentcopy: number,   // unsigned long

getCPtr: {
            (): number,
        }}
type xmlParserErrors = {}
type xmlParserInput = {}
type xmlParserInputBuffer = {}
type xmlParserInputBufferCreateFilenameFunc = {}
export type xmlParserInputBufferPtr = {
            context: any,   // void
            readcallback: xmlInputReadCallback,   // xmlInputReadCallback
            closecallback: xmlInputCloseCallback,   // xmlInputCloseCallback
            encoder: xmlCharEncodingHandlerPtr,   // xmlCharEncodingHandlerPtr
            buffer: xmlBufPtr,   // xmlBufPtr
            raw: xmlBufPtr,   // xmlBufPtr
            compressed: number,   // int
            error: number,   // int
            rawconsumed: number,   // unsigned long

getCPtr: {
            (): number,
        }}
type xmlParserInputDeallocate = {}
export type xmlParserInputPtr = {
            buf: xmlParserInputBufferPtr,   // xmlParserInputBufferPtr
            filename: string,   // q(const).char
            directory: string,   // q(const).char
            base: string,   // q(const).xmlChar
            cur: string,   // q(const).xmlChar
            end: string,   // q(const).xmlChar
            length: number,   // int
            line: number,   // int
            col: number,   // int
            consumed: number,   // unsigned long
            free: xmlParserInputDeallocate,   // xmlParserInputDeallocate
            encoding: string,   // q(const).xmlChar
            version: string,   // q(const).xmlChar
            standalone: number,   // int
            id: number,   // int

getCPtr: {
            (): number,
        }}
type xmlParserInputState = {}
type xmlParserMode = {}
type xmlParserNodeInfo = {}
export type xmlParserNodeInfoPtr = {
            node: undefined,   // q(const)._xmlNode
            begin_pos: number,   // unsigned long
            begin_line: number,   // unsigned long
            end_pos: number,   // unsigned long
            end_line: number,   // unsigned long

getCPtr: {
            (): number,
        }}
type xmlParserNodeInfoSeq = {}
export type xmlParserNodeInfoSeqPtr = {
            maximum: number,   // unsigned long
            length: number,   // unsigned long
            buffer: xmlParserNodeInfo,   // xmlParserNodeInfo

getCPtr: {
            (): number,
        }}
type xmlParserOption = {}
type xmlParserProperties = {}
type xmlParserSeverities = {}
type xmlPattern = {}
type xmlPatternFlags = {}
type xmlPatternPtr = {}
type xmlRMutex = {}
type xmlRMutexPtr = {}
type xmlReaderTypes = {}
type xmlReallocFunc = {}
type xmlRef = {}
export type xmlRefPtr = {
            next: xmlRefPtr,   // _xmlRef
            value: string,   // q(const).xmlChar
            attr: xmlAttrPtr,   // xmlAttrPtr
            name: string,   // q(const).xmlChar
            lineno: number,   // int

getCPtr: {
            (): number,
        }}
type xmlRefTable = {}
type xmlRefTablePtr = {}
type xmlRegExecCallbacks = {}
type xmlRegExecCtxt = {}
type xmlRegExecCtxtPtr = {}
type xmlRegexp = {}
type xmlRegexpPtr = {}
type xmlRegisterNodeFunc = {}
type xmlRelaxNG = {}
type xmlRelaxNGParserCtxt = {}
type xmlRelaxNGParserCtxtPtr = {}
type xmlRelaxNGParserFlag = {}
type xmlRelaxNGPtr = {}
type xmlRelaxNGValidCtxt = {}
type xmlRelaxNGValidCtxtPtr = {}
type xmlRelaxNGValidErr = {}
type xmlRelaxNGValidityErrorFunc = {}
type xmlRelaxNGValidityWarningFunc = {}
type xmlSAXHandler = {}
export type xmlSAXHandlerPtr = {
            internalSubset: internalSubsetSAXFunc,   // internalSubsetSAXFunc
            isStandalone: isStandaloneSAXFunc,   // isStandaloneSAXFunc
            hasInternalSubset: hasInternalSubsetSAXFunc,   // hasInternalSubsetSAXFunc
            hasExternalSubset: hasExternalSubsetSAXFunc,   // hasExternalSubsetSAXFunc
            resolveEntity: resolveEntitySAXFunc,   // resolveEntitySAXFunc
            getEntity: getEntitySAXFunc,   // getEntitySAXFunc
            entityDecl: entityDeclSAXFunc,   // entityDeclSAXFunc
            notationDecl: notationDeclSAXFunc,   // notationDeclSAXFunc
            attributeDecl: attributeDeclSAXFunc,   // attributeDeclSAXFunc
            elementDecl: elementDeclSAXFunc,   // elementDeclSAXFunc
            unparsedEntityDecl: unparsedEntityDeclSAXFunc,   // unparsedEntityDeclSAXFunc
            setDocumentLocator: setDocumentLocatorSAXFunc,   // setDocumentLocatorSAXFunc
            startDocument: startDocumentSAXFunc,   // startDocumentSAXFunc
            endDocument: endDocumentSAXFunc,   // endDocumentSAXFunc
            startElement: startElementSAXFunc,   // startElementSAXFunc
            endElement: endElementSAXFunc,   // endElementSAXFunc
            reference: referenceSAXFunc,   // referenceSAXFunc
            characters: charactersSAXFunc,   // charactersSAXFunc
            ignorableWhitespace: ignorableWhitespaceSAXFunc,   // ignorableWhitespaceSAXFunc
            processingInstruction: processingInstructionSAXFunc,   // processingInstructionSAXFunc
            comment: commentSAXFunc,   // commentSAXFunc
            warning: warningSAXFunc,   // warningSAXFunc
            error: errorSAXFunc,   // errorSAXFunc
            fatalError: fatalErrorSAXFunc,   // fatalErrorSAXFunc
            getParameterEntity: getParameterEntitySAXFunc,   // getParameterEntitySAXFunc
            cdataBlock: cdataBlockSAXFunc,   // cdataBlockSAXFunc
            externalSubset: externalSubsetSAXFunc,   // externalSubsetSAXFunc
            initialized: number,   // unsigned int
            _private: any,   // void
            startElementNs: startElementNsSAX2Func,   // startElementNsSAX2Func
            endElementNs: endElementNsSAX2Func,   // endElementNsSAX2Func
            serror: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc

getCPtr: {
            (): number,
        }}
type xmlSAXHandlerV1 = {}
export type xmlSAXHandlerV1Ptr = {
            internalSubset: internalSubsetSAXFunc,   // internalSubsetSAXFunc
            isStandalone: isStandaloneSAXFunc,   // isStandaloneSAXFunc
            hasInternalSubset: hasInternalSubsetSAXFunc,   // hasInternalSubsetSAXFunc
            hasExternalSubset: hasExternalSubsetSAXFunc,   // hasExternalSubsetSAXFunc
            resolveEntity: resolveEntitySAXFunc,   // resolveEntitySAXFunc
            getEntity: getEntitySAXFunc,   // getEntitySAXFunc
            entityDecl: entityDeclSAXFunc,   // entityDeclSAXFunc
            notationDecl: notationDeclSAXFunc,   // notationDeclSAXFunc
            attributeDecl: attributeDeclSAXFunc,   // attributeDeclSAXFunc
            elementDecl: elementDeclSAXFunc,   // elementDeclSAXFunc
            unparsedEntityDecl: unparsedEntityDeclSAXFunc,   // unparsedEntityDeclSAXFunc
            setDocumentLocator: setDocumentLocatorSAXFunc,   // setDocumentLocatorSAXFunc
            startDocument: startDocumentSAXFunc,   // startDocumentSAXFunc
            endDocument: endDocumentSAXFunc,   // endDocumentSAXFunc
            startElement: startElementSAXFunc,   // startElementSAXFunc
            endElement: endElementSAXFunc,   // endElementSAXFunc
            reference: referenceSAXFunc,   // referenceSAXFunc
            characters: charactersSAXFunc,   // charactersSAXFunc
            ignorableWhitespace: ignorableWhitespaceSAXFunc,   // ignorableWhitespaceSAXFunc
            processingInstruction: processingInstructionSAXFunc,   // processingInstructionSAXFunc
            comment: commentSAXFunc,   // commentSAXFunc
            warning: warningSAXFunc,   // warningSAXFunc
            error: errorSAXFunc,   // errorSAXFunc
            fatalError: fatalErrorSAXFunc,   // fatalErrorSAXFunc
            getParameterEntity: getParameterEntitySAXFunc,   // getParameterEntitySAXFunc
            cdataBlock: cdataBlockSAXFunc,   // cdataBlockSAXFunc
            externalSubset: externalSubsetSAXFunc,   // externalSubsetSAXFunc
            initialized: number,   // unsigned int

getCPtr: {
            (): number,
        }}
type xmlSAXLocator = {}
export type xmlSAXLocatorPtr = {
            getPublicId: string,   // q(const).xmlChar
            getSystemId: string,   // q(const).xmlChar
            getLineNumber: number,   // int
            getColumnNumber: number,   // int

getCPtr: {
            (): number,
        }}
type xmlSaveCtxt = {}
type xmlSaveCtxtPtr = {}
type xmlSaveOption = {}
type xmlSchema = {}
type xmlSchemaAnnot = {}
export type xmlSchemaAnnotPtr = {
            next: xmlSchemaAnnotPtr,   // _xmlSchemaAnnot
            content: xmlNodePtr,   // xmlNodePtr

getCPtr: {
            (): number,
        }}
type xmlSchemaAttribute = {}
type xmlSchemaAttributeGroup = {}
export type xmlSchemaAttributeGroupPtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            next: xmlSchemaAttributePtr,   // _xmlSchemaAttribute
            name: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            ref: string,   // q(const).xmlChar
            refNs: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
            node: xmlNodePtr,   // xmlNodePtr
            flags: number,   // int
            attributeWildcard: xmlSchemaWildcardPtr,   // xmlSchemaWildcardPtr
            refPrefix: string,   // q(const).xmlChar
            refItem: xmlSchemaAttributeGroupPtr,   // xmlSchemaAttributeGroupPtr
            targetNamespace: string,   // q(const).xmlChar
            attrUses: any,   // void

getCPtr: {
            (): number,
        }}
type xmlSchemaAttributeLink = {}
export type xmlSchemaAttributeLinkPtr = {
            next: xmlSchemaAttributeLinkPtr,   // _xmlSchemaAttributeLink
            attr: xmlSchemaAttributePtr,   // _xmlSchemaAttribute

getCPtr: {
            (): number,
        }}
export type xmlSchemaAttributePtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            next: xmlSchemaAttributePtr,   // _xmlSchemaAttribute
            name: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            ref: string,   // q(const).xmlChar
            refNs: string,   // q(const).xmlChar
            typeName: string,   // q(const).xmlChar
            typeNs: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            base: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            occurs: number,   // int
            defValue: string,   // q(const).xmlChar
            subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            node: xmlNodePtr,   // xmlNodePtr
            targetNamespace: string,   // q(const).xmlChar
            flags: number,   // int
            refPrefix: string,   // q(const).xmlChar
            defVal: xmlSchemaValPtr,   // xmlSchemaValPtr
            refDecl: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr

getCPtr: {
            (): number,
        }}
type xmlSchemaContentType = {}
type xmlSchemaElement = {}
export type xmlSchemaElementPtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            next: xmlSchemaTypePtr,   // _xmlSchemaType
            name: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            ref: string,   // q(const).xmlChar
            refNs: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
            node: xmlNodePtr,   // xmlNodePtr
            minOccurs: number,   // int
            maxOccurs: number,   // int
            flags: number,   // int
            targetNamespace: string,   // q(const).xmlChar
            namedType: string,   // q(const).xmlChar
            namedTypeNs: string,   // q(const).xmlChar
            substGroup: string,   // q(const).xmlChar
            substGroupNs: string,   // q(const).xmlChar
            scope: string,   // q(const).xmlChar
            value: string,   // q(const).xmlChar
            refDecl: xmlSchemaElementPtr,   // _xmlSchemaElement
            contModel: xmlRegexpPtr,   // xmlRegexpPtr
            contentType: xmlSchemaContentType,   // xmlSchemaContentType
            refPrefix: string,   // q(const).xmlChar
            defVal: xmlSchemaValPtr,   // xmlSchemaValPtr
            idcs: any,   // void

getCPtr: {
            (): number,
        }}
type xmlSchemaFacet = {}
type xmlSchemaFacetLink = {}
export type xmlSchemaFacetLinkPtr = {
            next: xmlSchemaFacetLinkPtr,   // _xmlSchemaFacetLink
            facet: xmlSchemaFacetPtr,   // xmlSchemaFacetPtr

getCPtr: {
            (): number,
        }}
export type xmlSchemaFacetPtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            next: xmlSchemaFacetPtr,   // _xmlSchemaFacet
            value: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            node: xmlNodePtr,   // xmlNodePtr
            fixed: number,   // int
            whitespace: number,   // int
            val: xmlSchemaValPtr,   // xmlSchemaValPtr
            regexp: xmlRegexpPtr,   // xmlRegexpPtr

getCPtr: {
            (): number,
        }}
type xmlSchemaNotation = {}
export type xmlSchemaNotationPtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            name: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            identifier: string,   // q(const).xmlChar
            targetNamespace: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
type xmlSchemaParserCtxt = {}
type xmlSchemaParserCtxtPtr = {}
export type xmlSchemaPtr = {
            name: string,   // q(const).xmlChar
            targetNamespace: string,   // q(const).xmlChar
            version: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            doc: xmlDocPtr,   // xmlDocPtr
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            flags: number,   // int
            typeDecl: xmlHashTablePtr,   // xmlHashTablePtr
            attrDecl: xmlHashTablePtr,   // xmlHashTablePtr
            attrgrpDecl: xmlHashTablePtr,   // xmlHashTablePtr
            elemDecl: xmlHashTablePtr,   // xmlHashTablePtr
            notaDecl: xmlHashTablePtr,   // xmlHashTablePtr
            schemasImports: xmlHashTablePtr,   // xmlHashTablePtr
            _private: any,   // void
            groupDecl: xmlHashTablePtr,   // xmlHashTablePtr
            dict: xmlDictPtr,   // xmlDictPtr
            includes: any,   // void
            preserve: number,   // int
            counter: number,   // int
            idcDef: xmlHashTablePtr,   // xmlHashTablePtr
            volatiles: any,   // void

getCPtr: {
            (): number,
        }}
type xmlSchemaSAXPlugPtr = {}
type xmlSchemaSAXPlugStruct = {}
type xmlSchemaType = {}
type xmlSchemaTypeLink = {}
export type xmlSchemaTypeLinkPtr = {
            next: xmlSchemaTypeLinkPtr,   // _xmlSchemaTypeLink
            type: xmlSchemaTypePtr,   // xmlSchemaTypePtr

getCPtr: {
            (): number,
        }}
export type xmlSchemaTypePtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            next: xmlSchemaTypePtr,   // _xmlSchemaType
            name: string,   // q(const).xmlChar
            id: string,   // q(const).xmlChar
            ref: string,   // q(const).xmlChar
            refNs: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
            node: xmlNodePtr,   // xmlNodePtr
            minOccurs: number,   // int
            maxOccurs: number,   // int
            flags: number,   // int
            contentType: xmlSchemaContentType,   // xmlSchemaContentType
            base: string,   // q(const).xmlChar
            baseNs: string,   // q(const).xmlChar
            baseType: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            facets: xmlSchemaFacetPtr,   // xmlSchemaFacetPtr
            redef: xmlSchemaTypePtr,   // _xmlSchemaType
            recurse: number,   // int
            attributeUses: xmlSchemaAttributeLinkPtr,   // xmlSchemaAttributeLinkPtr
            attributeWildcard: xmlSchemaWildcardPtr,   // xmlSchemaWildcardPtr
            builtInType: number,   // int
            memberTypes: xmlSchemaTypeLinkPtr,   // xmlSchemaTypeLinkPtr
            facetSet: xmlSchemaFacetLinkPtr,   // xmlSchemaFacetLinkPtr
            refPrefix: string,   // q(const).xmlChar
            contentTypeDef: xmlSchemaTypePtr,   // xmlSchemaTypePtr
            contModel: xmlRegexpPtr,   // xmlRegexpPtr
            targetNamespace: string,   // q(const).xmlChar
            attrUses: any,   // void

getCPtr: {
            (): number,
        }}
type xmlSchemaTypeType = {}
type xmlSchemaVal = {}
type xmlSchemaValPtr = {}
type xmlSchemaValType = {}
type xmlSchemaValidCtxt = {}
type xmlSchemaValidCtxtPtr = {}
type xmlSchemaValidError = {}
type xmlSchemaValidOption = {}
type xmlSchemaValidityErrorFunc = {}
type xmlSchemaValidityLocatorFunc = {}
type xmlSchemaValidityWarningFunc = {}
type xmlSchemaWhitespaceValueType = {}
type xmlSchemaWildcard = {}
type xmlSchemaWildcardNs = {}
export type xmlSchemaWildcardNsPtr = {
            next: xmlSchemaWildcardNsPtr,   // _xmlSchemaWildcardNs
            value: string,   // q(const).xmlChar

getCPtr: {
            (): number,
        }}
export type xmlSchemaWildcardPtr = {
            type: xmlSchemaTypeType,   // xmlSchemaTypeType
            id: string,   // q(const).xmlChar
            annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
            node: xmlNodePtr,   // xmlNodePtr
            minOccurs: number,   // int
            maxOccurs: number,   // int
            processContents: number,   // int
            any: number,   // int
            nsSet: xmlSchemaWildcardNsPtr,   // xmlSchemaWildcardNsPtr
            negNsSet: xmlSchemaWildcardNsPtr,   // xmlSchemaWildcardNsPtr
            flags: number,   // int

getCPtr: {
            (): number,
        }}
type xmlStrdupFunc = {}
type xmlStreamCtxt = {}
type xmlStreamCtxtPtr = {}
type xmlStructuredErrorFunc = {}
type xmlTextReader = {}
type xmlTextReaderErrorFunc = {}
type xmlTextReaderLocatorPtr = {}
type xmlTextReaderMode = {}
type xmlTextReaderPtr = {}
type xmlTextWriter = {}
type xmlTextWriterPtr = {}
type xmlURI = {}
export type xmlURIPtr = {
            scheme: string,   // char
            opaque: string,   // char
            authority: string,   // char
            server: string,   // char
            user: string,   // char
            port: number,   // int
            path: string,   // char
            query: string,   // char
            fragment: string,   // char
            cleanup: number,   // int
            query_raw: string,   // char

getCPtr: {
            (): number,
        }}
type xmlValidCtxt = {}
export type xmlValidCtxtPtr = {
            userData: any,   // void
            error: xmlValidityErrorFunc,   // xmlValidityErrorFunc
            warning: xmlValidityWarningFunc,   // xmlValidityWarningFunc
            node: xmlNodePtr,   // xmlNodePtr
            nodeNr: number,   // int
            nodeMax: number,   // int
            nodeTab: xmlNodePtr,   // xmlNodePtr
            finishDtd: number,   // unsigned int
            doc: xmlDocPtr,   // xmlDocPtr
            valid: number,   // int
            vstate: xmlValidState,   // xmlValidState
            vstateNr: number,   // int
            vstateMax: number,   // int
            vstateTab: xmlValidState,   // xmlValidState
            am: xmlAutomataPtr,   // xmlAutomataPtr
            state: xmlAutomataStatePtr,   // xmlAutomataStatePtr

getCPtr: {
            (): number,
        }}
type xmlValidState = {}
type xmlValidStatePtr = {}
type xmlValidityErrorFunc = {}
type xmlValidityWarningFunc = {}
type xmlXIncludeCtxt = {}
type xmlXIncludeCtxtPtr = {}
type xmlXPathAxis = {}
type xmlXPathAxisFunc = {}
export type xmlXPathAxisPtr = {
            name: string,   // q(const).xmlChar
            func: xmlXPathAxisFunc,   // xmlXPathAxisFunc

getCPtr: {
            (): number,
        }}
type xmlXPathCompExpr = {}
type xmlXPathCompExprPtr = {}
type xmlXPathContext = {}
export type xmlXPathContextPtr = {
            doc: xmlDocPtr,   // xmlDocPtr
            node: xmlNodePtr,   // xmlNodePtr
            nb_variables_unused: number,   // int
            max_variables_unused: number,   // int
            varHash: xmlHashTablePtr,   // xmlHashTablePtr
            nb_types: number,   // int
            max_types: number,   // int
            types: xmlXPathTypePtr,   // xmlXPathTypePtr
            nb_funcs_unused: number,   // int
            max_funcs_unused: number,   // int
            funcHash: xmlHashTablePtr,   // xmlHashTablePtr
            nb_axis: number,   // int
            max_axis: number,   // int
            axis: xmlXPathAxisPtr,   // xmlXPathAxisPtr
            namespaces: xmlNsPtr,   // xmlNsPtr
            nsNr: number,   // int
            user: any,   // void
            contextSize: number,   // int
            proximityPosition: number,   // int
            xptr: number,   // int
            here: xmlNodePtr,   // xmlNodePtr
            origin: xmlNodePtr,   // xmlNodePtr
            nsHash: xmlHashTablePtr,   // xmlHashTablePtr
            varLookupFunc: xmlXPathVariableLookupFunc,   // xmlXPathVariableLookupFunc
            varLookupData: any,   // void
            extra: any,   // void
            function: string,   // q(const).xmlChar
            functionURI: string,   // q(const).xmlChar
            funcLookupFunc: xmlXPathFuncLookupFunc,   // xmlXPathFuncLookupFunc
            funcLookupData: any,   // void
            tmpNsList: xmlNsPtr,   // xmlNsPtr
            tmpNsNr: number,   // int
            userData: any,   // void
            error: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc
            lastError: xmlError,   // xmlError
            debugNode: xmlNodePtr,   // xmlNodePtr
            dict: xmlDictPtr,   // xmlDictPtr
            flags: number,   // int
            cache: any,   // void
            opLimit: number,   // unsigned long
            opCount: number,   // unsigned long
            depth: number,   // int

getCPtr: {
            (): number,
        }}
type xmlXPathConvertFunc = {}
type xmlXPathError = {}
type xmlXPathEvalFunc = {}
type xmlXPathFuncLookupFunc = {}
type xmlXPathFuncPtr = {}
type xmlXPathFunct = {}
type xmlXPathFunction = {}
type xmlXPathObject = {}
export type xmlXPathObjectPtr = {
            type: xmlXPathObjectType,   // xmlXPathObjectType
            nodesetval: xmlNodePtr[],   // xmlNodeSetPtr
            boolval: number,   // int
            floatval: number,   // double
            stringval: string,   // xmlChar
            user: any,   // void
            index: number,   // int
            user2: any,   // void
            index2: number,   // int

getCPtr: {
            (): number,
        }}
type xmlXPathObjectType = {}
type xmlXPathParserContext = {}
export type xmlXPathParserContextPtr = {
            cur: string,   // q(const).xmlChar
            base: string,   // q(const).xmlChar
            error: number,   // int
            context: xmlXPathContextPtr,   // xmlXPathContextPtr
            value: xmlXPathObjectPtr,   // xmlXPathObjectPtr
            valueNr: number,   // int
            valueMax: number,   // int
            valueTab: xmlXPathObjectPtr,   // xmlXPathObjectPtr
            comp: xmlXPathCompExprPtr,   // xmlXPathCompExprPtr
            xptr: number,   // int
            ancestor: xmlNodePtr,   // xmlNodePtr
            valueFrame: number,   // int

getCPtr: {
            (): number,
        }}
type xmlXPathType = {}
export type xmlXPathTypePtr = {
            name: string,   // q(const).xmlChar
            func: xmlXPathConvertFunc,   // xmlXPathConvertFunc

getCPtr: {
            (): number,
        }}
type xmlXPathVariable = {}
type xmlXPathVariableLookupFunc = {}
export type xmlXPathVariablePtr = {
            name: string,   // q(const).xmlChar
            value: xmlXPathObjectPtr,   // xmlXPathObjectPtr

getCPtr: {
            (): number,
        }}
type xmljsRef = {}

export enum FROM_BUFFER_ASYNC_TYPE {
    XML = 0,
    HTML = 1,
};

export interface NativeBindings {
    /* Constants */

    
            BASE_BUFFER_SIZE: number
            HAVE_ARPA_INET_H: number
            HAVE_ARPA_NAMESER_H: number
            HAVE_CTYPE_H: number
            HAVE_DIRENT_H: number
            HAVE_DLFCN_H: number
            HAVE_ERRNO_H: number
            HAVE_FCNTL_H: number
            HAVE_FINITE: number
            HAVE_FLOAT_H: number
            HAVE_FPRINTF: number
            HAVE_FTIME: number
            HAVE_GETTIMEOFDAY: number
            HAVE_INTTYPES_H: number
            HAVE_ISASCII: number
            HAVE_LIBZ: number
            HAVE_LIMITS_H: number
            HAVE_LOCALTIME: number
            HAVE_MATH_H: number
            HAVE_MEMORY_H: number
            HAVE_MMAP: number
            HAVE_MUNMAP: number
            HAVE_NETDB_H: number
            HAVE_NETINET_IN_H: number
            HAVE_POLL_H: number
            HAVE_PRINTF: number
            HAVE_PUTENV: number
            HAVE_RAND: number
            HAVE_RESOLV_H: number
            HAVE_SIGNAL: number
            HAVE_SIGNAL_H: number
            HAVE_SNPRINTF: number
            HAVE_SPRINTF: number
            HAVE_SRAND: number
            HAVE_SSCANF: number
            HAVE_STAT: number
            HAVE_STDARG_H: number
            HAVE_STDINT_H: number
            HAVE_STDLIB_H: number
            HAVE_STRDUP: number
            HAVE_STRERROR: number
            HAVE_STRFTIME: number
            HAVE_STRINGS_H: number
            HAVE_STRING_H: number
            HAVE_STRNDUP: number
            HAVE_SYS_MMAN_H: number
            HAVE_SYS_SELECT_H: number
            HAVE_SYS_SOCKET_H: number
            HAVE_SYS_STAT_H: number
            HAVE_SYS_TIMEB_H: number
            HAVE_SYS_TIME_H: number
            HAVE_SYS_TYPES_H: number
            HAVE_TIME: number
            HAVE_TIME_H: number
            HAVE_VA_COPY: number
            HAVE_VFPRINTF: number
            HAVE_VSNPRINTF: number
            HAVE_VSPRINTF: number
            HTML_DEPRECATED: number
            HTML_INVALID: number
            HTML_NA: number
            HTML_PARSE_COMPACT: number
            HTML_PARSE_IGNORE_ENC: number
            HTML_PARSE_NOBLANKS: number
            HTML_PARSE_NODEFDTD: number
            HTML_PARSE_NOERROR: number
            HTML_PARSE_NOIMPLIED: number
            HTML_PARSE_NONET: number
            HTML_PARSE_NOWARNING: number
            HTML_PARSE_PEDANTIC: number
            HTML_PARSE_RECOVER: number
            HTML_REQUIRED: number
            HTML_VALID: number
            INPUT_CHUNK: number
            LIBXML_DOTTED_VERSION: string
            LIBXML_MODULE_EXTENSION: string
            LIBXML_VERSION: number
            LIBXML_VERSION_EXTRA: string
            LIBXML_VERSION_STRING: string
            LT_OBJDIR: string
            PACKAGE: string
            PACKAGE_BUGREPORT: string
            PACKAGE_NAME: string
            PACKAGE_STRING: string
            PACKAGE_TARNAME: string
            PACKAGE_URL: string
            PACKAGE_VERSION: string
            STDC_HEADERS: number
            VA_LIST_IS_ARRAY: number
            VERSION: string
            XLINK_ACTUATE_AUTO: number
            XLINK_ACTUATE_NONE: number
            XLINK_ACTUATE_ONREQUEST: number
            XLINK_SHOW_EMBED: number
            XLINK_SHOW_NEW: number
            XLINK_SHOW_NONE: number
            XLINK_SHOW_REPLACE: number
            XLINK_TYPE_EXTENDED: number
            XLINK_TYPE_EXTENDED_SET: number
            XLINK_TYPE_NONE: number
            XLINK_TYPE_SIMPLE: number
            XML_ATTRIBUTE_CDATA: number
            XML_ATTRIBUTE_DECL: number
            XML_ATTRIBUTE_ENTITIES: number
            XML_ATTRIBUTE_ENTITY: number
            XML_ATTRIBUTE_ENUMERATION: number
            XML_ATTRIBUTE_FIXED: number
            XML_ATTRIBUTE_ID: number
            XML_ATTRIBUTE_IDREF: number
            XML_ATTRIBUTE_IDREFS: number
            XML_ATTRIBUTE_IMPLIED: number
            XML_ATTRIBUTE_NMTOKEN: number
            XML_ATTRIBUTE_NMTOKENS: number
            XML_ATTRIBUTE_NODE: number
            XML_ATTRIBUTE_NONE: number
            XML_ATTRIBUTE_NOTATION: number
            XML_ATTRIBUTE_REQUIRED: number
            XML_BUFFER_ALLOC_BOUNDED: number
            XML_BUFFER_ALLOC_DOUBLEIT: number
            XML_BUFFER_ALLOC_EXACT: number
            XML_BUFFER_ALLOC_HYBRID: number
            XML_BUFFER_ALLOC_IMMUTABLE: number
            XML_BUFFER_ALLOC_IO: number
            XML_BUF_OVERFLOW: number
            XML_C14N_CREATE_CTXT: number
            XML_C14N_CREATE_STACK: number
            XML_C14N_INVALID_NODE: number
            XML_C14N_RELATIVE_NAMESPACE: number
            XML_C14N_REQUIRES_UTF8: number
            XML_C14N_UNKNOW_NODE: number
            XML_CATALOG_ENTRY_BROKEN: number
            XML_CATALOG_MISSING_ATTR: number
            XML_CATALOG_NOT_CATALOG: number
            XML_CATALOG_PREFER_VALUE: number
            XML_CATALOG_RECURSION: number
            XML_CATA_ALLOW_ALL: number
            XML_CATA_ALLOW_DOCUMENT: number
            XML_CATA_ALLOW_GLOBAL: number
            XML_CATA_ALLOW_NONE: number
            XML_CATA_PREFER_NONE: number
            XML_CATA_PREFER_PUBLIC: number
            XML_CATA_PREFER_SYSTEM: number
            XML_CDATA_SECTION_NODE: number
            XML_CHAR_ENCODING_2022_JP: number
            XML_CHAR_ENCODING_8859_1: number
            XML_CHAR_ENCODING_8859_2: number
            XML_CHAR_ENCODING_8859_3: number
            XML_CHAR_ENCODING_8859_4: number
            XML_CHAR_ENCODING_8859_5: number
            XML_CHAR_ENCODING_8859_6: number
            XML_CHAR_ENCODING_8859_7: number
            XML_CHAR_ENCODING_8859_8: number
            XML_CHAR_ENCODING_8859_9: number
            XML_CHAR_ENCODING_ASCII: number
            XML_CHAR_ENCODING_EBCDIC: number
            XML_CHAR_ENCODING_ERROR: number
            XML_CHAR_ENCODING_EUC_JP: number
            XML_CHAR_ENCODING_NONE: number
            XML_CHAR_ENCODING_SHIFT_JIS: number
            XML_CHAR_ENCODING_UCS2: number
            XML_CHAR_ENCODING_UCS4BE: number
            XML_CHAR_ENCODING_UCS4LE: number
            XML_CHAR_ENCODING_UCS4_2143: number
            XML_CHAR_ENCODING_UCS4_3412: number
            XML_CHAR_ENCODING_UTF16BE: number
            XML_CHAR_ENCODING_UTF16LE: number
            XML_CHAR_ENCODING_UTF8: number
            XML_CHECK_ENTITY_TYPE: number
            XML_CHECK_FOUND_ATTRIBUTE: number
            XML_CHECK_FOUND_CDATA: number
            XML_CHECK_FOUND_COMMENT: number
            XML_CHECK_FOUND_DOCTYPE: number
            XML_CHECK_FOUND_ELEMENT: number
            XML_CHECK_FOUND_ENTITY: number
            XML_CHECK_FOUND_ENTITYREF: number
            XML_CHECK_FOUND_FRAGMENT: number
            XML_CHECK_FOUND_NOTATION: number
            XML_CHECK_FOUND_PI: number
            XML_CHECK_FOUND_TEXT: number
            XML_CHECK_NAME_NOT_NULL: number
            XML_CHECK_NOT_ATTR: number
            XML_CHECK_NOT_ATTR_DECL: number
            XML_CHECK_NOT_DTD: number
            XML_CHECK_NOT_ELEM_DECL: number
            XML_CHECK_NOT_ENTITY_DECL: number
            XML_CHECK_NOT_NCNAME: number
            XML_CHECK_NOT_NS_DECL: number
            XML_CHECK_NOT_UTF8: number
            XML_CHECK_NO_DICT: number
            XML_CHECK_NO_DOC: number
            XML_CHECK_NO_ELEM: number
            XML_CHECK_NO_HREF: number
            XML_CHECK_NO_NAME: number
            XML_CHECK_NO_NEXT: number
            XML_CHECK_NO_PARENT: number
            XML_CHECK_NO_PREV: number
            XML_CHECK_NS_ANCESTOR: number
            XML_CHECK_NS_SCOPE: number
            XML_CHECK_OUTSIDE_DICT: number
            XML_CHECK_UNKNOWN_NODE: number
            XML_CHECK_WRONG_DOC: number
            XML_CHECK_WRONG_NAME: number
            XML_CHECK_WRONG_NEXT: number
            XML_CHECK_WRONG_PARENT: number
            XML_CHECK_WRONG_PREV: number
            XML_COMMENT_NODE: number
            XML_COMPLETE_ATTRS: number
            XML_DEFAULT_VERSION: string
            XML_DETECT_IDS: number
            XML_DOCB_DOCUMENT_NODE: number
            XML_DOCUMENT_FRAG_NODE: number
            XML_DOCUMENT_NODE: number
            XML_DOCUMENT_TYPE_NODE: number
            XML_DOC_DTDVALID: number
            XML_DOC_HTML: number
            XML_DOC_INTERNAL: number
            XML_DOC_NSVALID: number
            XML_DOC_OLD10: number
            XML_DOC_USERBUILT: number
            XML_DOC_WELLFORMED: number
            XML_DOC_XINCLUDE: number
            XML_DTD_ATTRIBUTE_DEFAULT: number
            XML_DTD_ATTRIBUTE_REDEFINED: number
            XML_DTD_ATTRIBUTE_VALUE: number
            XML_DTD_CONTENT_ERROR: number
            XML_DTD_CONTENT_MODEL: number
            XML_DTD_CONTENT_NOT_DETERMINIST: number
            XML_DTD_DIFFERENT_PREFIX: number
            XML_DTD_DUP_TOKEN: number
            XML_DTD_ELEM_DEFAULT_NAMESPACE: number
            XML_DTD_ELEM_NAMESPACE: number
            XML_DTD_ELEM_REDEFINED: number
            XML_DTD_EMPTY_NOTATION: number
            XML_DTD_ENTITY_TYPE: number
            XML_DTD_ID_FIXED: number
            XML_DTD_ID_REDEFINED: number
            XML_DTD_ID_SUBSET: number
            XML_DTD_INVALID_CHILD: number
            XML_DTD_INVALID_DEFAULT: number
            XML_DTD_LOAD_ERROR: number
            XML_DTD_MISSING_ATTRIBUTE: number
            XML_DTD_MIXED_CORRUPT: number
            XML_DTD_MULTIPLE_ID: number
            XML_DTD_NODE: number
            XML_DTD_NOTATION_REDEFINED: number
            XML_DTD_NOTATION_VALUE: number
            XML_DTD_NOT_EMPTY: number
            XML_DTD_NOT_PCDATA: number
            XML_DTD_NOT_STANDALONE: number
            XML_DTD_NO_DOC: number
            XML_DTD_NO_DTD: number
            XML_DTD_NO_ELEM_NAME: number
            XML_DTD_NO_PREFIX: number
            XML_DTD_NO_ROOT: number
            XML_DTD_ROOT_NAME: number
            XML_DTD_STANDALONE_DEFAULTED: number
            XML_DTD_STANDALONE_WHITE_SPACE: number
            XML_DTD_UNKNOWN_ATTRIBUTE: number
            XML_DTD_UNKNOWN_ELEM: number
            XML_DTD_UNKNOWN_ENTITY: number
            XML_DTD_UNKNOWN_ID: number
            XML_DTD_UNKNOWN_NOTATION: number
            XML_DTD_XMLID_TYPE: number
            XML_DTD_XMLID_VALUE: number
            XML_ELEMENT_CONTENT_ELEMENT: number
            XML_ELEMENT_CONTENT_MULT: number
            XML_ELEMENT_CONTENT_ONCE: number
            XML_ELEMENT_CONTENT_OPT: number
            XML_ELEMENT_CONTENT_OR: number
            XML_ELEMENT_CONTENT_PCDATA: number
            XML_ELEMENT_CONTENT_PLUS: number
            XML_ELEMENT_CONTENT_SEQ: number
            XML_ELEMENT_DECL: number
            XML_ELEMENT_NODE: number
            XML_ELEMENT_TYPE_ANY: number
            XML_ELEMENT_TYPE_ELEMENT: number
            XML_ELEMENT_TYPE_EMPTY: number
            XML_ELEMENT_TYPE_MIXED: number
            XML_ELEMENT_TYPE_UNDEFINED: number
            XML_ENTITY_DECL: number
            XML_ENTITY_NODE: number
            XML_ENTITY_REF_NODE: number
            XML_ERR_ATTLIST_NOT_FINISHED: number
            XML_ERR_ATTLIST_NOT_STARTED: number
            XML_ERR_ATTRIBUTE_NOT_FINISHED: number
            XML_ERR_ATTRIBUTE_NOT_STARTED: number
            XML_ERR_ATTRIBUTE_REDEFINED: number
            XML_ERR_ATTRIBUTE_WITHOUT_VALUE: number
            XML_ERR_CDATA_NOT_FINISHED: number
            XML_ERR_CHARREF_AT_EOF: number
            XML_ERR_CHARREF_IN_DTD: number
            XML_ERR_CHARREF_IN_EPILOG: number
            XML_ERR_CHARREF_IN_PROLOG: number
            XML_ERR_COMMENT_NOT_FINISHED: number
            XML_ERR_CONDSEC_INVALID: number
            XML_ERR_CONDSEC_INVALID_KEYWORD: number
            XML_ERR_CONDSEC_NOT_FINISHED: number
            XML_ERR_CONDSEC_NOT_STARTED: number
            XML_ERR_DOCTYPE_NOT_FINISHED: number
            XML_ERR_DOCUMENT_EMPTY: number
            XML_ERR_DOCUMENT_END: number
            XML_ERR_DOCUMENT_START: number
            XML_ERR_ELEMCONTENT_NOT_FINISHED: number
            XML_ERR_ELEMCONTENT_NOT_STARTED: number
            XML_ERR_ENCODING_NAME: number
            XML_ERR_ENTITYREF_AT_EOF: number
            XML_ERR_ENTITYREF_IN_DTD: number
            XML_ERR_ENTITYREF_IN_EPILOG: number
            XML_ERR_ENTITYREF_IN_PROLOG: number
            XML_ERR_ENTITYREF_NO_NAME: number
            XML_ERR_ENTITYREF_SEMICOL_MISSING: number
            XML_ERR_ENTITY_BOUNDARY: number
            XML_ERR_ENTITY_CHAR_ERROR: number
            XML_ERR_ENTITY_IS_EXTERNAL: number
            XML_ERR_ENTITY_IS_PARAMETER: number
            XML_ERR_ENTITY_LOOP: number
            XML_ERR_ENTITY_NOT_FINISHED: number
            XML_ERR_ENTITY_NOT_STARTED: number
            XML_ERR_ENTITY_PE_INTERNAL: number
            XML_ERR_ENTITY_PROCESSING: number
            XML_ERR_EQUAL_REQUIRED: number
            XML_ERR_ERROR: number
            XML_ERR_EXTRA_CONTENT: number
            XML_ERR_EXT_ENTITY_STANDALONE: number
            XML_ERR_EXT_SUBSET_NOT_FINISHED: number
            XML_ERR_FATAL: number
            XML_ERR_GT_REQUIRED: number
            XML_ERR_HYPHEN_IN_COMMENT: number
            XML_ERR_INTERNAL_ERROR: number
            XML_ERR_INVALID_CHAR: number
            XML_ERR_INVALID_CHARREF: number
            XML_ERR_INVALID_DEC_CHARREF: number
            XML_ERR_INVALID_ENCODING: number
            XML_ERR_INVALID_HEX_CHARREF: number
            XML_ERR_INVALID_URI: number
            XML_ERR_LITERAL_NOT_FINISHED: number
            XML_ERR_LITERAL_NOT_STARTED: number
            XML_ERR_LTSLASH_REQUIRED: number
            XML_ERR_LT_IN_ATTRIBUTE: number
            XML_ERR_LT_REQUIRED: number
            XML_ERR_MISPLACED_CDATA_END: number
            XML_ERR_MISSING_ENCODING: number
            XML_ERR_MIXED_NOT_FINISHED: number
            XML_ERR_MIXED_NOT_STARTED: number
            XML_ERR_NAME_REQUIRED: number
            XML_ERR_NAME_TOO_LONG: number
            XML_ERR_NMTOKEN_REQUIRED: number
            XML_ERR_NONE: number
            XML_ERR_NOTATION_NOT_FINISHED: number
            XML_ERR_NOTATION_NOT_STARTED: number
            XML_ERR_NOTATION_PROCESSING: number
            XML_ERR_NOT_STANDALONE: number
            XML_ERR_NOT_WELL_BALANCED: number
            XML_ERR_NO_DTD: number
            XML_ERR_NO_MEMORY: number
            XML_ERR_NS_DECL_ERROR: number
            XML_ERR_OK: number
            XML_ERR_PCDATA_REQUIRED: number
            XML_ERR_PEREF_AT_EOF: number
            XML_ERR_PEREF_IN_EPILOG: number
            XML_ERR_PEREF_IN_INT_SUBSET: number
            XML_ERR_PEREF_IN_PROLOG: number
            XML_ERR_PEREF_NO_NAME: number
            XML_ERR_PEREF_SEMICOL_MISSING: number
            XML_ERR_PI_NOT_FINISHED: number
            XML_ERR_PI_NOT_STARTED: number
            XML_ERR_PUBID_REQUIRED: number
            XML_ERR_RESERVED_XML_NAME: number
            XML_ERR_SEPARATOR_REQUIRED: number
            XML_ERR_SPACE_REQUIRED: number
            XML_ERR_STANDALONE_VALUE: number
            XML_ERR_STRING_NOT_CLOSED: number
            XML_ERR_STRING_NOT_STARTED: number
            XML_ERR_TAG_NAME_MISMATCH: number
            XML_ERR_TAG_NOT_FINISHED: number
            XML_ERR_UNDECLARED_ENTITY: number
            XML_ERR_UNKNOWN_ENCODING: number
            XML_ERR_UNKNOWN_VERSION: number
            XML_ERR_UNPARSED_ENTITY: number
            XML_ERR_UNSUPPORTED_ENCODING: number
            XML_ERR_URI_FRAGMENT: number
            XML_ERR_URI_REQUIRED: number
            XML_ERR_USER_STOP: number
            XML_ERR_VALUE_REQUIRED: number
            XML_ERR_VERSION_MISMATCH: number
            XML_ERR_VERSION_MISSING: number
            XML_ERR_WARNING: number
            XML_ERR_XMLDECL_NOT_FINISHED: number
            XML_ERR_XMLDECL_NOT_STARTED: number
            XML_EXTERNAL_GENERAL_PARSED_ENTITY: number
            XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: number
            XML_EXTERNAL_PARAMETER_ENTITY: number
            XML_FROM_BUFFER: number
            XML_FROM_C14N: number
            XML_FROM_CATALOG: number
            XML_FROM_CHECK: number
            XML_FROM_DATATYPE: number
            XML_FROM_DTD: number
            XML_FROM_FTP: number
            XML_FROM_HTML: number
            XML_FROM_HTTP: number
            XML_FROM_I18N: number
            XML_FROM_IO: number
            XML_FROM_MEMORY: number
            XML_FROM_MODULE: number
            XML_FROM_NAMESPACE: number
            XML_FROM_NONE: number
            XML_FROM_OUTPUT: number
            XML_FROM_PARSER: number
            XML_FROM_REGEXP: number
            XML_FROM_RELAXNGP: number
            XML_FROM_RELAXNGV: number
            XML_FROM_SCHEMASP: number
            XML_FROM_SCHEMASV: number
            XML_FROM_SCHEMATRONV: number
            XML_FROM_TREE: number
            XML_FROM_URI: number
            XML_FROM_VALID: number
            XML_FROM_WRITER: number
            XML_FROM_XINCLUDE: number
            XML_FROM_XPATH: number
            XML_FROM_XPOINTER: number
            XML_FROM_XSLT: number
            XML_FTP_ACCNT: number
            XML_FTP_EPSV_ANSWER: number
            XML_FTP_PASV_ANSWER: number
            XML_FTP_URL_SYNTAX: number
            XML_HTML_DOCUMENT_NODE: number
            XML_HTML_STRUCURE_ERROR: number
            XML_HTML_UNKNOWN_TAG: number
            XML_HTTP_UNKNOWN_HOST: number
            XML_HTTP_URL_SYNTAX: number
            XML_HTTP_USE_IP: number
            XML_I18N_CONV_FAILED: number
            XML_I18N_EXCESS_HANDLER: number
            XML_I18N_NO_HANDLER: number
            XML_I18N_NO_NAME: number
            XML_I18N_NO_OUTPUT: number
            XML_INTERNAL_GENERAL_ENTITY: number
            XML_INTERNAL_PARAMETER_ENTITY: number
            XML_INTERNAL_PREDEFINED_ENTITY: number
            XML_IO_BUFFER_FULL: number
            XML_IO_EACCES: number
            XML_IO_EADDRINUSE: number
            XML_IO_EAFNOSUPPORT: number
            XML_IO_EAGAIN: number
            XML_IO_EALREADY: number
            XML_IO_EBADF: number
            XML_IO_EBADMSG: number
            XML_IO_EBUSY: number
            XML_IO_ECANCELED: number
            XML_IO_ECHILD: number
            XML_IO_ECONNREFUSED: number
            XML_IO_EDEADLK: number
            XML_IO_EDOM: number
            XML_IO_EEXIST: number
            XML_IO_EFAULT: number
            XML_IO_EFBIG: number
            XML_IO_EINPROGRESS: number
            XML_IO_EINTR: number
            XML_IO_EINVAL: number
            XML_IO_EIO: number
            XML_IO_EISCONN: number
            XML_IO_EISDIR: number
            XML_IO_EMFILE: number
            XML_IO_EMLINK: number
            XML_IO_EMSGSIZE: number
            XML_IO_ENAMETOOLONG: number
            XML_IO_ENCODER: number
            XML_IO_ENETUNREACH: number
            XML_IO_ENFILE: number
            XML_IO_ENODEV: number
            XML_IO_ENOENT: number
            XML_IO_ENOEXEC: number
            XML_IO_ENOLCK: number
            XML_IO_ENOMEM: number
            XML_IO_ENOSPC: number
            XML_IO_ENOSYS: number
            XML_IO_ENOTDIR: number
            XML_IO_ENOTEMPTY: number
            XML_IO_ENOTSOCK: number
            XML_IO_ENOTSUP: number
            XML_IO_ENOTTY: number
            XML_IO_ENXIO: number
            XML_IO_EPERM: number
            XML_IO_EPIPE: number
            XML_IO_ERANGE: number
            XML_IO_EROFS: number
            XML_IO_ESPIPE: number
            XML_IO_ESRCH: number
            XML_IO_ETIMEDOUT: number
            XML_IO_EXDEV: number
            XML_IO_FLUSH: number
            XML_IO_LOAD_ERROR: number
            XML_IO_NETWORK_ATTEMPT: number
            XML_IO_NO_INPUT: number
            XML_IO_UNKNOWN: number
            XML_IO_WRITE: number
            XML_MAX_DICTIONARY_LIMIT: number
            XML_MAX_LOOKUP_LIMIT: number
            XML_MAX_NAMELEN: number
            XML_MAX_NAME_LENGTH: number
            XML_MAX_TEXT_LENGTH: number
            XML_MODULE_CLOSE: number
            XML_MODULE_LAZY: number
            XML_MODULE_LOCAL: number
            XML_MODULE_OPEN: number
            XML_NAMESPACE_DECL: number
            XML_NOTATION_NODE: number
            XML_NS_ERR_ATTRIBUTE_REDEFINED: number
            XML_NS_ERR_COLON: number
            XML_NS_ERR_EMPTY: number
            XML_NS_ERR_QNAME: number
            XML_NS_ERR_UNDEFINED_NAMESPACE: number
            XML_NS_ERR_XML_NAMESPACE: number
            XML_PARSER_ATTRIBUTE_VALUE: number
            XML_PARSER_CDATA_SECTION: number
            XML_PARSER_COMMENT: number
            XML_PARSER_CONTENT: number
            XML_PARSER_DEFAULTATTRS: number
            XML_PARSER_DTD: number
            XML_PARSER_END_TAG: number
            XML_PARSER_ENTITY_DECL: number
            XML_PARSER_ENTITY_VALUE: number
            XML_PARSER_EOF: number
            XML_PARSER_EPILOG: number
            XML_PARSER_IGNORE: number
            XML_PARSER_LOADDTD: number
            XML_PARSER_MISC: number
            XML_PARSER_PI: number
            XML_PARSER_PROLOG: number
            XML_PARSER_PUBLIC_LITERAL: number
            XML_PARSER_SEVERITY_ERROR: number
            XML_PARSER_SEVERITY_VALIDITY_ERROR: number
            XML_PARSER_SEVERITY_VALIDITY_WARNING: number
            XML_PARSER_SEVERITY_WARNING: number
            XML_PARSER_START: number
            XML_PARSER_START_TAG: number
            XML_PARSER_SUBST_ENTITIES: number
            XML_PARSER_SYSTEM_LITERAL: number
            XML_PARSER_VALIDATE: number
            XML_PARSE_BIG_LINES: number
            XML_PARSE_COMPACT: number
            XML_PARSE_DOM: number
            XML_PARSE_DTDATTR: number
            XML_PARSE_DTDLOAD: number
            XML_PARSE_DTDVALID: number
            XML_PARSE_HUGE: number
            XML_PARSE_IGNORE_ENC: number
            XML_PARSE_NOBASEFIX: number
            XML_PARSE_NOBLANKS: number
            XML_PARSE_NOCDATA: number
            XML_PARSE_NODICT: number
            XML_PARSE_NOENT: number
            XML_PARSE_NOERROR: number
            XML_PARSE_NONET: number
            XML_PARSE_NOWARNING: number
            XML_PARSE_NOXINCNODE: number
            XML_PARSE_NSCLEAN: number
            XML_PARSE_OLD10: number
            XML_PARSE_OLDSAX: number
            XML_PARSE_PEDANTIC: number
            XML_PARSE_PUSH_DOM: number
            XML_PARSE_PUSH_SAX: number
            XML_PARSE_READER: number
            XML_PARSE_RECOVER: number
            XML_PARSE_SAX: number
            XML_PARSE_SAX1: number
            XML_PARSE_UNKNOWN: number
            XML_PARSE_XINCLUDE: number
            XML_PATTERN_DEFAULT: number
            XML_PATTERN_XPATH: number
            XML_PATTERN_XSFIELD: number
            XML_PATTERN_XSSEL: number
            XML_PI_NODE: number
            XML_READER_TYPE_ATTRIBUTE: number
            XML_READER_TYPE_CDATA: number
            XML_READER_TYPE_COMMENT: number
            XML_READER_TYPE_DOCUMENT: number
            XML_READER_TYPE_DOCUMENT_FRAGMENT: number
            XML_READER_TYPE_DOCUMENT_TYPE: number
            XML_READER_TYPE_ELEMENT: number
            XML_READER_TYPE_END_ELEMENT: number
            XML_READER_TYPE_END_ENTITY: number
            XML_READER_TYPE_ENTITY: number
            XML_READER_TYPE_ENTITY_REFERENCE: number
            XML_READER_TYPE_NONE: number
            XML_READER_TYPE_NOTATION: number
            XML_READER_TYPE_PROCESSING_INSTRUCTION: number
            XML_READER_TYPE_SIGNIFICANT_WHITESPACE: number
            XML_READER_TYPE_TEXT: number
            XML_READER_TYPE_WHITESPACE: number
            XML_READER_TYPE_XML_DECLARATION: number
            XML_REGEXP_COMPILE_ERROR: number
            XML_RELAXNGP_CRNG: number
            XML_RELAXNGP_FREE_DOC: number
            XML_RELAXNGP_NONE: number
            XML_RELAXNG_ERR_ATTREXTRANS: number
            XML_RELAXNG_ERR_ATTRNAME: number
            XML_RELAXNG_ERR_ATTRNONS: number
            XML_RELAXNG_ERR_ATTRVALID: number
            XML_RELAXNG_ERR_ATTRWRONGNS: number
            XML_RELAXNG_ERR_CONTENTVALID: number
            XML_RELAXNG_ERR_DATAELEM: number
            XML_RELAXNG_ERR_DATATYPE: number
            XML_RELAXNG_ERR_DUPID: number
            XML_RELAXNG_ERR_ELEMEXTRANS: number
            XML_RELAXNG_ERR_ELEMNAME: number
            XML_RELAXNG_ERR_ELEMNONS: number
            XML_RELAXNG_ERR_ELEMNOTEMPTY: number
            XML_RELAXNG_ERR_ELEMWRONG: number
            XML_RELAXNG_ERR_ELEMWRONGNS: number
            XML_RELAXNG_ERR_EXTRACONTENT: number
            XML_RELAXNG_ERR_EXTRADATA: number
            XML_RELAXNG_ERR_INTEREXTRA: number
            XML_RELAXNG_ERR_INTERNAL: number
            XML_RELAXNG_ERR_INTERNODATA: number
            XML_RELAXNG_ERR_INTERSEQ: number
            XML_RELAXNG_ERR_INVALIDATTR: number
            XML_RELAXNG_ERR_LACKDATA: number
            XML_RELAXNG_ERR_LIST: number
            XML_RELAXNG_ERR_LISTELEM: number
            XML_RELAXNG_ERR_LISTEMPTY: number
            XML_RELAXNG_ERR_LISTEXTRA: number
            XML_RELAXNG_ERR_MEMORY: number
            XML_RELAXNG_ERR_NODEFINE: number
            XML_RELAXNG_ERR_NOELEM: number
            XML_RELAXNG_ERR_NOGRAMMAR: number
            XML_RELAXNG_ERR_NOSTATE: number
            XML_RELAXNG_ERR_NOTELEM: number
            XML_RELAXNG_ERR_TEXTWRONG: number
            XML_RELAXNG_ERR_TYPE: number
            XML_RELAXNG_ERR_TYPECMP: number
            XML_RELAXNG_ERR_TYPEVAL: number
            XML_RELAXNG_ERR_VALELEM: number
            XML_RELAXNG_ERR_VALUE: number
            XML_RELAXNG_OK: number
            XML_RNGP_ANYNAME_ATTR_ANCESTOR: number
            XML_RNGP_ATTRIBUTE_CHILDREN: number
            XML_RNGP_ATTRIBUTE_CONTENT: number
            XML_RNGP_ATTRIBUTE_EMPTY: number
            XML_RNGP_ATTRIBUTE_NOOP: number
            XML_RNGP_ATTR_CONFLICT: number
            XML_RNGP_CHOICE_CONTENT: number
            XML_RNGP_CHOICE_EMPTY: number
            XML_RNGP_CREATE_FAILURE: number
            XML_RNGP_DATA_CONTENT: number
            XML_RNGP_DEFINE_CREATE_FAILED: number
            XML_RNGP_DEFINE_EMPTY: number
            XML_RNGP_DEFINE_MISSING: number
            XML_RNGP_DEFINE_NAME_MISSING: number
            XML_RNGP_DEF_CHOICE_AND_INTERLEAVE: number
            XML_RNGP_ELEMENT_CONTENT: number
            XML_RNGP_ELEMENT_EMPTY: number
            XML_RNGP_ELEMENT_NAME: number
            XML_RNGP_ELEMENT_NO_CONTENT: number
            XML_RNGP_ELEM_CONTENT_EMPTY: number
            XML_RNGP_ELEM_CONTENT_ERROR: number
            XML_RNGP_ELEM_TEXT_CONFLICT: number
            XML_RNGP_EMPTY: number
            XML_RNGP_EMPTY_CONSTRUCT: number
            XML_RNGP_EMPTY_CONTENT: number
            XML_RNGP_EMPTY_NOT_EMPTY: number
            XML_RNGP_ERROR_TYPE_LIB: number
            XML_RNGP_EXCEPT_EMPTY: number
            XML_RNGP_EXCEPT_MISSING: number
            XML_RNGP_EXCEPT_MULTIPLE: number
            XML_RNGP_EXCEPT_NO_CONTENT: number
            XML_RNGP_EXTERNALREF_EMTPY: number
            XML_RNGP_EXTERNALREF_RECURSE: number
            XML_RNGP_EXTERNAL_REF_FAILURE: number
            XML_RNGP_FORBIDDEN_ATTRIBUTE: number
            XML_RNGP_FOREIGN_ELEMENT: number
            XML_RNGP_GRAMMAR_CONTENT: number
            XML_RNGP_GRAMMAR_EMPTY: number
            XML_RNGP_GRAMMAR_MISSING: number
            XML_RNGP_GRAMMAR_NO_START: number
            XML_RNGP_GROUP_ATTR_CONFLICT: number
            XML_RNGP_HREF_ERROR: number
            XML_RNGP_INCLUDE_EMPTY: number
            XML_RNGP_INCLUDE_FAILURE: number
            XML_RNGP_INCLUDE_RECURSE: number
            XML_RNGP_INTERLEAVE_ADD: number
            XML_RNGP_INTERLEAVE_CREATE_FAILED: number
            XML_RNGP_INTERLEAVE_EMPTY: number
            XML_RNGP_INTERLEAVE_NO_CONTENT: number
            XML_RNGP_INVALID_DEFINE_NAME: number
            XML_RNGP_INVALID_URI: number
            XML_RNGP_INVALID_VALUE: number
            XML_RNGP_MISSING_HREF: number
            XML_RNGP_NAME_MISSING: number
            XML_RNGP_NEED_COMBINE: number
            XML_RNGP_NOTALLOWED_NOT_EMPTY: number
            XML_RNGP_NSNAME_ATTR_ANCESTOR: number
            XML_RNGP_NSNAME_NO_NS: number
            XML_RNGP_PARAM_FORBIDDEN: number
            XML_RNGP_PARAM_NAME_MISSING: number
            XML_RNGP_PARENTREF_CREATE_FAILED: number
            XML_RNGP_PARENTREF_NAME_INVALID: number
            XML_RNGP_PARENTREF_NOT_EMPTY: number
            XML_RNGP_PARENTREF_NO_NAME: number
            XML_RNGP_PARENTREF_NO_PARENT: number
            XML_RNGP_PARSE_ERROR: number
            XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME: number
            XML_RNGP_PAT_ATTR_ATTR: number
            XML_RNGP_PAT_ATTR_ELEM: number
            XML_RNGP_PAT_DATA_EXCEPT_ATTR: number
            XML_RNGP_PAT_DATA_EXCEPT_ELEM: number
            XML_RNGP_PAT_DATA_EXCEPT_EMPTY: number
            XML_RNGP_PAT_DATA_EXCEPT_GROUP: number
            XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE: number
            XML_RNGP_PAT_DATA_EXCEPT_LIST: number
            XML_RNGP_PAT_DATA_EXCEPT_ONEMORE: number
            XML_RNGP_PAT_DATA_EXCEPT_REF: number
            XML_RNGP_PAT_DATA_EXCEPT_TEXT: number
            XML_RNGP_PAT_LIST_ATTR: number
            XML_RNGP_PAT_LIST_ELEM: number
            XML_RNGP_PAT_LIST_INTERLEAVE: number
            XML_RNGP_PAT_LIST_LIST: number
            XML_RNGP_PAT_LIST_REF: number
            XML_RNGP_PAT_LIST_TEXT: number
            XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME: number
            XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME: number
            XML_RNGP_PAT_ONEMORE_GROUP_ATTR: number
            XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR: number
            XML_RNGP_PAT_START_ATTR: number
            XML_RNGP_PAT_START_DATA: number
            XML_RNGP_PAT_START_EMPTY: number
            XML_RNGP_PAT_START_GROUP: number
            XML_RNGP_PAT_START_INTERLEAVE: number
            XML_RNGP_PAT_START_LIST: number
            XML_RNGP_PAT_START_ONEMORE: number
            XML_RNGP_PAT_START_TEXT: number
            XML_RNGP_PAT_START_VALUE: number
            XML_RNGP_PREFIX_UNDEFINED: number
            XML_RNGP_REF_CREATE_FAILED: number
            XML_RNGP_REF_CYCLE: number
            XML_RNGP_REF_NAME_INVALID: number
            XML_RNGP_REF_NOT_EMPTY: number
            XML_RNGP_REF_NO_DEF: number
            XML_RNGP_REF_NO_NAME: number
            XML_RNGP_START_CHOICE_AND_INTERLEAVE: number
            XML_RNGP_START_CONTENT: number
            XML_RNGP_START_EMPTY: number
            XML_RNGP_START_MISSING: number
            XML_RNGP_TEXT_EXPECTED: number
            XML_RNGP_TEXT_HAS_CHILD: number
            XML_RNGP_TYPE_MISSING: number
            XML_RNGP_TYPE_NOT_FOUND: number
            XML_RNGP_TYPE_VALUE: number
            XML_RNGP_UNKNOWN_ATTRIBUTE: number
            XML_RNGP_UNKNOWN_COMBINE: number
            XML_RNGP_UNKNOWN_CONSTRUCT: number
            XML_RNGP_UNKNOWN_TYPE_LIB: number
            XML_RNGP_URI_FRAGMENT: number
            XML_RNGP_URI_NOT_ABSOLUTE: number
            XML_RNGP_VALUE_EMPTY: number
            XML_RNGP_VALUE_NO_CONTENT: number
            XML_RNGP_XMLNS_NAME: number
            XML_RNGP_XML_NS: number
            XML_SAVE_AS_HTML: number
            XML_SAVE_AS_XML: number
            XML_SAVE_CHAR_INVALID: number
            XML_SAVE_FORMAT: number
            XML_SAVE_NOT_UTF8: number
            XML_SAVE_NO_DECL: number
            XML_SAVE_NO_DOCTYPE: number
            XML_SAVE_NO_EMPTY: number
            XML_SAVE_NO_XHTML: number
            XML_SAVE_UNKNOWN_ENCODING: number
            XML_SAVE_WSNONSIG: number
            XML_SAVE_XHTML: number
            XML_SAX2_MAGIC: number
            XML_SCHEMAP_AG_PROPS_CORRECT: number
            XML_SCHEMAP_ATTRFORMDEFAULT_VALUE: number
            XML_SCHEMAP_ATTRGRP_NONAME_NOREF: number
            XML_SCHEMAP_ATTR_NONAME_NOREF: number
            XML_SCHEMAP_AU_PROPS_CORRECT: number
            XML_SCHEMAP_AU_PROPS_CORRECT_2: number
            XML_SCHEMAP_A_PROPS_CORRECT_2: number
            XML_SCHEMAP_A_PROPS_CORRECT_3: number
            XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF: number
            XML_SCHEMAP_COS_ALL_LIMITED: number
            XML_SCHEMAP_COS_CT_EXTENDS_1_1: number
            XML_SCHEMAP_COS_CT_EXTENDS_1_2: number
            XML_SCHEMAP_COS_CT_EXTENDS_1_3: number
            XML_SCHEMAP_COS_ST_DERIVED_OK_2_1: number
            XML_SCHEMAP_COS_ST_DERIVED_OK_2_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_1_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_1_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4: number
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4: number
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5: number
            XML_SCHEMAP_COS_VALID_DEFAULT_1: number
            XML_SCHEMAP_COS_VALID_DEFAULT_2_1: number
            XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1: number
            XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2: number
            XML_SCHEMAP_CT_PROPS_CORRECT_1: number
            XML_SCHEMAP_CT_PROPS_CORRECT_2: number
            XML_SCHEMAP_CT_PROPS_CORRECT_3: number
            XML_SCHEMAP_CT_PROPS_CORRECT_4: number
            XML_SCHEMAP_CT_PROPS_CORRECT_5: number
            XML_SCHEMAP_CVC_SIMPLE_TYPE: number
            XML_SCHEMAP_C_PROPS_CORRECT: number
            XML_SCHEMAP_DEF_AND_PREFIX: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2: number
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3: number
            XML_SCHEMAP_ELEMFORMDEFAULT_VALUE: number
            XML_SCHEMAP_ELEM_DEFAULT_FIXED: number
            XML_SCHEMAP_ELEM_NONAME_NOREF: number
            XML_SCHEMAP_EXTENSION_NO_BASE: number
            XML_SCHEMAP_E_PROPS_CORRECT_2: number
            XML_SCHEMAP_E_PROPS_CORRECT_3: number
            XML_SCHEMAP_E_PROPS_CORRECT_4: number
            XML_SCHEMAP_E_PROPS_CORRECT_5: number
            XML_SCHEMAP_E_PROPS_CORRECT_6: number
            XML_SCHEMAP_FACET_NO_VALUE: number
            XML_SCHEMAP_FAILED_BUILD_IMPORT: number
            XML_SCHEMAP_FAILED_LOAD: number
            XML_SCHEMAP_FAILED_PARSE: number
            XML_SCHEMAP_GROUP_NONAME_NOREF: number
            XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI: number
            XML_SCHEMAP_IMPORT_REDEFINE_NSNAME: number
            XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI: number
            XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI: number
            XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI: number
            XML_SCHEMAP_INTERNAL: number
            XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE: number
            XML_SCHEMAP_INVALID_ATTR_COMBINATION: number
            XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION: number
            XML_SCHEMAP_INVALID_ATTR_NAME: number
            XML_SCHEMAP_INVALID_ATTR_USE: number
            XML_SCHEMAP_INVALID_BOOLEAN: number
            XML_SCHEMAP_INVALID_ENUM: number
            XML_SCHEMAP_INVALID_FACET: number
            XML_SCHEMAP_INVALID_FACET_VALUE: number
            XML_SCHEMAP_INVALID_MAXOCCURS: number
            XML_SCHEMAP_INVALID_MINOCCURS: number
            XML_SCHEMAP_INVALID_REF_AND_SUBTYPE: number
            XML_SCHEMAP_INVALID_WHITE_SPACE: number
            XML_SCHEMAP_MG_PROPS_CORRECT_1: number
            XML_SCHEMAP_MG_PROPS_CORRECT_2: number
            XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD: number
            XML_SCHEMAP_NOATTR_NOREF: number
            XML_SCHEMAP_NOROOT: number
            XML_SCHEMAP_NOTATION_NO_NAME: number
            XML_SCHEMAP_NOTHING_TO_PARSE: number
            XML_SCHEMAP_NOTYPE_NOREF: number
            XML_SCHEMAP_NOT_DETERMINISTIC: number
            XML_SCHEMAP_NOT_SCHEMA: number
            XML_SCHEMAP_NO_XMLNS: number
            XML_SCHEMAP_NO_XSI: number
            XML_SCHEMAP_PREFIX_UNDEFINED: number
            XML_SCHEMAP_P_PROPS_CORRECT_1: number
            XML_SCHEMAP_P_PROPS_CORRECT_2_1: number
            XML_SCHEMAP_P_PROPS_CORRECT_2_2: number
            XML_SCHEMAP_RECURSIVE: number
            XML_SCHEMAP_REDEFINED_ATTR: number
            XML_SCHEMAP_REDEFINED_ATTRGROUP: number
            XML_SCHEMAP_REDEFINED_ELEMENT: number
            XML_SCHEMAP_REDEFINED_GROUP: number
            XML_SCHEMAP_REDEFINED_NOTATION: number
            XML_SCHEMAP_REDEFINED_TYPE: number
            XML_SCHEMAP_REF_AND_CONTENT: number
            XML_SCHEMAP_REF_AND_SUBTYPE: number
            XML_SCHEMAP_REGEXP_INVALID: number
            XML_SCHEMAP_RESTRICTION_NONAME_NOREF: number
            XML_SCHEMAP_S4S_ATTR_INVALID_VALUE: number
            XML_SCHEMAP_S4S_ATTR_MISSING: number
            XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED: number
            XML_SCHEMAP_S4S_ELEM_MISSING: number
            XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED: number
            XML_SCHEMAP_SIMPLETYPE_NONAME: number
            XML_SCHEMAP_SRC_ATTRIBUTE_1: number
            XML_SCHEMAP_SRC_ATTRIBUTE_2: number
            XML_SCHEMAP_SRC_ATTRIBUTE_3_1: number
            XML_SCHEMAP_SRC_ATTRIBUTE_3_2: number
            XML_SCHEMAP_SRC_ATTRIBUTE_4: number
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1: number
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2: number
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3: number
            XML_SCHEMAP_SRC_CT_1: number
            XML_SCHEMAP_SRC_ELEMENT_1: number
            XML_SCHEMAP_SRC_ELEMENT_2_1: number
            XML_SCHEMAP_SRC_ELEMENT_2_2: number
            XML_SCHEMAP_SRC_ELEMENT_3: number
            XML_SCHEMAP_SRC_IMPORT: number
            XML_SCHEMAP_SRC_IMPORT_1_1: number
            XML_SCHEMAP_SRC_IMPORT_1_2: number
            XML_SCHEMAP_SRC_IMPORT_2: number
            XML_SCHEMAP_SRC_IMPORT_2_1: number
            XML_SCHEMAP_SRC_IMPORT_2_2: number
            XML_SCHEMAP_SRC_IMPORT_3_1: number
            XML_SCHEMAP_SRC_IMPORT_3_2: number
            XML_SCHEMAP_SRC_INCLUDE: number
            XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE: number
            XML_SCHEMAP_SRC_REDEFINE: number
            XML_SCHEMAP_SRC_RESOLVE: number
            XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE: number
            XML_SCHEMAP_SRC_SIMPLE_TYPE_1: number
            XML_SCHEMAP_SRC_SIMPLE_TYPE_2: number
            XML_SCHEMAP_SRC_SIMPLE_TYPE_3: number
            XML_SCHEMAP_SRC_SIMPLE_TYPE_4: number
            XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES: number
            XML_SCHEMAP_ST_PROPS_CORRECT_1: number
            XML_SCHEMAP_ST_PROPS_CORRECT_2: number
            XML_SCHEMAP_ST_PROPS_CORRECT_3: number
            XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE: number
            XML_SCHEMAP_TYPE_AND_SUBTYPE: number
            XML_SCHEMAP_UNION_NOT_EXPRESSIBLE: number
            XML_SCHEMAP_UNKNOWN_ALL_CHILD: number
            XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD: number
            XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD: number
            XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP: number
            XML_SCHEMAP_UNKNOWN_ATTR_CHILD: number
            XML_SCHEMAP_UNKNOWN_BASE_TYPE: number
            XML_SCHEMAP_UNKNOWN_CHOICE_CHILD: number
            XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD: number
            XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD: number
            XML_SCHEMAP_UNKNOWN_ELEM_CHILD: number
            XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD: number
            XML_SCHEMAP_UNKNOWN_FACET_CHILD: number
            XML_SCHEMAP_UNKNOWN_FACET_TYPE: number
            XML_SCHEMAP_UNKNOWN_GROUP_CHILD: number
            XML_SCHEMAP_UNKNOWN_IMPORT_CHILD: number
            XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD: number
            XML_SCHEMAP_UNKNOWN_LIST_CHILD: number
            XML_SCHEMAP_UNKNOWN_MEMBER_TYPE: number
            XML_SCHEMAP_UNKNOWN_NOTATION_CHILD: number
            XML_SCHEMAP_UNKNOWN_PREFIX: number
            XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD: number
            XML_SCHEMAP_UNKNOWN_REF: number
            XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD: number
            XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD: number
            XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD: number
            XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD: number
            XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD: number
            XML_SCHEMAP_UNKNOWN_TYPE: number
            XML_SCHEMAP_UNKNOWN_UNION_CHILD: number
            XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH: number
            XML_SCHEMAP_WARN_ATTR_REDECL_PROH: number
            XML_SCHEMAP_WARN_SKIP_SCHEMA: number
            XML_SCHEMAP_WARN_UNLOCATED_SCHEMA: number
            XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER: number
            XML_SCHEMAS_ANYATTR_LAX: number
            XML_SCHEMAS_ANYATTR_SKIP: number
            XML_SCHEMAS_ANYATTR_STRICT: number
            XML_SCHEMAS_ANYSIMPLETYPE: number
            XML_SCHEMAS_ANYTYPE: number
            XML_SCHEMAS_ANYURI: number
            XML_SCHEMAS_ANY_LAX: number
            XML_SCHEMAS_ANY_SKIP: number
            XML_SCHEMAS_ANY_STRICT: number
            XML_SCHEMAS_ATTRGROUP_GLOBAL: number
            XML_SCHEMAS_ATTRGROUP_HAS_REFS: number
            XML_SCHEMAS_ATTRGROUP_MARKED: number
            XML_SCHEMAS_ATTRGROUP_REDEFINED: number
            XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED: number
            XML_SCHEMAS_ATTR_FIXED: number
            XML_SCHEMAS_ATTR_GLOBAL: number
            XML_SCHEMAS_ATTR_INTERNAL_RESOLVED: number
            XML_SCHEMAS_ATTR_NSDEFAULT: number
            XML_SCHEMAS_ATTR_USE_OPTIONAL: number
            XML_SCHEMAS_ATTR_USE_PROHIBITED: number
            XML_SCHEMAS_ATTR_USE_REQUIRED: number
            XML_SCHEMAS_BASE64BINARY: number
            XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION: number
            XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION: number
            XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION: number
            XML_SCHEMAS_BOOLEAN: number
            XML_SCHEMAS_BYTE: number
            XML_SCHEMAS_DATE: number
            XML_SCHEMAS_DATETIME: number
            XML_SCHEMAS_DECIMAL: number
            XML_SCHEMAS_DOUBLE: number
            XML_SCHEMAS_DURATION: number
            XML_SCHEMAS_ELEM_ABSTRACT: number
            XML_SCHEMAS_ELEM_BLOCK_ABSENT: number
            XML_SCHEMAS_ELEM_BLOCK_EXTENSION: number
            XML_SCHEMAS_ELEM_BLOCK_RESTRICTION: number
            XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION: number
            XML_SCHEMAS_ELEM_CIRCULAR: number
            XML_SCHEMAS_ELEM_DEFAULT: number
            XML_SCHEMAS_ELEM_FINAL_ABSENT: number
            XML_SCHEMAS_ELEM_FINAL_EXTENSION: number
            XML_SCHEMAS_ELEM_FINAL_RESTRICTION: number
            XML_SCHEMAS_ELEM_FIXED: number
            XML_SCHEMAS_ELEM_GLOBAL: number
            XML_SCHEMAS_ELEM_INTERNAL_CHECKED: number
            XML_SCHEMAS_ELEM_INTERNAL_RESOLVED: number
            XML_SCHEMAS_ELEM_NILLABLE: number
            XML_SCHEMAS_ELEM_NSDEFAULT: number
            XML_SCHEMAS_ELEM_REF: number
            XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD: number
            XML_SCHEMAS_ELEM_TOPLEVEL: number
            XML_SCHEMAS_ENTITIES: number
            XML_SCHEMAS_ENTITY: number
            XML_SCHEMAS_ERR_: number
            XML_SCHEMAS_ERR_ATTRINVALID: number
            XML_SCHEMAS_ERR_ATTRUNKNOWN: number
            XML_SCHEMAS_ERR_CONSTRUCT: number
            XML_SCHEMAS_ERR_ELEMCONT: number
            XML_SCHEMAS_ERR_EXTRACONTENT: number
            XML_SCHEMAS_ERR_FACET: number
            XML_SCHEMAS_ERR_HAVEDEFAULT: number
            XML_SCHEMAS_ERR_INTERNAL: number
            XML_SCHEMAS_ERR_INVALIDATTR: number
            XML_SCHEMAS_ERR_INVALIDELEM: number
            XML_SCHEMAS_ERR_ISABSTRACT: number
            XML_SCHEMAS_ERR_MISSING: number
            XML_SCHEMAS_ERR_NOROLLBACK: number
            XML_SCHEMAS_ERR_NOROOT: number
            XML_SCHEMAS_ERR_NOTDETERMINIST: number
            XML_SCHEMAS_ERR_NOTEMPTY: number
            XML_SCHEMAS_ERR_NOTNILLABLE: number
            XML_SCHEMAS_ERR_NOTSIMPLE: number
            XML_SCHEMAS_ERR_NOTTOPLEVEL: number
            XML_SCHEMAS_ERR_NOTYPE: number
            XML_SCHEMAS_ERR_OK: number
            XML_SCHEMAS_ERR_UNDECLAREDELEM: number
            XML_SCHEMAS_ERR_VALUE: number
            XML_SCHEMAS_ERR_WRONGELEM: number
            XML_SCHEMAS_ERR_XXX: number
            XML_SCHEMAS_FACET_COLLAPSE: number
            XML_SCHEMAS_FACET_PRESERVE: number
            XML_SCHEMAS_FACET_REPLACE: number
            XML_SCHEMAS_FACET_UNKNOWN: number
            XML_SCHEMAS_FINAL_DEFAULT_EXTENSION: number
            XML_SCHEMAS_FINAL_DEFAULT_LIST: number
            XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION: number
            XML_SCHEMAS_FINAL_DEFAULT_UNION: number
            XML_SCHEMAS_FLOAT: number
            XML_SCHEMAS_GDAY: number
            XML_SCHEMAS_GMONTH: number
            XML_SCHEMAS_GMONTHDAY: number
            XML_SCHEMAS_GYEAR: number
            XML_SCHEMAS_GYEARMONTH: number
            XML_SCHEMAS_HEXBINARY: number
            XML_SCHEMAS_ID: number
            XML_SCHEMAS_IDREF: number
            XML_SCHEMAS_IDREFS: number
            XML_SCHEMAS_INCLUDING_CONVERT_NS: number
            XML_SCHEMAS_INT: number
            XML_SCHEMAS_INTEGER: number
            XML_SCHEMAS_LANGUAGE: number
            XML_SCHEMAS_LONG: number
            XML_SCHEMAS_NAME: number
            XML_SCHEMAS_NCNAME: number
            XML_SCHEMAS_NINTEGER: number
            XML_SCHEMAS_NMTOKEN: number
            XML_SCHEMAS_NMTOKENS: number
            XML_SCHEMAS_NNINTEGER: number
            XML_SCHEMAS_NORMSTRING: number
            XML_SCHEMAS_NOTATION: number
            XML_SCHEMAS_NPINTEGER: number
            XML_SCHEMAS_PINTEGER: number
            XML_SCHEMAS_QNAME: number
            XML_SCHEMAS_QUALIF_ATTR: number
            XML_SCHEMAS_QUALIF_ELEM: number
            XML_SCHEMAS_SHORT: number
            XML_SCHEMAS_STRING: number
            XML_SCHEMAS_TIME: number
            XML_SCHEMAS_TOKEN: number
            XML_SCHEMAS_TYPE_ABSTRACT: number
            XML_SCHEMAS_TYPE_BLOCK_DEFAULT: number
            XML_SCHEMAS_TYPE_BLOCK_EXTENSION: number
            XML_SCHEMAS_TYPE_BLOCK_RESTRICTION: number
            XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE: number
            XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION: number
            XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION: number
            XML_SCHEMAS_TYPE_FACETSNEEDVALUE: number
            XML_SCHEMAS_TYPE_FINAL_DEFAULT: number
            XML_SCHEMAS_TYPE_FINAL_EXTENSION: number
            XML_SCHEMAS_TYPE_FINAL_LIST: number
            XML_SCHEMAS_TYPE_FINAL_RESTRICTION: number
            XML_SCHEMAS_TYPE_FINAL_UNION: number
            XML_SCHEMAS_TYPE_FIXUP_1: number
            XML_SCHEMAS_TYPE_GLOBAL: number
            XML_SCHEMAS_TYPE_HAS_FACETS: number
            XML_SCHEMAS_TYPE_INTERNAL_INVALID: number
            XML_SCHEMAS_TYPE_INTERNAL_RESOLVED: number
            XML_SCHEMAS_TYPE_MARKED: number
            XML_SCHEMAS_TYPE_MIXED: number
            XML_SCHEMAS_TYPE_NORMVALUENEEDED: number
            XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD: number
            XML_SCHEMAS_TYPE_REDEFINED: number
            XML_SCHEMAS_TYPE_VARIETY_ABSENT: number
            XML_SCHEMAS_TYPE_VARIETY_ATOMIC: number
            XML_SCHEMAS_TYPE_VARIETY_LIST: number
            XML_SCHEMAS_TYPE_VARIETY_UNION: number
            XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE: number
            XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE: number
            XML_SCHEMAS_TYPE_WHITESPACE_REPLACE: number
            XML_SCHEMAS_UBYTE: number
            XML_SCHEMAS_UINT: number
            XML_SCHEMAS_ULONG: number
            XML_SCHEMAS_UNKNOWN: number
            XML_SCHEMAS_USHORT: number
            XML_SCHEMAS_WILDCARD_COMPLETE: number
            XML_SCHEMATRONV_ASSERT: number
            XML_SCHEMATRONV_REPORT: number
            XML_SCHEMAV_ATTRINVALID: number
            XML_SCHEMAV_ATTRUNKNOWN: number
            XML_SCHEMAV_CONSTRUCT: number
            XML_SCHEMAV_CVC_ATTRIBUTE_1: number
            XML_SCHEMAV_CVC_ATTRIBUTE_2: number
            XML_SCHEMAV_CVC_ATTRIBUTE_3: number
            XML_SCHEMAV_CVC_ATTRIBUTE_4: number
            XML_SCHEMAV_CVC_AU: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_1: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_4: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1: number
            XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2: number
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1: number
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2: number
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3: number
            XML_SCHEMAV_CVC_ELT_1: number
            XML_SCHEMAV_CVC_ELT_2: number
            XML_SCHEMAV_CVC_ELT_3_1: number
            XML_SCHEMAV_CVC_ELT_3_2_1: number
            XML_SCHEMAV_CVC_ELT_3_2_2: number
            XML_SCHEMAV_CVC_ELT_4_1: number
            XML_SCHEMAV_CVC_ELT_4_2: number
            XML_SCHEMAV_CVC_ELT_4_3: number
            XML_SCHEMAV_CVC_ELT_5_1_1: number
            XML_SCHEMAV_CVC_ELT_5_1_2: number
            XML_SCHEMAV_CVC_ELT_5_2_1: number
            XML_SCHEMAV_CVC_ELT_5_2_2_1: number
            XML_SCHEMAV_CVC_ELT_5_2_2_2_1: number
            XML_SCHEMAV_CVC_ELT_5_2_2_2_2: number
            XML_SCHEMAV_CVC_ELT_6: number
            XML_SCHEMAV_CVC_ELT_7: number
            XML_SCHEMAV_CVC_ENUMERATION_VALID: number
            XML_SCHEMAV_CVC_FACET_VALID: number
            XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID: number
            XML_SCHEMAV_CVC_IDC: number
            XML_SCHEMAV_CVC_LENGTH_VALID: number
            XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID: number
            XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID: number
            XML_SCHEMAV_CVC_MAXLENGTH_VALID: number
            XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID: number
            XML_SCHEMAV_CVC_MININCLUSIVE_VALID: number
            XML_SCHEMAV_CVC_MINLENGTH_VALID: number
            XML_SCHEMAV_CVC_PATTERN_VALID: number
            XML_SCHEMAV_CVC_TOTALDIGITS_VALID: number
            XML_SCHEMAV_CVC_TYPE_1: number
            XML_SCHEMAV_CVC_TYPE_2: number
            XML_SCHEMAV_CVC_TYPE_3_1_1: number
            XML_SCHEMAV_CVC_TYPE_3_1_2: number
            XML_SCHEMAV_CVC_WILDCARD: number
            XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING: number
            XML_SCHEMAV_ELEMCONT: number
            XML_SCHEMAV_ELEMENT_CONTENT: number
            XML_SCHEMAV_EXTRACONTENT: number
            XML_SCHEMAV_FACET: number
            XML_SCHEMAV_HAVEDEFAULT: number
            XML_SCHEMAV_INTERNAL: number
            XML_SCHEMAV_INVALIDATTR: number
            XML_SCHEMAV_INVALIDELEM: number
            XML_SCHEMAV_ISABSTRACT: number
            XML_SCHEMAV_MISC: number
            XML_SCHEMAV_MISSING: number
            XML_SCHEMAV_NOROLLBACK: number
            XML_SCHEMAV_NOROOT: number
            XML_SCHEMAV_NOTDETERMINIST: number
            XML_SCHEMAV_NOTEMPTY: number
            XML_SCHEMAV_NOTNILLABLE: number
            XML_SCHEMAV_NOTSIMPLE: number
            XML_SCHEMAV_NOTTOPLEVEL: number
            XML_SCHEMAV_NOTYPE: number
            XML_SCHEMAV_UNDECLAREDELEM: number
            XML_SCHEMAV_VALUE: number
            XML_SCHEMAV_WRONGELEM: number
            XML_SCHEMA_CONTENT_ANY: number
            XML_SCHEMA_CONTENT_BASIC: number
            XML_SCHEMA_CONTENT_ELEMENTS: number
            XML_SCHEMA_CONTENT_EMPTY: number
            XML_SCHEMA_CONTENT_MIXED: number
            XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS: number
            XML_SCHEMA_CONTENT_SIMPLE: number
            XML_SCHEMA_CONTENT_UNKNOWN: number
            XML_SCHEMA_EXTRA_ATTR_USE_PROHIB: number
            XML_SCHEMA_EXTRA_QNAMEREF: number
            XML_SCHEMA_FACET_ENUMERATION: number
            XML_SCHEMA_FACET_FRACTIONDIGITS: number
            XML_SCHEMA_FACET_LENGTH: number
            XML_SCHEMA_FACET_MAXEXCLUSIVE: number
            XML_SCHEMA_FACET_MAXINCLUSIVE: number
            XML_SCHEMA_FACET_MAXLENGTH: number
            XML_SCHEMA_FACET_MINEXCLUSIVE: number
            XML_SCHEMA_FACET_MININCLUSIVE: number
            XML_SCHEMA_FACET_MINLENGTH: number
            XML_SCHEMA_FACET_PATTERN: number
            XML_SCHEMA_FACET_TOTALDIGITS: number
            XML_SCHEMA_FACET_WHITESPACE: number
            XML_SCHEMA_TYPE_ALL: number
            XML_SCHEMA_TYPE_ANY: number
            XML_SCHEMA_TYPE_ANY_ATTRIBUTE: number
            XML_SCHEMA_TYPE_ATTRIBUTE: number
            XML_SCHEMA_TYPE_ATTRIBUTEGROUP: number
            XML_SCHEMA_TYPE_ATTRIBUTE_USE: number
            XML_SCHEMA_TYPE_BASIC: number
            XML_SCHEMA_TYPE_CHOICE: number
            XML_SCHEMA_TYPE_COMPLEX: number
            XML_SCHEMA_TYPE_COMPLEX_CONTENT: number
            XML_SCHEMA_TYPE_ELEMENT: number
            XML_SCHEMA_TYPE_EXTENSION: number
            XML_SCHEMA_TYPE_FACET: number
            XML_SCHEMA_TYPE_GROUP: number
            XML_SCHEMA_TYPE_IDC_KEY: number
            XML_SCHEMA_TYPE_IDC_KEYREF: number
            XML_SCHEMA_TYPE_IDC_UNIQUE: number
            XML_SCHEMA_TYPE_LIST: number
            XML_SCHEMA_TYPE_NOTATION: number
            XML_SCHEMA_TYPE_PARTICLE: number
            XML_SCHEMA_TYPE_RESTRICTION: number
            XML_SCHEMA_TYPE_SEQUENCE: number
            XML_SCHEMA_TYPE_SIMPLE: number
            XML_SCHEMA_TYPE_SIMPLE_CONTENT: number
            XML_SCHEMA_TYPE_UNION: number
            XML_SCHEMA_TYPE_UR: number
            XML_SCHEMA_VAL_VC_I_CREATE: number
            XML_SCHEMA_WHITESPACE_COLLAPSE: number
            XML_SCHEMA_WHITESPACE_PRESERVE: number
            XML_SCHEMA_WHITESPACE_REPLACE: number
            XML_SCHEMA_WHITESPACE_UNKNOWN: number
            XML_SKIP_IDS: number
            XML_SUBSTITUTE_BOTH: number
            XML_SUBSTITUTE_NONE: number
            XML_SUBSTITUTE_PEREF: number
            XML_SUBSTITUTE_REF: number
            XML_TEXTREADER_MODE_CLOSED: number
            XML_TEXTREADER_MODE_EOF: number
            XML_TEXTREADER_MODE_ERROR: number
            XML_TEXTREADER_MODE_INITIAL: number
            XML_TEXTREADER_MODE_INTERACTIVE: number
            XML_TEXTREADER_MODE_READING: number
            XML_TEXT_NODE: number
            XML_TREE_INVALID_DEC: number
            XML_TREE_INVALID_HEX: number
            XML_TREE_NOT_UTF8: number
            XML_TREE_UNTERMINATED_ENTITY: number
            XML_WAR_CATALOG_PI: number
            XML_WAR_ENTITY_REDEFINED: number
            XML_WAR_LANG_VALUE: number
            XML_WAR_NS_COLUMN: number
            XML_WAR_NS_URI: number
            XML_WAR_NS_URI_RELATIVE: number
            XML_WAR_SPACE_VALUE: number
            XML_WAR_UNDECLARED_ENTITY: number
            XML_WAR_UNKNOWN_VERSION: number
            XML_WITH_AUTOMATA: number
            XML_WITH_C14N: number
            XML_WITH_CATALOG: number
            XML_WITH_DEBUG: number
            XML_WITH_DEBUG_MEM: number
            XML_WITH_DEBUG_RUN: number
            XML_WITH_EXPR: number
            XML_WITH_FTP: number
            XML_WITH_HTML: number
            XML_WITH_HTTP: number
            XML_WITH_ICONV: number
            XML_WITH_ICU: number
            XML_WITH_ISO8859X: number
            XML_WITH_LEGACY: number
            XML_WITH_LZMA: number
            XML_WITH_MODULES: number
            XML_WITH_NONE: number
            XML_WITH_OUTPUT: number
            XML_WITH_PATTERN: number
            XML_WITH_PUSH: number
            XML_WITH_READER: number
            XML_WITH_REGEXP: number
            XML_WITH_SAX1: number
            XML_WITH_SCHEMAS: number
            XML_WITH_SCHEMATRON: number
            XML_WITH_THREAD: number
            XML_WITH_TREE: number
            XML_WITH_UNICODE: number
            XML_WITH_VALID: number
            XML_WITH_WRITER: number
            XML_WITH_XINCLUDE: number
            XML_WITH_XPATH: number
            XML_WITH_XPTR: number
            XML_WITH_ZLIB: number
            XML_XINCLUDE_BUILD_FAILED: number
            XML_XINCLUDE_DEPRECATED_NS: number
            XML_XINCLUDE_END: number
            XML_XINCLUDE_ENTITY_DEF_MISMATCH: number
            XML_XINCLUDE_FALLBACKS_IN_INCLUDE: number
            XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE: number
            XML_XINCLUDE_FRAGMENT_ID: number
            XML_XINCLUDE_HREF_URI: number
            XML_XINCLUDE_INCLUDE_IN_INCLUDE: number
            XML_XINCLUDE_INVALID_CHAR: number
            XML_XINCLUDE_MULTIPLE_ROOT: number
            XML_XINCLUDE_NO_FALLBACK: number
            XML_XINCLUDE_NO_HREF: number
            XML_XINCLUDE_PARSE_VALUE: number
            XML_XINCLUDE_RECURSION: number
            XML_XINCLUDE_START: number
            XML_XINCLUDE_TEXT_DOCUMENT: number
            XML_XINCLUDE_TEXT_FRAGMENT: number
            XML_XINCLUDE_UNKNOWN_ENCODING: number
            XML_XINCLUDE_XPTR_FAILED: number
            XML_XINCLUDE_XPTR_RESULT: number
            XML_XPATH_CHECKNS: number
            XML_XPATH_ENCODING_ERROR: number
            XML_XPATH_EXPRESSION_OK: number
            XML_XPATH_EXPR_ERROR: number
            XML_XPATH_INVALID_ARITY: number
            XML_XPATH_INVALID_CHAR_ERROR: number
            XML_XPATH_INVALID_CTXT_POSITION: number
            XML_XPATH_INVALID_CTXT_SIZE: number
            XML_XPATH_INVALID_OPERAND: number
            XML_XPATH_INVALID_PREDICATE_ERROR: number
            XML_XPATH_INVALID_TYPE: number
            XML_XPATH_MEMORY_ERROR: number
            XML_XPATH_NOVAR: number
            XML_XPATH_NUMBER_ERROR: number
            XML_XPATH_START_LITERAL_ERROR: number
            XML_XPATH_UNCLOSED_ERROR: number
            XML_XPATH_UNDEF_PREFIX_ERROR: number
            XML_XPATH_UNDEF_VARIABLE_ERROR: number
            XML_XPATH_UNFINISHED_LITERAL_ERROR: number
            XML_XPATH_UNKNOWN_FUNC_ERROR: number
            XML_XPATH_VARIABLE_REF_ERROR: number
            XML_XPTR_CHILDSEQ_START: number
            XML_XPTR_EVAL_FAILED: number
            XML_XPTR_EXTRA_OBJECTS: number
            XML_XPTR_RESOURCE_ERROR: number
            XML_XPTR_SUB_RESOURCE_ERROR: number
            XML_XPTR_SYNTAX_ERROR: number
            XML_XPTR_UNKNOWN_SCHEME: number
            XPATH_BOOLEAN: number
            XPATH_ENCODING_ERROR: number
            XPATH_EXPRESSION_OK: number
            XPATH_EXPR_ERROR: number
            XPATH_FORBID_VARIABLE_ERROR: number
            XPATH_INVALID_ARITY: number
            XPATH_INVALID_CHAR_ERROR: number
            XPATH_INVALID_CTXT: number
            XPATH_INVALID_CTXT_POSITION: number
            XPATH_INVALID_CTXT_SIZE: number
            XPATH_INVALID_OPERAND: number
            XPATH_INVALID_PREDICATE_ERROR: number
            XPATH_INVALID_TYPE: number
            XPATH_LOCATIONSET: number
            XPATH_MEMORY_ERROR: number
            XPATH_NODESET: number
            XPATH_NUMBER: number
            XPATH_NUMBER_ERROR: number
            XPATH_OP_LIMIT_EXCEEDED: number
            XPATH_POINT: number
            XPATH_RANGE: number
            XPATH_RECURSION_LIMIT_EXCEEDED: number
            XPATH_STACK_ERROR: number
            XPATH_START_LITERAL_ERROR: number
            XPATH_STRING: number
            XPATH_UNCLOSED_ERROR: number
            XPATH_UNDEFINED: number
            XPATH_UNDEF_PREFIX_ERROR: number
            XPATH_UNDEF_VARIABLE_ERROR: number
            XPATH_UNFINISHED_LITERAL_ERROR: number
            XPATH_UNKNOWN_FUNC_ERROR: number
            XPATH_USERS: number
            XPATH_VARIABLE_REF_ERROR: number
            XPATH_XSLT_TREE: number
            XPTR_RESOURCE_ERROR: number
            XPTR_SUB_RESOURCE_ERROR: number
            XPTR_SYNTAX_ERROR: number

    /* Variables */

    
            libxmljs_debug: number
            xmlFree: xmlFreeFunc
            xmlIsBaseCharGroup: xmlChRangeGroup
            xmlIsCharGroup: xmlChRangeGroup
            xmlIsCombiningGroup: xmlChRangeGroup
            xmlIsDigitGroup: xmlChRangeGroup
            xmlIsExtenderGroup: xmlChRangeGroup
            xmlIsIdeographicGroup: xmlChRangeGroup
            xmlIsPubidChar_tab: string
            xmlMalloc: xmlMallocFunc
            xmlMallocAtomic: xmlMallocFunc
            xmlMemStrdup: xmlStrdupFunc
            xmlParserMaxDepth: number
            xmlRealloc: xmlReallocFunc
            xmlStringComment: string
            xmlStringText: string
            xmlStringTextNoenc: string
            xmlXPathNAN: number
            xmlXPathNINF: number
            xmlXPathPINF: number

    /* Functions */

    
                UTF8ToHtml: {
                    /** 
                    * @param out {string | null} - p.unsigned char
                    * @param outlen {number} - p.int
                    * @param in {string | null} - p.q(const).unsigned char
                    * @param inlen {number} - p.int
                    * @returns {number - int}
                    */
                    (out: string | null, outlen: number, inArg: string | null, inlen: number): number
                }
            
                UTF8Toisolat1: {
                    /** 
                    * @param out {string | null} - p.unsigned char
                    * @param outlen {number} - p.int
                    * @param in {string | null} - p.q(const).unsigned char
                    * @param inlen {number} - p.int
                    * @returns {number - int}
                    */
                    (out: string | null, outlen: number, inArg: string | null, inlen: number): number
                }
            
                __docbDefaultSAXHandler: {
                    /** 
                    * @returns {xmlSAXHandlerV1 - xmlSAXHandlerV1}
                    */
                    (): xmlSAXHandlerV1
                }
            
                __htmlDefaultSAXHandler: {
                    /** 
                    * @returns {xmlSAXHandlerV1 - xmlSAXHandlerV1}
                    */
                    (): xmlSAXHandlerV1
                }
            
                __oldXMLWDcompatibility: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlBufferAllocScheme: {
                    /** 
                    * @returns {xmlBufferAllocationScheme - xmlBufferAllocationScheme}
                    */
                    (): xmlBufferAllocationScheme
                }
            
                __xmlDefaultBufferSize: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlDefaultSAXHandler: {
                    /** 
                    * @returns {xmlSAXHandlerV1 - xmlSAXHandlerV1}
                    */
                    (): xmlSAXHandlerV1
                }
            
                __xmlDefaultSAXLocator: {
                    /** 
                    * @returns {xmlSAXLocator - xmlSAXLocator}
                    */
                    (): xmlSAXLocator
                }
            
                __xmlDeregisterNodeDefaultValue: {
                    /** 
                    * @returns {xmlDeregisterNodeFunc - xmlDeregisterNodeFunc}
                    */
                    (): xmlDeregisterNodeFunc
                }
            
                __xmlDoValidityCheckingDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlGenericError: {
                    /** 
                    * @returns {xmlGenericErrorFunc - xmlGenericErrorFunc}
                    */
                    (): xmlGenericErrorFunc
                }
            
                __xmlGenericErrorContext: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                __xmlGetWarningsDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlIndentTreeOutput: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlKeepBlanksDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlLastError: {
                    /** 
                    * @returns {xmlError - xmlError}
                    */
                    (): xmlError
                }
            
                __xmlLineNumbersDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlLoadExtDtdDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlOutputBufferCreateFilename: {
                    /** 
                    * @param URI {string | null} - p.q(const).char
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @param compression {number} - int
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (URI: string | null, encoder: xmlCharEncodingHandlerPtr | null, compression: number): xmlOutputBufferPtr
                }
            
                __xmlOutputBufferCreateFilenameValue: {
                    /** 
                    * @returns {xmlOutputBufferCreateFilenameFunc - xmlOutputBufferCreateFilenameFunc}
                    */
                    (): xmlOutputBufferCreateFilenameFunc
                }
            
                __xmlParserDebugEntities: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlParserInputBufferCreateFilename: {
                    /** 
                    * @param URI {string | null} - p.q(const).char
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (URI: string | null, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                __xmlParserInputBufferCreateFilenameValue: {
                    /** 
                    * @returns {xmlParserInputBufferCreateFilenameFunc - xmlParserInputBufferCreateFilenameFunc}
                    */
                    (): xmlParserInputBufferCreateFilenameFunc
                }
            
                __xmlParserVersion: {
                    /** 
                    * @returns {string - q(const).char}
                    */
                    (): string
                }
            
                __xmlPedanticParserDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlRegisterNodeDefaultValue: {
                    /** 
                    * @returns {xmlRegisterNodeFunc - xmlRegisterNodeFunc}
                    */
                    (): xmlRegisterNodeFunc
                }
            
                __xmlSaveNoEmptyTags: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlStructuredError: {
                    /** 
                    * @returns {xmlStructuredErrorFunc - xmlStructuredErrorFunc}
                    */
                    (): xmlStructuredErrorFunc
                }
            
                __xmlStructuredErrorContext: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                __xmlSubstituteEntitiesDefaultValue: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                __xmlTreeIndentString: {
                    /** 
                    * @returns {string - q(const).char}
                    */
                    (): string
                }
            
                attribute: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param fullname {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, fullname: string | null, value: string | null): any
                }
            
                attributeDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param elem {string | null} - p.q(const).xmlChar
                    * @param fullname {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param def {number} - int
                    * @param defaultValue {string | null} - p.q(const).xmlChar
                    * @param tree {xmlEnumerationPtr | null} - xmlEnumerationPtr
                    * @returns {any - void}
                    */
                    (ctx: any, elem: string | null, fullname: string | null, type: number, def: number, defaultValue: string | null, tree: xmlEnumerationPtr | null): any
                }
            
                cdataBlock: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, value: string | null, len: number): any
                }
            
                characters: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param ch {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, ch: string | null, len: number): any
                }
            
                checkNamespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param nameSpace {string | null} - p.xmlChar
                    * @returns {number - int}
                    */
                    (ctx: any, nameSpace: string | null): number
                }
            
                comment: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, value: string | null): any
                }
            
                docbDefaultSAXHandlerInit: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                elementDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, type: number, content: xmlElementContentPtr | null): any
                }
            
                endDocument: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctx: any): any
                }
            
                endElement: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null): any
                }
            
                entityDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, type: number, publicId: string | null, systemId: string | null, content: string | null): any
                }
            
                externalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, ExternalID: string | null, SystemID: string | null): any
                }
            
                getChildAtIndex: {
                    /** 
                    * @param node {xmlNode} - p.xmlNode
                    * @param index {number} - int
                    * @returns {xmlNode - xmlNode}
                    */
                    (node: xmlNode, index: number): xmlNode
                }
            
                getColumnNumber: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                getEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (ctx: any, name: string | null): xmlEntityPtr
                }
            
                getLineNumber: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                getMemUsed: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                getNamespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (ctx: any): xmlNsPtr
                }
            
                getNodeCount: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                getParameterEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (ctx: any, name: string | null): xmlEntityPtr
                }
            
                getPublicId: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctx: any): string
                }
            
                getSystemId: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctx: any): string
                }
            
                globalNamespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param href {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, href: string | null, prefix: string | null): any
                }
            
                hasExternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                hasInternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                htmlAttrAllowed: {
                    /** 
                    * @param arg0 {htmlElemDesc} - p.q(const).htmlElemDesc
                    * @param arg1 {string | null} - p.q(const).xmlChar
                    * @param arg2 {number} - int
                    * @returns {htmlStatus - htmlStatus}
                    */
                    (arg0: htmlElemDesc, arg1: string | null, arg2: number): htmlStatus
                }
            
                htmlAutoCloseTag: {
                    /** 
                    * @param doc {htmlDocPtr | null} - htmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param elem {htmlNodePtr | null} - htmlNodePtr
                    * @returns {number - int}
                    */
                    (doc: htmlDocPtr | null, name: string | null, elem: htmlNodePtr | null): number
                }
            
                htmlCreateFileParserCtxt: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {htmlParserCtxtPtr - htmlParserCtxtPtr}
                    */
                    (filename: string | null, encoding: string | null): htmlParserCtxtPtr
                }
            
                htmlCreateMemoryParserCtxt: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {htmlParserCtxtPtr - htmlParserCtxtPtr}
                    */
                    (buffer: string | null, size: number): htmlParserCtxtPtr
                }
            
                htmlCreatePushParserCtxt: {
                    /** 
                    * @param sax {htmlSAXHandlerPtr | null} - htmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param chunk {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param filename {string | null} - p.q(const).char
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {htmlParserCtxtPtr - htmlParserCtxtPtr}
                    */
                    (sax: htmlSAXHandlerPtr | null, user_data: any, chunk: string | null, size: number, filename: string | null, enc: xmlCharEncoding): htmlParserCtxtPtr
                }
            
                htmlCtxtReadDoc: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, cur: string | null, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlCtxtReadFd: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, fd: number, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlCtxtReadFile: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, filename: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlCtxtReadIO: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlCtxtReadMemory: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlCtxtReset: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: htmlParserCtxtPtr | null): any
                }
            
                htmlCtxtUseOptions: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: htmlParserCtxtPtr | null, options: number): number
                }
            
                htmlDefaultSAXHandlerInit: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                htmlDocContentDumpFormatOutput: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {any - void}
                    */
                    (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | null, format: number): any
                }
            
                htmlDocContentDumpOutput: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | null): any
                }
            
                htmlDocDump: {
                    /** 
                    * @param f {undefined} - p.FILE
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (f: undefined, cur: xmlDocPtr | null): number
                }
            
                htmlDocDumpMemory: {
                    /** 
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param mem {string | null} - p.p.xmlChar
                    * @param size {number} - p.int
                    * @returns {any - void}
                    */
                    (cur: xmlDocPtr | null, mem: string | null, size: number): any
                }
            
                htmlDocDumpMemoryFormat: {
                    /** 
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param mem {string | null} - p.p.xmlChar
                    * @param size {number} - p.int
                    * @param format {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlDocPtr | null, mem: string | null, size: number, format: number): any
                }
            
                htmlElementAllowedHere: {
                    /** 
                    * @param arg0 {htmlElemDesc} - p.q(const).htmlElemDesc
                    * @param arg1 {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (arg0: htmlElemDesc, arg1: string | null): number
                }
            
                htmlElementStatusHere: {
                    /** 
                    * @param arg0 {htmlElemDesc} - p.q(const).htmlElemDesc
                    * @param arg1 {htmlElemDesc} - p.q(const).htmlElemDesc
                    * @returns {htmlStatus - htmlStatus}
                    */
                    (arg0: htmlElemDesc, arg1: htmlElemDesc): htmlStatus
                }
            
                htmlEncodeEntities: {
                    /** 
                    * @param out {string | null} - p.unsigned char
                    * @param outlen {number} - p.int
                    * @param in {string | null} - p.q(const).unsigned char
                    * @param inlen {number} - p.int
                    * @param quoteChar {number} - int
                    * @returns {number - int}
                    */
                    (out: string | null, outlen: number, inArg: string | null, inlen: number, quoteChar: number): number
                }
            
                htmlEntityLookup: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {htmlEntityDesc - q(const).htmlEntityDesc}
                    */
                    (name: string | null): htmlEntityDesc
                }
            
                htmlEntityValueLookup: {
                    /** 
                    * @param value {number} - unsigned int
                    * @returns {htmlEntityDesc - q(const).htmlEntityDesc}
                    */
                    (value: number): htmlEntityDesc
                }
            
                htmlFreeParserCtxt: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: htmlParserCtxtPtr | null): any
                }
            
                htmlGetMetaEncoding: {
                    /** 
                    * @param doc {htmlDocPtr | null} - htmlDocPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (doc: htmlDocPtr | null): string
                }
            
                htmlHandleOmittedElem: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                htmlInitAutoClose: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                htmlIsAutoClosed: {
                    /** 
                    * @param doc {htmlDocPtr | null} - htmlDocPtr
                    * @param elem {htmlNodePtr | null} - htmlNodePtr
                    * @returns {number - int}
                    */
                    (doc: htmlDocPtr | null, elem: htmlNodePtr | null): number
                }
            
                htmlIsBooleanAttr: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (name: string | null): number
                }
            
                htmlIsScriptAttribute: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (name: string | null): number
                }
            
                htmlNewDoc: {
                    /** 
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (URI: string | null, ExternalID: string | null): htmlDocPtr
                }
            
                htmlNewDocNoDtD: {
                    /** 
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (URI: string | null, ExternalID: string | null): htmlDocPtr
                }
            
                htmlNewParserCtxt: {
                    /** 
                    * @returns {htmlParserCtxtPtr - htmlParserCtxtPtr}
                    */
                    (): htmlParserCtxtPtr
                }
            
                htmlNodeDump: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null): number
                }
            
                htmlNodeDumpFile: {
                    /** 
                    * @param out {undefined} - p.FILE
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {any - void}
                    */
                    (out: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null): any
                }
            
                htmlNodeDumpFileFormat: {
                    /** 
                    * @param out {undefined} - p.FILE
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (out: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | null, format: number): number
                }
            
                htmlNodeDumpFormatOutput: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {any - void}
                    */
                    (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | null, format: number): any
                }
            
                htmlNodeDumpOutput: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | null): any
                }
            
                htmlNodeStatus: {
                    /** 
                    * @param arg0 {htmlNodePtr | null} - q(const).htmlNodePtr
                    * @param arg1 {number} - int
                    * @returns {htmlStatus - htmlStatus}
                    */
                    (arg0: htmlNodePtr | null, arg1: number): htmlStatus
                }
            
                htmlParseCharRef: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: htmlParserCtxtPtr | null): number
                }
            
                htmlParseChunk: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @param chunk {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param terminate {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: htmlParserCtxtPtr | null, chunk: string | null, size: number, terminate: number): number
                }
            
                htmlParseDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (cur: string | null, encoding: string | null): htmlDocPtr
                }
            
                htmlParseDocument: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: htmlParserCtxtPtr | null): number
                }
            
                htmlParseElement: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: htmlParserCtxtPtr | null): any
                }
            
                htmlParseEntityRef: {
                    /** 
                    * @param ctxt {htmlParserCtxtPtr | null} - htmlParserCtxtPtr
                    * @param str {string | null} - p.p.q(const).xmlChar
                    * @returns {htmlEntityDesc - q(const).htmlEntityDesc}
                    */
                    (ctxt: htmlParserCtxtPtr | null, str: string | null): htmlEntityDesc
                }
            
                htmlParseFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (filename: string | null, encoding: string | null): htmlDocPtr
                }
            
                htmlReadDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (cur: string | null, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlReadFd: {
                    /** 
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (fd: number, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlReadFile: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlReadIO: {
                    /** 
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlReadMemory: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): htmlDocPtr
                }
            
                htmlSAXParseDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param encoding {string | null} - p.q(const).char
                    * @param sax {htmlSAXHandlerPtr | null} - htmlSAXHandlerPtr
                    * @param userData {any} - p.void
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (cur: string | null, encoding: string | null, sax: htmlSAXHandlerPtr | null, userData: any): htmlDocPtr
                }
            
                htmlSAXParseFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param sax {htmlSAXHandlerPtr | null} - htmlSAXHandlerPtr
                    * @param userData {any} - p.void
                    * @returns {htmlDocPtr - htmlDocPtr}
                    */
                    (filename: string | null, encoding: string | null, sax: htmlSAXHandlerPtr | null, userData: any): htmlDocPtr
                }
            
                htmlSaveFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null): number
                }
            
                htmlSaveFileEnc: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null, encoding: string | null): number
                }
            
                htmlSaveFileFormat: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null, encoding: string | null, format: number): number
                }
            
                htmlSetMetaEncoding: {
                    /** 
                    * @param doc {htmlDocPtr | null} - htmlDocPtr
                    * @param encoding {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (doc: htmlDocPtr | null, encoding: string | null): number
                }
            
                htmlTagLookup: {
                    /** 
                    * @param tag {string | null} - p.q(const).xmlChar
                    * @returns {htmlElemDesc - q(const).htmlElemDesc}
                    */
                    (tag: string | null): htmlElemDesc
                }
            
                ignorableWhitespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param ch {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, ch: string | null, len: number): any
                }
            
                initGenericErrorDefaultFunc: {
                    /** 
                    * @param handler {xmlGenericErrorFunc} - p.xmlGenericErrorFunc
                    * @returns {any - void}
                    */
                    (handler: xmlGenericErrorFunc): any
                }
            
                initdocbDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandlerV1} - p.xmlSAXHandlerV1
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandlerV1): any
                }
            
                inithtmlDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandlerV1} - p.xmlSAXHandlerV1
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandlerV1): any
                }
            
                initxmlDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandlerV1} - p.xmlSAXHandlerV1
                    * @param warning {number} - int
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandlerV1, warning: number): any
                }
            
                inputPop: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                }
            
                inputPush: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param value {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, value: xmlParserInputPtr | null): number
                }
            
                internalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, ExternalID: string | null, SystemID: string | null): any
                }
            
                isStandalone: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                isolat1ToUTF8: {
                    /** 
                    * @param out {string | null} - p.unsigned char
                    * @param outlen {number} - p.int
                    * @param in {string | null} - p.q(const).unsigned char
                    * @param inlen {number} - p.int
                    * @returns {number - int}
                    */
                    (out: string | null, outlen: number, inArg: string | null, inlen: number): number
                }
            
                namePop: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                namePush: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, value: string | null): number
                }
            
                namespaceDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param href {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, href: string | null, prefix: string | null): any
                }
            
                nodePop: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlNodePtr
                }
            
                nodePush: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param value {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, value: xmlNodePtr | null): number
                }
            
                notationDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, publicId: string | null, systemId: string | null): any
                }
            
                processingInstruction: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param target {string | null} - p.q(const).xmlChar
                    * @param data {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, target: string | null, data: string | null): any
                }
            
                reference: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null): any
                }
            
                resolveEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctx: any, publicId: string | null, systemId: string | null): xmlParserInputPtr
                }
            
                setDebugDisable: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                setDebugEnable: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                setDocumentLocator: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param loc {xmlSAXLocatorPtr | null} - xmlSAXLocatorPtr
                    * @returns {any - void}
                    */
                    (ctx: any, loc: xmlSAXLocatorPtr | null): any
                }
            
                setNamespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null): any
                }
            
                startDocument: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctx: any): any
                }
            
                startElement: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param fullname {string | null} - p.q(const).xmlChar
                    * @param atts {string | null} - p.p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, fullname: string | null, atts: string | null): any
                }
            
                unparsedEntityDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @param notationName {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, publicId: string | null, systemId: string | null, notationName: string | null): any
                }
            
                xlinkGetDefaultDetect: {
                    /** 
                    * @returns {xlinkNodeDetectFunc - xlinkNodeDetectFunc}
                    */
                    (): xlinkNodeDetectFunc
                }
            
                xlinkGetDefaultHandler: {
                    /** 
                    * @returns {xlinkHandlerPtr - xlinkHandlerPtr}
                    */
                    (): xlinkHandlerPtr
                }
            
                xlinkIsLink: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xlinkType - xlinkType}
                    */
                    (doc: xmlDocPtr | null, node: xmlNodePtr | null): xlinkType
                }
            
                xlinkSetDefaultDetect: {
                    /** 
                    * @param func {xlinkNodeDetectFunc} - xlinkNodeDetectFunc
                    * @returns {any - void}
                    */
                    (func: xlinkNodeDetectFunc): any
                }
            
                xlinkSetDefaultHandler: {
                    /** 
                    * @param handler {xlinkHandlerPtr | null} - xlinkHandlerPtr
                    * @returns {any - void}
                    */
                    (handler: xlinkHandlerPtr | null): any
                }
            
                xmlACatalogAdd: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param type {string | null} - p.q(const).xmlChar
                    * @param orig {string | null} - p.q(const).xmlChar
                    * @param replace {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (catal: xmlCatalogPtr | null, type: string | null, orig: string | null, replace: string | null): number
                }
            
                xmlACatalogDump: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param out {undefined} - p.FILE
                    * @returns {any - void}
                    */
                    (catal: xmlCatalogPtr | null, out: undefined): any
                }
            
                xmlACatalogRemove: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (catal: xmlCatalogPtr | null, value: string | null): number
                }
            
                xmlACatalogResolve: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catal: xmlCatalogPtr | null, pubID: string | null, sysID: string | null): string
                }
            
                xmlACatalogResolvePublic: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catal: xmlCatalogPtr | null, pubID: string | null): string
                }
            
                xmlACatalogResolveSystem: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catal: xmlCatalogPtr | null, sysID: string | null): string
                }
            
                xmlACatalogResolveURI: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catal: xmlCatalogPtr | null, URI: string | null): string
                }
            
                xmlAddAttributeDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param elem {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @param type {xmlAttributeType} - xmlAttributeType
                    * @param def {xmlAttributeDefault} - xmlAttributeDefault
                    * @param defaultValue {string | null} - p.q(const).xmlChar
                    * @param tree {xmlEnumerationPtr | null} - xmlEnumerationPtr
                    * @returns {xmlAttributePtr - xmlAttributePtr}
                    */
                    (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, elem: string | null, name: string | null, ns: string | null, type: xmlAttributeType, def: xmlAttributeDefault, defaultValue: string | null, tree: xmlEnumerationPtr | null): xmlAttributePtr
                }
            
                xmlAddChild: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlAddChildList: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlAddDocEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, type: number, ExternalID: string | null, SystemID: string | null, content: string | null): xmlEntityPtr
                }
            
                xmlAddDtdEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, type: number, ExternalID: string | null, SystemID: string | null, content: string | null): xmlEntityPtr
                }
            
                xmlAddElementDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {xmlElementTypeVal} - xmlElementTypeVal
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {xmlElementPtr - xmlElementPtr}
                    */
                    (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, name: string | null, type: xmlElementTypeVal, content: xmlElementContentPtr | null): xmlElementPtr
                }
            
                xmlAddEncodingAlias: {
                    /** 
                    * @param name {string | null} - p.q(const).char
                    * @param alias {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (name: string | null, alias: string | null): number
                }
            
                xmlAddID: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {xmlIDPtr - xmlIDPtr}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, value: string | null, attr: xmlAttrPtr | null): xmlIDPtr
                }
            
                xmlAddNextSibling: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlAddNotationDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param PublicID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {xmlNotationPtr - xmlNotationPtr}
                    */
                    (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, name: string | null, PublicID: string | null, SystemID: string | null): xmlNotationPtr
                }
            
                xmlAddPrevSibling: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlAddRef: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {xmlRefPtr - xmlRefPtr}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, value: string | null, attr: xmlAttrPtr | null): xmlRefPtr
                }
            
                xmlAddSibling: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlAllocOutputBuffer: {
                    /** 
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                }
            
                xmlAllocParserInputBuffer: {
                    /** 
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlAttrSerializeTxtContent: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @param string {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, attr: xmlAttrPtr | null, string: string | null): any
                }
            
                xmlAutomataCompile: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @returns {xmlRegexpPtr - xmlRegexpPtr}
                    */
                    (am: xmlAutomataPtr | null): xmlRegexpPtr
                }
            
                xmlAutomataGetInitState: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null): xmlAutomataStatePtr
                }
            
                xmlAutomataIsDeterminist: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @returns {number - int}
                    */
                    (am: xmlAutomataPtr | null): number
                }
            
                xmlAutomataNewAllTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param lax {number} - int
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, lax: number): xmlAutomataStatePtr
                }
            
                xmlAutomataNewCountTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param min {number} - int
                    * @param max {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, min: number, max: number, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewCountTrans2: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param token2 {string | null} - p.q(const).xmlChar
                    * @param min {number} - int
                    * @param max {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, token2: string | null, min: number, max: number, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewCountedTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param counter {number} - int
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, counter: number): xmlAutomataStatePtr
                }
            
                xmlAutomataNewCounter: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param min {number} - int
                    * @param max {number} - int
                    * @returns {number - int}
                    */
                    (am: xmlAutomataPtr | null, min: number, max: number): number
                }
            
                xmlAutomataNewCounterTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param counter {number} - int
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, counter: number): xmlAutomataStatePtr
                }
            
                xmlAutomataNewEpsilon: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null): xmlAutomataStatePtr
                }
            
                xmlAutomataNewNegTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param token2 {string | null} - p.q(const).xmlChar
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, token2: string | null, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewOnceTrans: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param min {number} - int
                    * @param max {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, min: number, max: number, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewOnceTrans2: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param token2 {string | null} - p.q(const).xmlChar
                    * @param min {number} - int
                    * @param max {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, token2: string | null, min: number, max: number, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewState: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null): xmlAutomataStatePtr
                }
            
                xmlAutomataNewTransition: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataNewTransition2: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param from {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param to {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @param token {string | null} - p.q(const).xmlChar
                    * @param token2 {string | null} - p.q(const).xmlChar
                    * @param data {any} - p.void
                    * @returns {xmlAutomataStatePtr - xmlAutomataStatePtr}
                    */
                    (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | null, token2: string | null, data: any): xmlAutomataStatePtr
                }
            
                xmlAutomataSetFinalState: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @param state {xmlAutomataStatePtr | null} - xmlAutomataStatePtr
                    * @returns {number - int}
                    */
                    (am: xmlAutomataPtr | null, state: xmlAutomataStatePtr | null): number
                }
            
                xmlBufContent: {
                    /** 
                    * @param buf {xmlBuf} - p.q(const).xmlBuf
                    * @returns {string - xmlChar}
                    */
                    (buf: xmlBuf): string
                }
            
                xmlBufEnd: {
                    /** 
                    * @param buf {xmlBufPtr | null} - xmlBufPtr
                    * @returns {string - xmlChar}
                    */
                    (buf: xmlBufPtr | null): string
                }
            
                xmlBufGetNodeContent: {
                    /** 
                    * @param buf {xmlBufPtr | null} - xmlBufPtr
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {number - int}
                    */
                    (buf: xmlBufPtr | null, cur: xmlNode): number
                }
            
                xmlBufNodeDump: {
                    /** 
                    * @param buf {xmlBufPtr | null} - xmlBufPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param level {number} - int
                    * @param format {number} - int
                    * @returns {number - size_t}
                    */
                    (buf: xmlBufPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number): number
                }
            
                xmlBufShrink: {
                    /** 
                    * @param buf {xmlBufPtr | null} - xmlBufPtr
                    * @param len {number} - size_t
                    * @returns {number - size_t}
                    */
                    (buf: xmlBufPtr | null, len: number): number
                }
            
                xmlBufUse: {
                    /** 
                    * @param buf {xmlBufPtr | null} - q(const).xmlBufPtr
                    * @returns {number - size_t}
                    */
                    (buf: xmlBufPtr | null): number
                }
            
                xmlBufferAdd: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, str: string | null, len: number): number
                }
            
                xmlBufferAddHead: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, str: string | null, len: number): number
                }
            
                xmlBufferCCat: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param str {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, str: string | null): number
                }
            
                xmlBufferCat: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, str: string | null): number
                }
            
                xmlBufferContent: {
                    /** 
                    * @param buf {xmlBuffer} - p.q(const).xmlBuffer
                    * @returns {string - q(const).xmlChar}
                    */
                    (buf: xmlBuffer): string
                }
            
                xmlBufferCreate: {
                    /** 
                    * @returns {xmlBufferPtr - xmlBufferPtr}
                    */
                    (): xmlBufferPtr
                }
            
                xmlBufferCreateSize: {
                    /** 
                    * @param size {number} - size_t
                    * @returns {xmlBufferPtr - xmlBufferPtr}
                    */
                    (size: number): xmlBufferPtr
                }
            
                xmlBufferCreateStatic: {
                    /** 
                    * @param mem {any} - p.void
                    * @param size {number} - size_t
                    * @returns {xmlBufferPtr - xmlBufferPtr}
                    */
                    (mem: any, size: number): xmlBufferPtr
                }
            
                xmlBufferDetach: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {string - xmlChar}
                    */
                    (buf: xmlBufferPtr | null): string
                }
            
                xmlBufferDump: {
                    /** 
                    * @param file {undefined} - p.FILE
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {number - int}
                    */
                    (file: undefined, buf: xmlBufferPtr | null): number
                }
            
                xmlBufferEmpty: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null): any
                }
            
                xmlBufferFree: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null): any
                }
            
                xmlBufferGrow: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param len {number} - unsigned int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, len: number): number
                }
            
                xmlBufferLength: {
                    /** 
                    * @param buf {xmlBuffer} - p.q(const).xmlBuffer
                    * @returns {number - int}
                    */
                    (buf: xmlBuffer): number
                }
            
                xmlBufferResize: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param size {number} - unsigned int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, size: number): number
                }
            
                xmlBufferSetAllocationScheme: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param scheme {xmlBufferAllocationScheme} - xmlBufferAllocationScheme
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, scheme: xmlBufferAllocationScheme): any
                }
            
                xmlBufferShrink: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param len {number} - unsigned int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, len: number): number
                }
            
                xmlBufferWriteCHAR: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param string {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, string: string | null): any
                }
            
                xmlBufferWriteChar: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param string {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, string: string | null): any
                }
            
                xmlBufferWriteQuotedString: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param string {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, string: string | null): any
                }
            
                xmlBuildQName: {
                    /** 
                    * @param ncname {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param memory {string | null} - p.xmlChar
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (ncname: string | null, prefix: string | null, memory: string | null, len: number): string
                }
            
                xmlBuildRelativeURI: {
                    /** 
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @param base {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (URI: string | null, base: string | null): string
                }
            
                xmlBuildURI: {
                    /** 
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @param base {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (URI: string | null, base: string | null): string
                }
            
                xmlByteConsumed: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - long}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlCanonicPath: {
                    /** 
                    * @param path {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (path: string | null): string
                }
            
                xmlCatalogAdd: {
                    /** 
                    * @param type {string | null} - p.q(const).xmlChar
                    * @param orig {string | null} - p.q(const).xmlChar
                    * @param replace {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (type: string | null, orig: string | null, replace: string | null): number
                }
            
                xmlCatalogAddLocal: {
                    /** 
                    * @param catalogs {any} - p.void
                    * @param URL {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (catalogs: any, URL: string | null): any
                }
            
                xmlCatalogCleanup: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCatalogConvert: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlCatalogDump: {
                    /** 
                    * @param out {undefined} - p.FILE
                    * @returns {any - void}
                    */
                    (out: undefined): any
                }
            
                xmlCatalogFreeLocal: {
                    /** 
                    * @param catalogs {any} - p.void
                    * @returns {any - void}
                    */
                    (catalogs: any): any
                }
            
                xmlCatalogGetDefaults: {
                    /** 
                    * @returns {xmlCatalogAllow - xmlCatalogAllow}
                    */
                    (): xmlCatalogAllow
                }
            
                xmlCatalogGetPublic: {
                    /** 
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (pubID: string | null): string
                }
            
                xmlCatalogGetSystem: {
                    /** 
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (sysID: string | null): string
                }
            
                xmlCatalogIsEmpty: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @returns {number - int}
                    */
                    (catal: xmlCatalogPtr | null): number
                }
            
                xmlCatalogLocalResolve: {
                    /** 
                    * @param catalogs {any} - p.void
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catalogs: any, pubID: string | null, sysID: string | null): string
                }
            
                xmlCatalogLocalResolveURI: {
                    /** 
                    * @param catalogs {any} - p.void
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (catalogs: any, URI: string | null): string
                }
            
                xmlCatalogRemove: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (value: string | null): number
                }
            
                xmlCatalogResolve: {
                    /** 
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (pubID: string | null, sysID: string | null): string
                }
            
                xmlCatalogResolvePublic: {
                    /** 
                    * @param pubID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (pubID: string | null): string
                }
            
                xmlCatalogResolveSystem: {
                    /** 
                    * @param sysID {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (sysID: string | null): string
                }
            
                xmlCatalogResolveURI: {
                    /** 
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (URI: string | null): string
                }
            
                xmlCatalogSetDebug: {
                    /** 
                    * @param level {number} - int
                    * @returns {number - int}
                    */
                    (level: number): number
                }
            
                xmlCatalogSetDefaultPrefer: {
                    /** 
                    * @param prefer {xmlCatalogPrefer} - xmlCatalogPrefer
                    * @returns {xmlCatalogPrefer - xmlCatalogPrefer}
                    */
                    (prefer: xmlCatalogPrefer): xmlCatalogPrefer
                }
            
                xmlCatalogSetDefaults: {
                    /** 
                    * @param allow {xmlCatalogAllow} - xmlCatalogAllow
                    * @returns {any - void}
                    */
                    (allow: xmlCatalogAllow): any
                }
            
                xmlCharEncCloseFunc: {
                    /** 
                    * @param handler {xmlCharEncodingHandler} - p.xmlCharEncodingHandler
                    * @returns {number - int}
                    */
                    (handler: xmlCharEncodingHandler): number
                }
            
                xmlCharEncFirstLine: {
                    /** 
                    * @param handler {xmlCharEncodingHandler} - p.xmlCharEncodingHandler
                    * @param out {xmlBufferPtr | null} - xmlBufferPtr
                    * @param in {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {number - int}
                    */
                    (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                }
            
                xmlCharEncInFunc: {
                    /** 
                    * @param handler {xmlCharEncodingHandler} - p.xmlCharEncodingHandler
                    * @param out {xmlBufferPtr | null} - xmlBufferPtr
                    * @param in {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {number - int}
                    */
                    (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                }
            
                xmlCharEncOutFunc: {
                    /** 
                    * @param handler {xmlCharEncodingHandler} - p.xmlCharEncodingHandler
                    * @param out {xmlBufferPtr | null} - xmlBufferPtr
                    * @param in {xmlBufferPtr | null} - xmlBufferPtr
                    * @returns {number - int}
                    */
                    (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                }
            
                xmlCharInRange: {
                    /** 
                    * @param val {number} - unsigned int
                    * @param group {xmlChRangeGroup} - p.q(const).xmlChRangeGroup
                    * @returns {number - int}
                    */
                    (val: number, group: xmlChRangeGroup): number
                }
            
                xmlCharStrdup: {
                    /** 
                    * @param cur {string | null} - p.q(const).char
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null): string
                }
            
                xmlCharStrndup: {
                    /** 
                    * @param cur {string | null} - p.q(const).char
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null, len: number): string
                }
            
                xmlCheckFilename: {
                    /** 
                    * @param path {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (path: string | null): number
                }
            
                xmlCheckHTTPInput: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param ret {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, ret: xmlParserInputPtr | null): xmlParserInputPtr
                }
            
                xmlCheckLanguageID: {
                    /** 
                    * @param lang {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (lang: string | null): number
                }
            
                xmlCheckUTF8: {
                    /** 
                    * @param utf {string | null} - p.q(const).unsigned char
                    * @returns {number - int}
                    */
                    (utf: string | null): number
                }
            
                xmlCheckVersion: {
                    /** 
                    * @param version {number} - int
                    * @returns {any - void}
                    */
                    (version: number): any
                }
            
                xmlChildElementCount: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - unsigned long}
                    */
                    (parent: xmlNodePtr | null): number
                }
            
                xmlCleanupCharEncodingHandlers: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupEncodingAliases: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupGlobals: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupInputCallbacks: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupMemory: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupOutputCallbacks: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupParser: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupPredefinedEntities: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlCleanupThreads: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlClearNodeInfoSeq: {
                    /** 
                    * @param seq {xmlParserNodeInfoSeqPtr | null} - xmlParserNodeInfoSeqPtr
                    * @returns {any - void}
                    */
                    (seq: xmlParserNodeInfoSeqPtr | null): any
                }
            
                xmlClearParserCtxt: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlConvertSGMLCatalog: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @returns {number - int}
                    */
                    (catal: xmlCatalogPtr | null): number
                }
            
                xmlCopyAttributeTable: {
                    /** 
                    * @param table {xmlAttributeTablePtr | null} - xmlAttributeTablePtr
                    * @returns {xmlAttributeTablePtr - xmlAttributeTablePtr}
                    */
                    (table: xmlAttributeTablePtr | null): xmlAttributeTablePtr
                }
            
                xmlCopyChar: {
                    /** 
                    * @param len {number} - int
                    * @param out {string | null} - p.xmlChar
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (len: number, out: string | null, val: number): number
                }
            
                xmlCopyCharMultiByte: {
                    /** 
                    * @param out {string | null} - p.xmlChar
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (out: string | null, val: number): number
                }
            
                xmlCopyDoc: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param recursive {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (doc: xmlDocPtr | null, recursive: number): xmlDocPtr
                }
            
                xmlCopyDocElementContent: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (doc: xmlDocPtr | null, content: xmlElementContentPtr | null): xmlElementContentPtr
                }
            
                xmlCopyDtd: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (dtd: xmlDtdPtr | null): xmlDtdPtr
                }
            
                xmlCopyElementContent: {
                    /** 
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (content: xmlElementContentPtr | null): xmlElementContentPtr
                }
            
                xmlCopyElementTable: {
                    /** 
                    * @param table {xmlElementTablePtr | null} - xmlElementTablePtr
                    * @returns {xmlElementTablePtr - xmlElementTablePtr}
                    */
                    (table: xmlElementTablePtr | null): xmlElementTablePtr
                }
            
                xmlCopyEntitiesTable: {
                    /** 
                    * @param table {xmlEntitiesTablePtr | null} - xmlEntitiesTablePtr
                    * @returns {xmlEntitiesTablePtr - xmlEntitiesTablePtr}
                    */
                    (table: xmlEntitiesTablePtr | null): xmlEntitiesTablePtr
                }
            
                xmlCopyEnumeration: {
                    /** 
                    * @param cur {xmlEnumerationPtr | null} - xmlEnumerationPtr
                    * @returns {xmlEnumerationPtr - xmlEnumerationPtr}
                    */
                    (cur: xmlEnumerationPtr | null): xmlEnumerationPtr
                }
            
                xmlCopyError: {
                    /** 
                    * @param from {xmlErrorPtr | null} - xmlErrorPtr
                    * @param to {xmlErrorPtr | null} - xmlErrorPtr
                    * @returns {number - int}
                    */
                    (from: xmlErrorPtr | null, to: xmlErrorPtr | null): number
                }
            
                xmlCopyNamespace: {
                    /** 
                    * @param cur {xmlNsPtr | null} - xmlNsPtr
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (cur: xmlNsPtr | null): xmlNsPtr
                }
            
                xmlCopyNamespaceList: {
                    /** 
                    * @param cur {xmlNsPtr | null} - xmlNsPtr
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (cur: xmlNsPtr | null): xmlNsPtr
                }
            
                xmlCopyNode: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param recursive {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (node: xmlNodePtr | null, recursive: number): xmlNodePtr
                }
            
                xmlCopyNodeList: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (node: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlCopyNotationTable: {
                    /** 
                    * @param table {xmlNotationTablePtr | null} - xmlNotationTablePtr
                    * @returns {xmlNotationTablePtr - xmlNotationTablePtr}
                    */
                    (table: xmlNotationTablePtr | null): xmlNotationTablePtr
                }
            
                xmlCopyProp: {
                    /** 
                    * @param target {xmlNodePtr | null} - xmlNodePtr
                    * @param cur {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (target: xmlNodePtr | null, cur: xmlAttrPtr | null): xmlAttrPtr
                }
            
                xmlCopyPropList: {
                    /** 
                    * @param target {xmlNodePtr | null} - xmlNodePtr
                    * @param cur {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (target: xmlNodePtr | null, cur: xmlAttrPtr | null): xmlAttrPtr
                }
            
                xmlCreateDocParserCtxt: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (cur: string | null): xmlParserCtxtPtr
                }
            
                xmlCreateEntitiesTable: {
                    /** 
                    * @returns {xmlEntitiesTablePtr - xmlEntitiesTablePtr}
                    */
                    (): xmlEntitiesTablePtr
                }
            
                xmlCreateEntityParserCtxt: {
                    /** 
                    * @param URL {string | null} - p.q(const).xmlChar
                    * @param ID {string | null} - p.q(const).xmlChar
                    * @param base {string | null} - p.q(const).xmlChar
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (URL: string | null, ID: string | null, base: string | null): xmlParserCtxtPtr
                }
            
                xmlCreateEnumeration: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEnumerationPtr - xmlEnumerationPtr}
                    */
                    (name: string | null): xmlEnumerationPtr
                }
            
                xmlCreateFileParserCtxt: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (filename: string | null): xmlParserCtxtPtr
                }
            
                xmlCreateIOParserCtxt: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, user_data: any, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, enc: xmlCharEncoding): xmlParserCtxtPtr
                }
            
                xmlCreateIntSubset: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, ExternalID: string | null, SystemID: string | null): xmlDtdPtr
                }
            
                xmlCreateMemoryParserCtxt: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (buffer: string | null, size: number): xmlParserCtxtPtr
                }
            
                xmlCreatePushParserCtxt: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param chunk {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, user_data: any, chunk: string | null, size: number, filename: string | null): xmlParserCtxtPtr
                }
            
                xmlCreateURI: {
                    /** 
                    * @returns {xmlURIPtr - xmlURIPtr}
                    */
                    (): xmlURIPtr
                }
            
                xmlCreateURLParserCtxt: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (filename: string | null, options: number): xmlParserCtxtPtr
                }
            
                xmlCtxtGetLastError: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {xmlErrorPtr - xmlErrorPtr}
                    */
                    (ctx: any): xmlErrorPtr
                }
            
                xmlCtxtReadDoc: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, cur: string | null, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlCtxtReadFd: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, fd: number, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlCtxtReadFile: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, filename: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlCtxtReadIO: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlCtxtReadMemory: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlCtxtReset: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlCtxtResetLastError: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctx: any): any
                }
            
                xmlCtxtResetPush: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param chunk {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, chunk: string | null, size: number, filename: string | null, encoding: string | null): number
                }
            
                xmlCtxtUseOptions: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, options: number): number
                }
            
                xmlCurrentChar: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param len {number} - p.int
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, len: number): number
                }
            
                xmlDOMWrapAdoptNode: {
                    /** 
                    * @param ctxt {xmlDOMWrapCtxtPtr | null} - xmlDOMWrapCtxtPtr
                    * @param sourceDoc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param destDoc {xmlDocPtr | null} - xmlDocPtr
                    * @param destParent {xmlNodePtr | null} - xmlNodePtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlDOMWrapCtxtPtr | null, sourceDoc: xmlDocPtr | null, node: xmlNodePtr | null, destDoc: xmlDocPtr | null, destParent: xmlNodePtr | null, options: number): number
                }
            
                xmlDOMWrapCloneNode: {
                    /** 
                    * @param ctxt {xmlDOMWrapCtxtPtr | null} - xmlDOMWrapCtxtPtr
                    * @param sourceDoc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param clonedNode {xmlNodePtr | null} - p.xmlNodePtr
                    * @param destDoc {xmlDocPtr | null} - xmlDocPtr
                    * @param destParent {xmlNodePtr | null} - xmlNodePtr
                    * @param deep {number} - int
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlDOMWrapCtxtPtr | null, sourceDoc: xmlDocPtr | null, node: xmlNodePtr | null, clonedNode: xmlNodePtr | null, destDoc: xmlDocPtr | null, destParent: xmlNodePtr | null, deep: number, options: number): number
                }
            
                xmlDOMWrapFreeCtxt: {
                    /** 
                    * @param ctxt {xmlDOMWrapCtxtPtr | null} - xmlDOMWrapCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlDOMWrapCtxtPtr | null): any
                }
            
                xmlDOMWrapNewCtxt: {
                    /** 
                    * @returns {xmlDOMWrapCtxtPtr - xmlDOMWrapCtxtPtr}
                    */
                    (): xmlDOMWrapCtxtPtr
                }
            
                xmlDOMWrapReconcileNamespaces: {
                    /** 
                    * @param ctxt {xmlDOMWrapCtxtPtr | null} - xmlDOMWrapCtxtPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlDOMWrapCtxtPtr | null, elem: xmlNodePtr | null, options: number): number
                }
            
                xmlDOMWrapRemoveNode: {
                    /** 
                    * @param ctxt {xmlDOMWrapCtxtPtr | null} - xmlDOMWrapCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlDOMWrapCtxtPtr | null, doc: xmlDocPtr | null, node: xmlNodePtr | null, options: number): number
                }
            
                xmlDecodeEntities: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param len {number} - int
                    * @param what {number} - int
                    * @param end {string | null} - xmlChar
                    * @param end2 {string | null} - xmlChar
                    * @param end3 {string | null} - xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, len: number, what: number, end: string | null, end2: string | null, end3: string | null): string
                }
            
                xmlDefaultSAXHandlerInit: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlDelEncodingAlias: {
                    /** 
                    * @param alias {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (alias: string | null): number
                }
            
                xmlDeregisterNodeDefault: {
                    /** 
                    * @param func {xmlDeregisterNodeFunc} - xmlDeregisterNodeFunc
                    * @returns {xmlDeregisterNodeFunc - xmlDeregisterNodeFunc}
                    */
                    (func: xmlDeregisterNodeFunc): xmlDeregisterNodeFunc
                }
            
                xmlDetectCharEncoding: {
                    /** 
                    * @param in {string | null} - p.q(const).unsigned char
                    * @param len {number} - int
                    * @returns {xmlCharEncoding - xmlCharEncoding}
                    */
                    (inArg: string | null, len: number): xmlCharEncoding
                }
            
                xmlDictCleanup: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlDictCreate: {
                    /** 
                    * @returns {xmlDictPtr - xmlDictPtr}
                    */
                    (): xmlDictPtr
                }
            
                xmlDictCreateSub: {
                    /** 
                    * @param sub {xmlDictPtr | null} - xmlDictPtr
                    * @returns {xmlDictPtr - xmlDictPtr}
                    */
                    (sub: xmlDictPtr | null): xmlDictPtr
                }
            
                xmlDictExists: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - q(const).xmlChar}
                    */
                    (dict: xmlDictPtr | null, name: string | null, len: number): string
                }
            
                xmlDictFree: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @returns {any - void}
                    */
                    (dict: xmlDictPtr | null): any
                }
            
                xmlDictGetUsage: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @returns {number - size_t}
                    */
                    (dict: xmlDictPtr | null): number
                }
            
                xmlDictLookup: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - q(const).xmlChar}
                    */
                    (dict: xmlDictPtr | null, name: string | null, len: number): string
                }
            
                xmlDictOwns: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (dict: xmlDictPtr | null, str: string | null): number
                }
            
                xmlDictQLookup: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (dict: xmlDictPtr | null, prefix: string | null, name: string | null): string
                }
            
                xmlDictReference: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @returns {number - int}
                    */
                    (dict: xmlDictPtr | null): number
                }
            
                xmlDictSetLimit: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @param limit {number} - size_t
                    * @returns {number - size_t}
                    */
                    (dict: xmlDictPtr | null, limit: number): number
                }
            
                xmlDictSize: {
                    /** 
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @returns {number - int}
                    */
                    (dict: xmlDictPtr | null): number
                }
            
                xmlDocCopyNode: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param recursive {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (node: xmlNodePtr | null, doc: xmlDocPtr | null, recursive: number): xmlNodePtr
                }
            
                xmlDocCopyNodeList: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, node: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlDocDump: {
                    /** 
                    * @param f {undefined} - p.FILE
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (f: undefined, cur: xmlDocPtr | null): number
                }
            
                xmlDocDumpFormatMemory: {
                    /** 
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param mem {string | null} - p.p.xmlChar
                    * @param size {number} - p.int
                    * @param format {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlDocPtr | null, mem: string | null, size: number, format: number): any
                }
            
                xmlDocDumpFormatMemoryEnc: {
                    /** 
                    * @param out_doc {xmlDocPtr | null} - xmlDocPtr
                    * @param doc_txt_ptr {string | null} - p.p.xmlChar
                    * @param doc_txt_len {number} - p.int
                    * @param txt_encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {any - void}
                    */
                    (out_doc: xmlDocPtr | null, doc_txt_ptr: string | null, doc_txt_len: number, txt_encoding: string | null, format: number): any
                }
            
                xmlDocDumpMemory: {
                    /** 
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param mem {string | null} - p.p.xmlChar
                    * @param size {number} - p.int
                    * @returns {any - void}
                    */
                    (cur: xmlDocPtr | null, mem: string | null, size: number): any
                }
            
                xmlDocDumpMemoryEnc: {
                    /** 
                    * @param out_doc {xmlDocPtr | null} - xmlDocPtr
                    * @param doc_txt_ptr {string | null} - p.p.xmlChar
                    * @param doc_txt_len {number} - p.int
                    * @param txt_encoding {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (out_doc: xmlDocPtr | null, doc_txt_ptr: string | null, doc_txt_len: number, txt_encoding: string | null): any
                }
            
                xmlDocFormatDump: {
                    /** 
                    * @param f {undefined} - p.FILE
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (f: undefined, cur: xmlDocPtr | null, format: number): number
                }
            
                xmlDocGetRootElement: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDoc): xmlNodePtr
                }
            
                xmlDocSetRootElement: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param root {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, root: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlDumpAttributeDecl: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param attr {xmlAttributePtr | null} - xmlAttributePtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, attr: xmlAttributePtr | null): any
                }
            
                xmlDumpAttributeTable: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param table {xmlAttributeTablePtr | null} - xmlAttributeTablePtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, table: xmlAttributeTablePtr | null): any
                }
            
                xmlDumpElementDecl: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param elem {xmlElementPtr | null} - xmlElementPtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, elem: xmlElementPtr | null): any
                }
            
                xmlDumpElementTable: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param table {xmlElementTablePtr | null} - xmlElementTablePtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, table: xmlElementTablePtr | null): any
                }
            
                xmlDumpEntitiesTable: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param table {xmlEntitiesTablePtr | null} - xmlEntitiesTablePtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, table: xmlEntitiesTablePtr | null): any
                }
            
                xmlDumpEntityDecl: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param ent {xmlEntityPtr | null} - xmlEntityPtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, ent: xmlEntityPtr | null): any
                }
            
                xmlDumpNotationDecl: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param nota {xmlNotationPtr | null} - xmlNotationPtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, nota: xmlNotationPtr | null): any
                }
            
                xmlDumpNotationTable: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param table {xmlNotationTablePtr | null} - xmlNotationTablePtr
                    * @returns {any - void}
                    */
                    (buf: xmlBufferPtr | null, table: xmlNotationTablePtr | null): any
                }
            
                xmlElemDump: {
                    /** 
                    * @param f {undefined} - p.FILE
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {any - void}
                    */
                    (f: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null): any
                }
            
                xmlEncodeEntities: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param input {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (doc: xmlDocPtr | null, input: string | null): string
                }
            
                xmlEncodeEntitiesReentrant: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param input {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDocPtr | null, input: string | null): string
                }
            
                xmlEncodeSpecialChars: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param input {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDoc, input: string | null): string
                }
            
                xmlFileClose: {
                    /** 
                    * @param context {any} - p.void
                    * @returns {number - int}
                    */
                    (context: any): number
                }
            
                xmlFileMatch: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null): number
                }
            
                xmlFileOpen: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (filename: string | null): any
                }
            
                xmlFileRead: {
                    /** 
                    * @param context {any} - p.void
                    * @param buffer {string | null} - p.char
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (context: any, buffer: string | null, len: number): number
                }
            
                xmlFindCharEncodingHandler: {
                    /** 
                    * @param name {string | null} - p.q(const).char
                    * @returns {xmlCharEncodingHandlerPtr - xmlCharEncodingHandlerPtr}
                    */
                    (name: string | null): xmlCharEncodingHandlerPtr
                }
            
                xmlFirstElementChild: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlFreeAttributeTable: {
                    /** 
                    * @param table {xmlAttributeTablePtr | null} - xmlAttributeTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlAttributeTablePtr | null): any
                }
            
                xmlFreeAutomata: {
                    /** 
                    * @param am {xmlAutomataPtr | null} - xmlAutomataPtr
                    * @returns {any - void}
                    */
                    (am: xmlAutomataPtr | null): any
                }
            
                xmlFreeCatalog: {
                    /** 
                    * @param catal {xmlCatalogPtr | null} - xmlCatalogPtr
                    * @returns {any - void}
                    */
                    (catal: xmlCatalogPtr | null): any
                }
            
                xmlFreeDoc: {
                    /** 
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @returns {any - void}
                    */
                    (cur: xmlDocPtr | null): any
                }
            
                xmlFreeDocElementContent: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {any - void}
                    */
                    (doc: xmlDocPtr | null, cur: xmlElementContentPtr | null): any
                }
            
                xmlFreeDtd: {
                    /** 
                    * @param cur {xmlDtdPtr | null} - xmlDtdPtr
                    * @returns {any - void}
                    */
                    (cur: xmlDtdPtr | null): any
                }
            
                xmlFreeElementContent: {
                    /** 
                    * @param cur {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {any - void}
                    */
                    (cur: xmlElementContentPtr | null): any
                }
            
                xmlFreeElementTable: {
                    /** 
                    * @param table {xmlElementTablePtr | null} - xmlElementTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlElementTablePtr | null): any
                }
            
                xmlFreeEntitiesTable: {
                    /** 
                    * @param table {xmlEntitiesTablePtr | null} - xmlEntitiesTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlEntitiesTablePtr | null): any
                }
            
                xmlFreeEnumeration: {
                    /** 
                    * @param cur {xmlEnumerationPtr | null} - xmlEnumerationPtr
                    * @returns {any - void}
                    */
                    (cur: xmlEnumerationPtr | null): any
                }
            
                xmlFreeIDTable: {
                    /** 
                    * @param table {xmlIDTablePtr | null} - xmlIDTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlIDTablePtr | null): any
                }
            
                xmlFreeInputStream: {
                    /** 
                    * @param input {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {any - void}
                    */
                    (input: xmlParserInputPtr | null): any
                }
            
                xmlFreeMutex: {
                    /** 
                    * @param tok {xmlMutexPtr | null} - xmlMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlMutexPtr | null): any
                }
            
                xmlFreeNode: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null): any
                }
            
                xmlFreeNodeList: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null): any
                }
            
                xmlFreeNotationTable: {
                    /** 
                    * @param table {xmlNotationTablePtr | null} - xmlNotationTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlNotationTablePtr | null): any
                }
            
                xmlFreeNs: {
                    /** 
                    * @param cur {xmlNsPtr | null} - xmlNsPtr
                    * @returns {any - void}
                    */
                    (cur: xmlNsPtr | null): any
                }
            
                xmlFreeNsList: {
                    /** 
                    * @param cur {xmlNsPtr | null} - xmlNsPtr
                    * @returns {any - void}
                    */
                    (cur: xmlNsPtr | null): any
                }
            
                xmlFreeParserCtxt: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlFreeParserInputBuffer: {
                    /** 
                    * @param in {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @returns {any - void}
                    */
                    (inArg: xmlParserInputBufferPtr | null): any
                }
            
                xmlFreePattern: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {any - void}
                    */
                    (comp: xmlPatternPtr | null): any
                }
            
                xmlFreePatternList: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {any - void}
                    */
                    (comp: xmlPatternPtr | null): any
                }
            
                xmlFreeProp: {
                    /** 
                    * @param cur {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {any - void}
                    */
                    (cur: xmlAttrPtr | null): any
                }
            
                xmlFreePropList: {
                    /** 
                    * @param cur {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {any - void}
                    */
                    (cur: xmlAttrPtr | null): any
                }
            
                xmlFreeRMutex: {
                    /** 
                    * @param tok {xmlRMutexPtr | null} - xmlRMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlRMutexPtr | null): any
                }
            
                xmlFreeRefTable: {
                    /** 
                    * @param table {xmlRefTablePtr | null} - xmlRefTablePtr
                    * @returns {any - void}
                    */
                    (table: xmlRefTablePtr | null): any
                }
            
                xmlFreeStreamCtxt: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @returns {any - void}
                    */
                    (stream: xmlStreamCtxtPtr | null): any
                }
            
                xmlFreeTextReader: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {any - void}
                    */
                    (reader: xmlTextReaderPtr | null): any
                }
            
                xmlFreeTextWriter: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {any - void}
                    */
                    (writer: xmlTextWriterPtr | null): any
                }
            
                xmlFreeURI: {
                    /** 
                    * @param uri {xmlURIPtr | null} - xmlURIPtr
                    * @returns {any - void}
                    */
                    (uri: xmlURIPtr | null): any
                }
            
                xmlFreeValidCtxt: {
                    /** 
                    * @param arg0 {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @returns {any - void}
                    */
                    (arg0: xmlValidCtxtPtr | null): any
                }
            
                xmlGcMemGet: {
                    /** 
                    * @param freeFunc {xmlFreeFunc} - p.xmlFreeFunc
                    * @param mallocFunc {xmlMallocFunc} - p.xmlMallocFunc
                    * @param mallocAtomicFunc {xmlMallocFunc} - p.xmlMallocFunc
                    * @param reallocFunc {xmlReallocFunc} - p.xmlReallocFunc
                    * @param strdupFunc {xmlStrdupFunc} - p.xmlStrdupFunc
                    * @returns {number - int}
                    */
                    (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, mallocAtomicFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                }
            
                xmlGcMemSetup: {
                    /** 
                    * @param freeFunc {xmlFreeFunc} - xmlFreeFunc
                    * @param mallocFunc {xmlMallocFunc} - xmlMallocFunc
                    * @param mallocAtomicFunc {xmlMallocFunc} - xmlMallocFunc
                    * @param reallocFunc {xmlReallocFunc} - xmlReallocFunc
                    * @param strdupFunc {xmlStrdupFunc} - xmlStrdupFunc
                    * @returns {number - int}
                    */
                    (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, mallocAtomicFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                }
            
                xmlGetBufferAllocationScheme: {
                    /** 
                    * @returns {xmlBufferAllocationScheme - xmlBufferAllocationScheme}
                    */
                    (): xmlBufferAllocationScheme
                }
            
                xmlGetCharEncodingHandler: {
                    /** 
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlCharEncodingHandlerPtr - xmlCharEncodingHandlerPtr}
                    */
                    (enc: xmlCharEncoding): xmlCharEncodingHandlerPtr
                }
            
                xmlGetCharEncodingName: {
                    /** 
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {string - q(const).char}
                    */
                    (enc: xmlCharEncoding): string
                }
            
                xmlGetCompressMode: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlGetDocCompressMode: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @returns {number - int}
                    */
                    (doc: xmlDoc): number
                }
            
                xmlGetDocEntity: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDoc, name: string | null): xmlEntityPtr
                }
            
                xmlGetDtdAttrDesc: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param elem {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttributePtr - xmlAttributePtr}
                    */
                    (dtd: xmlDtdPtr | null, elem: string | null, name: string | null): xmlAttributePtr
                }
            
                xmlGetDtdElementDesc: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlElementPtr - xmlElementPtr}
                    */
                    (dtd: xmlDtdPtr | null, name: string | null): xmlElementPtr
                }
            
                xmlGetDtdEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null): xmlEntityPtr
                }
            
                xmlGetDtdNotationDesc: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlNotationPtr - xmlNotationPtr}
                    */
                    (dtd: xmlDtdPtr | null, name: string | null): xmlNotationPtr
                }
            
                xmlGetDtdQAttrDesc: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param elem {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttributePtr - xmlAttributePtr}
                    */
                    (dtd: xmlDtdPtr | null, elem: string | null, name: string | null, prefix: string | null): xmlAttributePtr
                }
            
                xmlGetDtdQElementDesc: {
                    /** 
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {xmlElementPtr - xmlElementPtr}
                    */
                    (dtd: xmlDtdPtr | null, name: string | null, prefix: string | null): xmlElementPtr
                }
            
                xmlGetEncodingAlias: {
                    /** 
                    * @param alias {string | null} - p.q(const).char
                    * @returns {string - q(const).char}
                    */
                    (alias: string | null): string
                }
            
                xmlGetExternalEntityLoader: {
                    /** 
                    * @returns {xmlExternalEntityLoader - xmlExternalEntityLoader}
                    */
                    (): xmlExternalEntityLoader
                }
            
                xmlGetFeature: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param name {string | null} - p.q(const).char
                    * @param result {any} - p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, name: string | null, result: any): number
                }
            
                xmlGetFeaturesList: {
                    /** 
                    * @param len {number} - p.int
                    * @param result {string | null} - p.p.q(const).char
                    * @returns {number - int}
                    */
                    (len: number, result: string | null): number
                }
            
                xmlGetGlobalState: {
                    /** 
                    * @returns {xmlGlobalStatePtr - xmlGlobalStatePtr}
                    */
                    (): xmlGlobalStatePtr
                }
            
                xmlGetID: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param ID {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (doc: xmlDocPtr | null, ID: string | null): xmlAttrPtr
                }
            
                xmlGetIntSubset: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (doc: xmlDoc): xmlDtdPtr
                }
            
                xmlGetLastChild: {
                    /** 
                    * @param parent {xmlNode} - p.q(const).xmlNode
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNode): xmlNodePtr
                }
            
                xmlGetLastError: {
                    /** 
                    * @returns {xmlErrorPtr - xmlErrorPtr}
                    */
                    (): xmlErrorPtr
                }
            
                xmlGetLineNo: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @returns {number - long}
                    */
                    (node: xmlNode): number
                }
            
                xmlGetNoNsProp: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (node: xmlNode, name: string | null): string
                }
            
                xmlGetNodePath: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @returns {string - xmlChar}
                    */
                    (node: xmlNode): string
                }
            
                xmlGetNsList: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (doc: xmlDoc, node: xmlNode): xmlNsPtr
                }
            
                xmlGetNsProp: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param nameSpace {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (node: xmlNode, name: string | null, nameSpace: string | null): string
                }
            
                xmlGetParameterEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null): xmlEntityPtr
                }
            
                xmlGetPredefinedEntity: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (name: string | null): xmlEntityPtr
                }
            
                xmlGetProp: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (node: xmlNode, name: string | null): string
                }
            
                xmlGetRefs: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param ID {string | null} - p.q(const).xmlChar
                    * @returns {xmlListPtr - xmlListPtr}
                    */
                    (doc: xmlDocPtr | null, ID: string | null): xmlListPtr
                }
            
                xmlGetThreadId: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlGetUTF8Char: {
                    /** 
                    * @param utf {string | null} - p.q(const).unsigned char
                    * @param len {number} - p.int
                    * @returns {number - int}
                    */
                    (utf: string | null, len: number): number
                }
            
                xmlHandleEntity: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param entity {xmlEntityPtr | null} - xmlEntityPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null, entity: xmlEntityPtr | null): any
                }
            
                xmlHasFeature: {
                    /** 
                    * @param feature {xmlFeature} - xmlFeature
                    * @returns {number - int}
                    */
                    (feature: xmlFeature): number
                }
            
                xmlHasNsProp: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param nameSpace {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNode, name: string | null, nameSpace: string | null): xmlAttrPtr
                }
            
                xmlHasProp: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNode, name: string | null): xmlAttrPtr
                }
            
                xmlHashAddEntry: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, userdata: any): number
                }
            
                xmlHashAddEntry2: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, userdata: any): number
                }
            
                xmlHashAddEntry3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null, userdata: any): number
                }
            
                xmlHashCopy: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param f {xmlHashCopier} - xmlHashCopier
                    * @returns {xmlHashTablePtr - xmlHashTablePtr}
                    */
                    (table: xmlHashTablePtr | null, f: xmlHashCopier): xmlHashTablePtr
                }
            
                xmlHashCreate: {
                    /** 
                    * @param size {number} - int
                    * @returns {xmlHashTablePtr - xmlHashTablePtr}
                    */
                    (size: number): xmlHashTablePtr
                }
            
                xmlHashCreateDict: {
                    /** 
                    * @param size {number} - int
                    * @param dict {xmlDictPtr | null} - xmlDictPtr
                    * @returns {xmlHashTablePtr - xmlHashTablePtr}
                    */
                    (size: number, dict: xmlDictPtr | null): xmlHashTablePtr
                }
            
                xmlHashDefaultDeallocator: {
                    /** 
                    * @param entry {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (entry: any, name: string | null): any
                }
            
                xmlHashFree: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, f: xmlHashDeallocator): any
                }
            
                xmlHashLookup: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null): any
                }
            
                xmlHashLookup2: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null): any
                }
            
                xmlHashLookup3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null): any
                }
            
                xmlHashQLookup: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, prefix: string | null): any
                }
            
                xmlHashQLookup2: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param prefix2 {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, prefix: string | null, name2: string | null, prefix2: string | null): any
                }
            
                xmlHashQLookup3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param prefix2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param prefix3 {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, prefix: string | null, name2: string | null, prefix2: string | null, name3: string | null, prefix3: string | null): any
                }
            
                xmlHashRemoveEntry: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, f: xmlHashDeallocator): number
                }
            
                xmlHashRemoveEntry2: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, f: xmlHashDeallocator): number
                }
            
                xmlHashRemoveEntry3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null, f: xmlHashDeallocator): number
                }
            
                xmlHashScan: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param f {xmlHashScanner} - xmlHashScanner
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, f: xmlHashScanner, data: any): any
                }
            
                xmlHashScan3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param f {xmlHashScanner} - xmlHashScanner
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null, f: xmlHashScanner, data: any): any
                }
            
                xmlHashScanFull: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param f {xmlHashScannerFull} - xmlHashScannerFull
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, f: xmlHashScannerFull, data: any): any
                }
            
                xmlHashScanFull3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param f {xmlHashScannerFull} - xmlHashScannerFull
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null, f: xmlHashScannerFull, data: any): any
                }
            
                xmlHashSize: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null): number
                }
            
                xmlHashUpdateEntry: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, userdata: any, f: xmlHashDeallocator): number
                }
            
                xmlHashUpdateEntry2: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, userdata: any, f: xmlHashDeallocator): number
                }
            
                xmlHashUpdateEntry3: {
                    /** 
                    * @param table {xmlHashTablePtr | null} - xmlHashTablePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param name2 {string | null} - p.q(const).xmlChar
                    * @param name3 {string | null} - p.q(const).xmlChar
                    * @param userdata {any} - p.void
                    * @param f {xmlHashDeallocator} - xmlHashDeallocator
                    * @returns {number - int}
                    */
                    (table: xmlHashTablePtr | null, name: string | null, name2: string | null, name3: string | null, userdata: any, f: xmlHashDeallocator): number
                }
            
                xmlIOFTPClose: {
                    /** 
                    * @param context {any} - p.void
                    * @returns {number - int}
                    */
                    (context: any): number
                }
            
                xmlIOFTPMatch: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null): number
                }
            
                xmlIOFTPOpen: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (filename: string | null): any
                }
            
                xmlIOFTPRead: {
                    /** 
                    * @param context {any} - p.void
                    * @param buffer {string | null} - p.char
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (context: any, buffer: string | null, len: number): number
                }
            
                xmlIOHTTPClose: {
                    /** 
                    * @param context {any} - p.void
                    * @returns {number - int}
                    */
                    (context: any): number
                }
            
                xmlIOHTTPMatch: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null): number
                }
            
                xmlIOHTTPOpen: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (filename: string | null): any
                }
            
                xmlIOHTTPOpenW: {
                    /** 
                    * @param post_uri {string | null} - p.q(const).char
                    * @param compression {number} - int
                    * @returns {any - void}
                    */
                    (post_uri: string | null, compression: number): any
                }
            
                xmlIOHTTPRead: {
                    /** 
                    * @param context {any} - p.void
                    * @param buffer {string | null} - p.char
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (context: any, buffer: string | null, len: number): number
                }
            
                xmlIOParseDTD: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param input {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding): xmlDtdPtr
                }
            
                xmlInitCharEncodingHandlers: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlInitGlobals: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlInitMemory: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlInitNodeInfoSeq: {
                    /** 
                    * @param seq {xmlParserNodeInfoSeqPtr | null} - xmlParserNodeInfoSeqPtr
                    * @returns {any - void}
                    */
                    (seq: xmlParserNodeInfoSeqPtr | null): any
                }
            
                xmlInitParser: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlInitParserCtxt: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlInitThreads: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlInitializeCatalog: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlInitializeDict: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlInitializeGlobalState: {
                    /** 
                    * @param gs {xmlGlobalStatePtr | null} - xmlGlobalStatePtr
                    * @returns {any - void}
                    */
                    (gs: xmlGlobalStatePtr | null): any
                }
            
                xmlInitializePredefinedEntities: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlIsBaseChar: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsBlank: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsBlankNode: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @returns {number - int}
                    */
                    (node: xmlNode): number
                }
            
                xmlIsChar: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsCombining: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsDigit: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsExtender: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsID: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null): number
                }
            
                xmlIsIdeographic: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsLetter: {
                    /** 
                    * @param c {number} - int
                    * @returns {number - int}
                    */
                    (c: number): number
                }
            
                xmlIsMainThread: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlIsMixedElement: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, name: string | null): number
                }
            
                xmlIsPubidChar: {
                    /** 
                    * @param ch {number} - unsigned int
                    * @returns {number - int}
                    */
                    (ch: number): number
                }
            
                xmlIsRef: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null): number
                }
            
                xmlIsXHTML: {
                    /** 
                    * @param systemID {string | null} - p.q(const).xmlChar
                    * @param publicID {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (systemID: string | null, publicID: string | null): number
                }
            
                xmlKeepBlanksDefault: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlLastElementChild: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlLineNumbersDefault: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlLinkGetData: {
                    /** 
                    * @param lk {xmlLinkPtr | null} - xmlLinkPtr
                    * @returns {any - void}
                    */
                    (lk: xmlLinkPtr | null): any
                }
            
                xmlListAppend: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListClear: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListCopy: {
                    /** 
                    * @param cur {xmlListPtr | null} - xmlListPtr
                    * @param old {xmlListPtr | null} - q(const).xmlListPtr
                    * @returns {number - int}
                    */
                    (cur: xmlListPtr | null, old: xmlListPtr | null): number
                }
            
                xmlListCreate: {
                    /** 
                    * @param deallocator {xmlListDeallocator} - xmlListDeallocator
                    * @param compare {xmlListDataCompare} - xmlListDataCompare
                    * @returns {xmlListPtr - xmlListPtr}
                    */
                    (deallocator: xmlListDeallocator, compare: xmlListDataCompare): xmlListPtr
                }
            
                xmlListDelete: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListDup: {
                    /** 
                    * @param old {xmlListPtr | null} - q(const).xmlListPtr
                    * @returns {xmlListPtr - xmlListPtr}
                    */
                    (old: xmlListPtr | null): xmlListPtr
                }
            
                xmlListEmpty: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null): number
                }
            
                xmlListEnd: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {xmlLinkPtr - xmlLinkPtr}
                    */
                    (l: xmlListPtr | null): xmlLinkPtr
                }
            
                xmlListFront: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {xmlLinkPtr - xmlLinkPtr}
                    */
                    (l: xmlListPtr | null): xmlLinkPtr
                }
            
                xmlListInsert: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListMerge: {
                    /** 
                    * @param l1 {xmlListPtr | null} - xmlListPtr
                    * @param l2 {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l1: xmlListPtr | null, l2: xmlListPtr | null): any
                }
            
                xmlListPopBack: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListPopFront: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListPushBack: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListPushFront: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListRemoveAll: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListRemoveFirst: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListRemoveLast: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null, data: any): number
                }
            
                xmlListReverse: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListReverseSearch: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null, data: any): any
                }
            
                xmlListReverseWalk: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param walker {xmlListWalker} - xmlListWalker
                    * @param user {any} - p.void
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null, walker: xmlListWalker, user: any): any
                }
            
                xmlListSearch: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param data {any} - p.void
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null, data: any): any
                }
            
                xmlListSize: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {number - int}
                    */
                    (l: xmlListPtr | null): number
                }
            
                xmlListSort: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null): any
                }
            
                xmlListWalk: {
                    /** 
                    * @param l {xmlListPtr | null} - xmlListPtr
                    * @param walker {xmlListWalker} - xmlListWalker
                    * @param user {any} - p.void
                    * @returns {any - void}
                    */
                    (l: xmlListPtr | null, walker: xmlListWalker, user: any): any
                }
            
                xmlLoadACatalog: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlCatalogPtr - xmlCatalogPtr}
                    */
                    (filename: string | null): xmlCatalogPtr
                }
            
                xmlLoadCatalog: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null): number
                }
            
                xmlLoadCatalogs: {
                    /** 
                    * @param paths {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (paths: string | null): any
                }
            
                xmlLoadExternalEntity: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @param ID {string | null} - p.q(const).char
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (URL: string | null, ID: string | null, ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                }
            
                xmlLoadSGMLSuperCatalog: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlCatalogPtr - xmlCatalogPtr}
                    */
                    (filename: string | null): xmlCatalogPtr
                }
            
                xmlLockLibrary: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlMallocAtomicLoc: {
                    /** 
                    * @param size {number} - size_t
                    * @param file {string | null} - p.q(const).char
                    * @param line {number} - int
                    * @returns {any - void}
                    */
                    (size: number, file: string | null, line: number): any
                }
            
                xmlMallocLoc: {
                    /** 
                    * @param size {number} - size_t
                    * @param file {string | null} - p.q(const).char
                    * @param line {number} - int
                    * @returns {any - void}
                    */
                    (size: number, file: string | null, line: number): any
                }
            
                xmlMemBlocks: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlMemDisplay: {
                    /** 
                    * @param fp {undefined} - p.FILE
                    * @returns {any - void}
                    */
                    (fp: undefined): any
                }
            
                xmlMemDisplayLast: {
                    /** 
                    * @param fp {undefined} - p.FILE
                    * @param nbBytes {number} - long
                    * @returns {any - void}
                    */
                    (fp: undefined, nbBytes: number): any
                }
            
                xmlMemFree: {
                    /** 
                    * @param ptr {any} - p.void
                    * @returns {any - void}
                    */
                    (ptr: any): any
                }
            
                xmlMemGet: {
                    /** 
                    * @param freeFunc {xmlFreeFunc} - p.xmlFreeFunc
                    * @param mallocFunc {xmlMallocFunc} - p.xmlMallocFunc
                    * @param reallocFunc {xmlReallocFunc} - p.xmlReallocFunc
                    * @param strdupFunc {xmlStrdupFunc} - p.xmlStrdupFunc
                    * @returns {number - int}
                    */
                    (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                }
            
                xmlMemMalloc: {
                    /** 
                    * @param size {number} - size_t
                    * @returns {any - void}
                    */
                    (size: number): any
                }
            
                xmlMemRealloc: {
                    /** 
                    * @param ptr {any} - p.void
                    * @param size {number} - size_t
                    * @returns {any - void}
                    */
                    (ptr: any, size: number): any
                }
            
                xmlMemSetup: {
                    /** 
                    * @param freeFunc {xmlFreeFunc} - xmlFreeFunc
                    * @param mallocFunc {xmlMallocFunc} - xmlMallocFunc
                    * @param reallocFunc {xmlReallocFunc} - xmlReallocFunc
                    * @param strdupFunc {xmlStrdupFunc} - xmlStrdupFunc
                    * @returns {number - int}
                    */
                    (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                }
            
                xmlMemShow: {
                    /** 
                    * @param fp {undefined} - p.FILE
                    * @param nr {number} - int
                    * @returns {any - void}
                    */
                    (fp: undefined, nr: number): any
                }
            
                xmlMemStrdupLoc: {
                    /** 
                    * @param str {string | null} - p.q(const).char
                    * @param file {string | null} - p.q(const).char
                    * @param line {number} - int
                    * @returns {string - char}
                    */
                    (str: string | null, file: string | null, line: number): string
                }
            
                xmlMemUsed: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlMemoryDump: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlMemoryStrdup: {
                    /** 
                    * @param str {string | null} - p.q(const).char
                    * @returns {string - char}
                    */
                    (str: string | null): string
                }
            
                xmlModuleClose: {
                    /** 
                    * @param module {xmlModulePtr | null} - xmlModulePtr
                    * @returns {number - int}
                    */
                    (module: xmlModulePtr | null): number
                }
            
                xmlModuleFree: {
                    /** 
                    * @param module {xmlModulePtr | null} - xmlModulePtr
                    * @returns {number - int}
                    */
                    (module: xmlModulePtr | null): number
                }
            
                xmlModuleOpen: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlModulePtr - xmlModulePtr}
                    */
                    (filename: string | null, options: number): xmlModulePtr
                }
            
                xmlModuleSymbol: {
                    /** 
                    * @param module {xmlModulePtr | null} - xmlModulePtr
                    * @param name {string | null} - p.q(const).char
                    * @param result {any} - p.p.void
                    * @returns {number - int}
                    */
                    (module: xmlModulePtr | null, name: string | null, result: any): number
                }
            
                xmlMutexLock: {
                    /** 
                    * @param tok {xmlMutexPtr | null} - xmlMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlMutexPtr | null): any
                }
            
                xmlMutexUnlock: {
                    /** 
                    * @param tok {xmlMutexPtr | null} - xmlMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlMutexPtr | null): any
                }
            
                xmlNamespaceParseNCName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlNamespaceParseNSDef: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlNamespaceParseQName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param prefix {string | null} - p.p.xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, prefix: string | null): string
                }
            
                xmlNewAutomata: {
                    /** 
                    * @returns {xmlAutomataPtr - xmlAutomataPtr}
                    */
                    (): xmlAutomataPtr
                }
            
                xmlNewCDataBlock: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, content: string | null, len: number): xmlNodePtr
                }
            
                xmlNewCatalog: {
                    /** 
                    * @param sgml {number} - int
                    * @returns {xmlCatalogPtr - xmlCatalogPtr}
                    */
                    (sgml: number): xmlCatalogPtr
                }
            
                xmlNewCharEncodingHandler: {
                    /** 
                    * @param name {string | null} - p.q(const).char
                    * @param input {xmlCharEncodingInputFunc} - xmlCharEncodingInputFunc
                    * @param output {xmlCharEncodingOutputFunc} - xmlCharEncodingOutputFunc
                    * @returns {xmlCharEncodingHandlerPtr - xmlCharEncodingHandlerPtr}
                    */
                    (name: string | null, input: xmlCharEncodingInputFunc, output: xmlCharEncodingOutputFunc): xmlCharEncodingHandlerPtr
                }
            
                xmlNewCharRef: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null): xmlNodePtr
                }
            
                xmlNewChild: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewComment: {
                    /** 
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (content: string | null): xmlNodePtr
                }
            
                xmlNewDoc: {
                    /** 
                    * @param version {string | null} - p.q(const).xmlChar
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (version: string | null): xmlDocPtr
                }
            
                xmlNewDocComment: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, content: string | null): xmlNodePtr
                }
            
                xmlNewDocElementContent: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {xmlElementContentType} - xmlElementContentType
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, type: xmlElementContentType): xmlElementContentPtr
                }
            
                xmlNewDocFragment: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null): xmlNodePtr
                }
            
                xmlNewDocNode: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewDocNodeEatName: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewDocPI: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewDocProp: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlNewDocRawNode: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewDocText: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDoc, content: string | null): xmlNodePtr
                }
            
                xmlNewDocTextLen: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDocPtr | null, content: string | null, len: number): xmlNodePtr
                }
            
                xmlNewDtd: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, ExternalID: string | null, SystemID: string | null): xmlDtdPtr
                }
            
                xmlNewElementContent: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {xmlElementContentType} - xmlElementContentType
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (name: string | null, type: xmlElementContentType): xmlElementContentPtr
                }
            
                xmlNewEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (doc: xmlDocPtr | null, name: string | null, type: number, ExternalID: string | null, SystemID: string | null, content: string | null): xmlEntityPtr
                }
            
                xmlNewEntityInputStream: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param entity {xmlEntityPtr | null} - xmlEntityPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, entity: xmlEntityPtr | null): xmlParserInputPtr
                }
            
                xmlNewGlobalNs: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param href {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (doc: xmlDocPtr | null, href: string | null, prefix: string | null): xmlNsPtr
                }
            
                xmlNewIOInputStream: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param input {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding): xmlParserInputPtr
                }
            
                xmlNewInputFromFile: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, filename: string | null): xmlParserInputPtr
                }
            
                xmlNewInputStream: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                }
            
                xmlNewMutex: {
                    /** 
                    * @returns {xmlMutexPtr - xmlMutexPtr}
                    */
                    (): xmlMutexPtr
                }
            
                xmlNewNode: {
                    /** 
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (ns: xmlNsPtr | null, name: string | null): xmlNodePtr
                }
            
                xmlNewNodeEatName: {
                    /** 
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (ns: xmlNsPtr | null, name: string | null): xmlNodePtr
                }
            
                xmlNewNs: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param href {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (node: xmlNodePtr | null, href: string | null, prefix: string | null): xmlNsPtr
                }
            
                xmlNewNsProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlNewNsPropEatName: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlNewPI: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewParserCtxt: {
                    /** 
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (): xmlParserCtxtPtr
                }
            
                xmlNewProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNodePtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlNewRMutex: {
                    /** 
                    * @returns {xmlRMutexPtr - xmlRMutexPtr}
                    */
                    (): xmlRMutexPtr
                }
            
                xmlNewReference: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDoc, name: string | null): xmlNodePtr
                }
            
                xmlNewStringInputStream: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param buffer {string | null} - p.q(const).xmlChar
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, buffer: string | null): xmlParserInputPtr
                }
            
                xmlNewText: {
                    /** 
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (content: string | null): xmlNodePtr
                }
            
                xmlNewTextChild: {
                    /** 
                    * @param parent {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (parent: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null, content: string | null): xmlNodePtr
                }
            
                xmlNewTextLen: {
                    /** 
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (content: string | null, len: number): xmlNodePtr
                }
            
                xmlNewTextReader: {
                    /** 
                    * @param input {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param URI {string | null} - p.q(const).char
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (input: xmlParserInputBufferPtr | null, URI: string | null): xmlTextReaderPtr
                }
            
                xmlNewTextReaderFilename: {
                    /** 
                    * @param URI {string | null} - p.q(const).char
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (URI: string | null): xmlTextReaderPtr
                }
            
                xmlNewTextWriter: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (out: xmlOutputBufferPtr | null): xmlTextWriterPtr
                }
            
                xmlNewTextWriterDoc: {
                    /** 
                    * @param doc {xmlDocPtr | null} - p.xmlDocPtr
                    * @param compression {number} - int
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (doc: xmlDocPtr | null, compression: number): xmlTextWriterPtr
                }
            
                xmlNewTextWriterFilename: {
                    /** 
                    * @param uri {string | null} - p.q(const).char
                    * @param compression {number} - int
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (uri: string | null, compression: number): xmlTextWriterPtr
                }
            
                xmlNewTextWriterMemory: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param compression {number} - int
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (buf: xmlBufferPtr | null, compression: number): xmlTextWriterPtr
                }
            
                xmlNewTextWriterPushParser: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param compression {number} - int
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, compression: number): xmlTextWriterPtr
                }
            
                xmlNewTextWriterTree: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param compression {number} - int
                    * @returns {xmlTextWriterPtr - xmlTextWriterPtr}
                    */
                    (doc: xmlDocPtr | null, node: xmlNodePtr | null, compression: number): xmlTextWriterPtr
                }
            
                xmlNewValidCtxt: {
                    /** 
                    * @returns {xmlValidCtxtPtr - xmlValidCtxtPtr}
                    */
                    (): xmlValidCtxtPtr
                }
            
                xmlNextChar: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlNextElementSibling: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (node: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlNoNetExternalEntityLoader: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @param ID {string | null} - p.q(const).char
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (URL: string | null, ID: string | null, ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                }
            
                xmlNodeAddContent: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, content: string | null): any
                }
            
                xmlNodeAddContentLen: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, content: string | null, len: number): any
                }
            
                xmlNodeBufGetContent: {
                    /** 
                    * @param buffer {xmlBufferPtr | null} - xmlBufferPtr
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {number - int}
                    */
                    (buffer: xmlBufferPtr | null, cur: xmlNode): number
                }
            
                xmlNodeDump: {
                    /** 
                    * @param buf {xmlBufferPtr | null} - xmlBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param level {number} - int
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number): number
                }
            
                xmlNodeDumpOutput: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param level {number} - int
                    * @param format {number} - int
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number, encoding: string | null): any
                }
            
                xmlNodeGetBase: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDoc, cur: xmlNode): string
                }
            
                xmlNodeGetContent: {
                    /** 
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {string - xmlChar}
                    */
                    (cur: xmlNode): string
                }
            
                xmlNodeGetLang: {
                    /** 
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {string - xmlChar}
                    */
                    (cur: xmlNode): string
                }
            
                xmlNodeGetSpacePreserve: {
                    /** 
                    * @param cur {xmlNode} - p.q(const).xmlNode
                    * @returns {number - int}
                    */
                    (cur: xmlNode): number
                }
            
                xmlNodeIsText: {
                    /** 
                    * @param node {xmlNode} - p.q(const).xmlNode
                    * @returns {number - int}
                    */
                    (node: xmlNode): number
                }
            
                xmlNodeListGetRawString: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param list {xmlNode} - p.q(const).xmlNode
                    * @param inLine {number} - int
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDoc, list: xmlNode, inLine: number): string
                }
            
                xmlNodeListGetString: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param list {xmlNode} - p.q(const).xmlNode
                    * @param inLine {number} - int
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDocPtr | null, list: xmlNode, inLine: number): string
                }
            
                xmlNodeSetBase: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param uri {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, uri: string | null): any
                }
            
                xmlNodeSetContent: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, content: string | null): any
                }
            
                xmlNodeSetContentLen: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, content: string | null, len: number): any
                }
            
                xmlNodeSetLang: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param lang {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, lang: string | null): any
                }
            
                xmlNodeSetName: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, name: string | null): any
                }
            
                xmlNodeSetSpacePreserve: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @param val {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null, val: number): any
                }
            
                xmlNormalizeURIPath: {
                    /** 
                    * @param path {string | null} - p.char
                    * @returns {number - int}
                    */
                    (path: string | null): number
                }
            
                xmlNormalizeWindowsPath: {
                    /** 
                    * @param path {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (path: string | null): string
                }
            
                xmlOutputBufferClose: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @returns {number - int}
                    */
                    (out: xmlOutputBufferPtr | null): number
                }
            
                xmlOutputBufferCreateBuffer: {
                    /** 
                    * @param buffer {xmlBufferPtr | null} - xmlBufferPtr
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (buffer: xmlBufferPtr | null, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                }
            
                xmlOutputBufferCreateFd: {
                    /** 
                    * @param fd {number} - int
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (fd: number, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                }
            
                xmlOutputBufferCreateFile: {
                    /** 
                    * @param file {undefined} - p.FILE
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (file: undefined, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                }
            
                xmlOutputBufferCreateFilename: {
                    /** 
                    * @param URI {string | null} - p.q(const).char
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @param compression {number} - int
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (URI: string | null, encoder: xmlCharEncodingHandlerPtr | null, compression: number): xmlOutputBufferPtr
                }
            
                xmlOutputBufferCreateFilenameDefault: {
                    /** 
                    * @param func {xmlOutputBufferCreateFilenameFunc} - xmlOutputBufferCreateFilenameFunc
                    * @returns {xmlOutputBufferCreateFilenameFunc - xmlOutputBufferCreateFilenameFunc}
                    */
                    (func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc
                }
            
                xmlOutputBufferCreateIO: {
                    /** 
                    * @param iowrite {xmlOutputWriteCallback} - xmlOutputWriteCallback
                    * @param ioclose {xmlOutputCloseCallback} - xmlOutputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param encoder {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {xmlOutputBufferPtr - xmlOutputBufferPtr}
                    */
                    (iowrite: xmlOutputWriteCallback, ioclose: xmlOutputCloseCallback, ioctx: any, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                }
            
                xmlOutputBufferFlush: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @returns {number - int}
                    */
                    (out: xmlOutputBufferPtr | null): number
                }
            
                xmlOutputBufferGetContent: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (out: xmlOutputBufferPtr | null): string
                }
            
                xmlOutputBufferGetSize: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @returns {number - size_t}
                    */
                    (out: xmlOutputBufferPtr | null): number
                }
            
                xmlOutputBufferWrite: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param len {number} - int
                    * @param buf {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (out: xmlOutputBufferPtr | null, len: number, buf: string | null): number
                }
            
                xmlOutputBufferWriteEscape: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param escaping {xmlCharEncodingOutputFunc} - xmlCharEncodingOutputFunc
                    * @returns {number - int}
                    */
                    (out: xmlOutputBufferPtr | null, str: string | null, escaping: xmlCharEncodingOutputFunc): number
                }
            
                xmlOutputBufferWriteString: {
                    /** 
                    * @param out {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param str {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (out: xmlOutputBufferPtr | null, str: string | null): number
                }
            
                xmlParseAttValue: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseAttribute: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param value {string | null} - p.p.xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, value: string | null): string
                }
            
                xmlParseAttributeListDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseAttributeType: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param tree {xmlEnumerationPtr | null} - p.xmlEnumerationPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, tree: xmlEnumerationPtr | null): number
                }
            
                xmlParseBalancedChunkMemory: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param depth {number} - int
                    * @param string {string | null} - p.q(const).xmlChar
                    * @param lst {xmlNodePtr | null} - p.xmlNodePtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, string: string | null, lst: xmlNodePtr | null): number
                }
            
                xmlParseBalancedChunkMemoryRecover: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param depth {number} - int
                    * @param string {string | null} - p.q(const).xmlChar
                    * @param lst {xmlNodePtr | null} - p.xmlNodePtr
                    * @param recover {number} - int
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, string: string | null, lst: xmlNodePtr | null, recover: number): number
                }
            
                xmlParseCDSect: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseCatalogFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (filename: string | null): xmlDocPtr
                }
            
                xmlParseCharData: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param cdata {number} - int
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null, cdata: number): any
                }
            
                xmlParseCharEncoding: {
                    /** 
                    * @param name {string | null} - p.q(const).char
                    * @returns {xmlCharEncoding - xmlCharEncoding}
                    */
                    (name: string | null): xmlCharEncoding
                }
            
                xmlParseCharRef: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlParseChunk: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param chunk {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param terminate {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, chunk: string | null, size: number, terminate: number): number
                }
            
                xmlParseComment: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseContent: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseCtxtExternalEntity: {
                    /** 
                    * @param ctx {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param URL {string | null} - p.q(const).xmlChar
                    * @param ID {string | null} - p.q(const).xmlChar
                    * @param lst {xmlNodePtr | null} - p.xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctx: xmlParserCtxtPtr | null, URL: string | null, ID: string | null, lst: xmlNodePtr | null): number
                }
            
                xmlParseDTD: {
                    /** 
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (ExternalID: string | null, SystemID: string | null): xmlDtdPtr
                }
            
                xmlParseDefaultDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param value {string | null} - p.p.xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, value: string | null): number
                }
            
                xmlParseDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (cur: string | null): xmlDocPtr
                }
            
                xmlParseDocTypeDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseDocument: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlParseElement: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseElementChildrenContentDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param inputchk {number} - int
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, inputchk: number): xmlElementContentPtr
                }
            
                xmlParseElementContentDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param result {xmlElementContentPtr | null} - p.xmlElementContentPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, name: string | null, result: xmlElementContentPtr | null): number
                }
            
                xmlParseElementDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlParseElementMixedContentDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param inputchk {number} - int
                    * @returns {xmlElementContentPtr - xmlElementContentPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null, inputchk: number): xmlElementContentPtr
                }
            
                xmlParseEncName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseEncodingDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseEndTag: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseEntity: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (filename: string | null): xmlDocPtr
                }
            
                xmlParseEntityDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseEntityRef: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlEntityPtr
                }
            
                xmlParseEntityValue: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param orig {string | null} - p.p.xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, orig: string | null): string
                }
            
                xmlParseEnumeratedType: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param tree {xmlEnumerationPtr | null} - p.xmlEnumerationPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, tree: xmlEnumerationPtr | null): number
                }
            
                xmlParseEnumerationType: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlEnumerationPtr - xmlEnumerationPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlEnumerationPtr
                }
            
                xmlParseExtParsedEnt: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlParseExternalEntity: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param depth {number} - int
                    * @param URL {string | null} - p.q(const).xmlChar
                    * @param ID {string | null} - p.q(const).xmlChar
                    * @param lst {xmlNodePtr | null} - p.xmlNodePtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, URL: string | null, ID: string | null, lst: xmlNodePtr | null): number
                }
            
                xmlParseExternalID: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param publicID {string | null} - p.p.xmlChar
                    * @param strict {number} - int
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, publicID: string | null, strict: number): string
                }
            
                xmlParseExternalSubset: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null, ExternalID: string | null, SystemID: string | null): any
                }
            
                xmlParseFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (filename: string | null): xmlDocPtr
                }
            
                xmlParseInNodeContext: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param data {string | null} - p.q(const).char
                    * @param datalen {number} - int
                    * @param options {number} - int
                    * @param lst {xmlNodePtr | null} - p.xmlNodePtr
                    * @returns {xmlParserErrors - xmlParserErrors}
                    */
                    (node: xmlNodePtr | null, data: string | null, datalen: number, options: number, lst: xmlNodePtr | null): xmlParserErrors
                }
            
                xmlParseMarkupDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseMemory: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (buffer: string | null, size: number): xmlDocPtr
                }
            
                xmlParseMisc: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseNamespace: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseNmtoken: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseNotationDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseNotationType: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {xmlEnumerationPtr - xmlEnumerationPtr}
                    */
                    (ctxt: xmlParserCtxtPtr | null): xmlEnumerationPtr
                }
            
                xmlParsePEReference: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParsePI: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParsePITarget: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParsePubidLiteral: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseQuotedString: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseReference: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseSDDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlParseStartTag: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseSystemLiteral: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseTextDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParseURI: {
                    /** 
                    * @param str {string | null} - p.q(const).char
                    * @returns {xmlURIPtr - xmlURIPtr}
                    */
                    (str: string | null): xmlURIPtr
                }
            
                xmlParseURIRaw: {
                    /** 
                    * @param str {string | null} - p.q(const).char
                    * @param raw {number} - int
                    * @returns {xmlURIPtr - xmlURIPtr}
                    */
                    (str: string | null, raw: number): xmlURIPtr
                }
            
                xmlParseURIReference: {
                    /** 
                    * @param uri {xmlURIPtr | null} - xmlURIPtr
                    * @param str {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (uri: xmlURIPtr | null, str: string | null): number
                }
            
                xmlParseVersionInfo: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseVersionNum: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlParseXMLDecl: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParserAddNodeInfo: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param info {xmlParserNodeInfoPtr | null} - q(const).xmlParserNodeInfoPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null, info: xmlParserNodeInfoPtr | null): any
                }
            
                xmlParserError: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param msg {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {any - void}
                    */
                    (ctx: any, msg: string | null, arg2: undefined): any
                }
            
                xmlParserFindNodeInfo: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - q(const).xmlParserCtxtPtr
                    * @param node {xmlNodePtr | null} - q(const).xmlNodePtr
                    * @returns {xmlParserNodeInfo - q(const).xmlParserNodeInfo}
                    */
                    (ctxt: xmlParserCtxtPtr | null, node: xmlNodePtr | null): xmlParserNodeInfo
                }
            
                xmlParserFindNodeInfoIndex: {
                    /** 
                    * @param seq {xmlParserNodeInfoSeqPtr | null} - q(const).xmlParserNodeInfoSeqPtr
                    * @param node {xmlNodePtr | null} - q(const).xmlNodePtr
                    * @returns {number - unsigned long}
                    */
                    (seq: xmlParserNodeInfoSeqPtr | null, node: xmlNodePtr | null): number
                }
            
                xmlParserGetDirectory: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {string - char}
                    */
                    (filename: string | null): string
                }
            
                xmlParserHandlePEReference: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParserHandleReference: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlParserInputBufferCreateFd: {
                    /** 
                    * @param fd {number} - int
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (fd: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferCreateFile: {
                    /** 
                    * @param file {undefined} - p.FILE
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (file: undefined, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferCreateFilename: {
                    /** 
                    * @param URI {string | null} - p.q(const).char
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (URI: string | null, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferCreateFilenameDefault: {
                    /** 
                    * @param func {xmlParserInputBufferCreateFilenameFunc} - xmlParserInputBufferCreateFilenameFunc
                    * @returns {xmlParserInputBufferCreateFilenameFunc - xmlParserInputBufferCreateFilenameFunc}
                    */
                    (func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc
                }
            
                xmlParserInputBufferCreateIO: {
                    /** 
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferCreateMem: {
                    /** 
                    * @param mem {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (mem: string | null, size: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferCreateStatic: {
                    /** 
                    * @param mem {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (mem: string | null, size: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                }
            
                xmlParserInputBufferGrow: {
                    /** 
                    * @param in {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (inArg: xmlParserInputBufferPtr | null, len: number): number
                }
            
                xmlParserInputBufferPush: {
                    /** 
                    * @param in {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param len {number} - int
                    * @param buf {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (inArg: xmlParserInputBufferPtr | null, len: number, buf: string | null): number
                }
            
                xmlParserInputBufferRead: {
                    /** 
                    * @param in {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (inArg: xmlParserInputBufferPtr | null, len: number): number
                }
            
                xmlParserInputGrow: {
                    /** 
                    * @param in {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (inArg: xmlParserInputPtr | null, len: number): number
                }
            
                xmlParserInputRead: {
                    /** 
                    * @param in {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (inArg: xmlParserInputPtr | null, len: number): number
                }
            
                xmlParserInputShrink: {
                    /** 
                    * @param in {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {any - void}
                    */
                    (inArg: xmlParserInputPtr | null): any
                }
            
                xmlParserPrintFileContext: {
                    /** 
                    * @param input {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {any - void}
                    */
                    (input: xmlParserInputPtr | null): any
                }
            
                xmlParserPrintFileInfo: {
                    /** 
                    * @param input {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {any - void}
                    */
                    (input: xmlParserInputPtr | null): any
                }
            
                xmlParserValidityError: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param msg {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {any - void}
                    */
                    (ctx: any, msg: string | null, arg2: undefined): any
                }
            
                xmlParserValidityWarning: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param msg {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {any - void}
                    */
                    (ctx: any, msg: string | null, arg2: undefined): any
                }
            
                xmlParserWarning: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param msg {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {any - void}
                    */
                    (ctx: any, msg: string | null, arg2: undefined): any
                }
            
                xmlPathToURI: {
                    /** 
                    * @param path {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (path: string | null): string
                }
            
                xmlPatternFromRoot: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {number - int}
                    */
                    (comp: xmlPatternPtr | null): number
                }
            
                xmlPatternGetStreamCtxt: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {xmlStreamCtxtPtr - xmlStreamCtxtPtr}
                    */
                    (comp: xmlPatternPtr | null): xmlStreamCtxtPtr
                }
            
                xmlPatternMatch: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (comp: xmlPatternPtr | null, node: xmlNodePtr | null): number
                }
            
                xmlPatternMaxDepth: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {number - int}
                    */
                    (comp: xmlPatternPtr | null): number
                }
            
                xmlPatternMinDepth: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {number - int}
                    */
                    (comp: xmlPatternPtr | null): number
                }
            
                xmlPatternStreamable: {
                    /** 
                    * @param comp {xmlPatternPtr | null} - xmlPatternPtr
                    * @returns {number - int}
                    */
                    (comp: xmlPatternPtr | null): number
                }
            
                xmlPatterncompile: {
                    /** 
                    * @param pattern {string | null} - p.q(const).xmlChar
                    * @param dict {xmlDict} - p.xmlDict
                    * @param flags {number} - int
                    * @param namespaces {string | null} - p.p.q(const).xmlChar
                    * @returns {xmlPatternPtr - xmlPatternPtr}
                    */
                    (pattern: string | null, dict: xmlDict, flags: number, namespaces: string | null): xmlPatternPtr
                }
            
                xmlPedanticParserDefault: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlPopInput: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlPopInputCallbacks: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlPopOutputCallbacks: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlPreviousElementSibling: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (node: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlPrintURI: {
                    /** 
                    * @param stream {undefined} - p.FILE
                    * @param uri {xmlURIPtr | null} - xmlURIPtr
                    * @returns {any - void}
                    */
                    (stream: undefined, uri: xmlURIPtr | null): any
                }
            
                xmlPushInput: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param input {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputPtr | null): number
                }
            
                xmlRMutexLock: {
                    /** 
                    * @param tok {xmlRMutexPtr | null} - xmlRMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlRMutexPtr | null): any
                }
            
                xmlRMutexUnlock: {
                    /** 
                    * @param tok {xmlRMutexPtr | null} - xmlRMutexPtr
                    * @returns {any - void}
                    */
                    (tok: xmlRMutexPtr | null): any
                }
            
                xmlReadDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (cur: string | null, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlReadFd: {
                    /** 
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (fd: number, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlReadFile: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlReadIO: {
                    /** 
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlReadMemory: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): xmlDocPtr
                }
            
                xmlReaderForDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (cur: string | null, URL: string | null, encoding: string | null, options: number): xmlTextReaderPtr
                }
            
                xmlReaderForFd: {
                    /** 
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (fd: number, URL: string | null, encoding: string | null, options: number): xmlTextReaderPtr
                }
            
                xmlReaderForFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (filename: string | null, encoding: string | null, options: number): xmlTextReaderPtr
                }
            
                xmlReaderForIO: {
                    /** 
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): xmlTextReaderPtr
                }
            
                xmlReaderForMemory: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): xmlTextReaderPtr
                }
            
                xmlReaderNewDoc: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, cur: string | null, URL: string | null, encoding: string | null, options: number): number
                }
            
                xmlReaderNewFd: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param fd {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, fd: number, URL: string | null, encoding: string | null, options: number): number
                }
            
                xmlReaderNewFile: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, filename: string | null, encoding: string | null, options: number): number
                }
            
                xmlReaderNewIO: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param ioread {xmlInputReadCallback} - xmlInputReadCallback
                    * @param ioclose {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | null, encoding: string | null, options: number): number
                }
            
                xmlReaderNewMemory: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, buffer: string | null, size: number, URL: string | null, encoding: string | null, options: number): number
                }
            
                xmlReaderNewWalker: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlReaderWalker: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlTextReaderPtr - xmlTextReaderPtr}
                    */
                    (doc: xmlDocPtr | null): xmlTextReaderPtr
                }
            
                xmlReallocLoc: {
                    /** 
                    * @param ptr {any} - p.void
                    * @param size {number} - size_t
                    * @param file {string | null} - p.q(const).char
                    * @param line {number} - int
                    * @returns {any - void}
                    */
                    (ptr: any, size: number, file: string | null, line: number): any
                }
            
                xmlReconciliateNs: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, tree: xmlNodePtr | null): number
                }
            
                xmlRecoverDoc: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (cur: string | null): xmlDocPtr
                }
            
                xmlRecoverFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (filename: string | null): xmlDocPtr
                }
            
                xmlRecoverMemory: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (buffer: string | null, size: number): xmlDocPtr
                }
            
                xmlRegExecErrInfo: {
                    /** 
                    * @param exec {xmlRegExecCtxtPtr | null} - xmlRegExecCtxtPtr
                    * @param string {string | null} - p.p.q(const).xmlChar
                    * @param nbval {number} - p.int
                    * @param nbneg {number} - p.int
                    * @param values {string | null} - p.p.xmlChar
                    * @param terminal {number} - p.int
                    * @returns {number - int}
                    */
                    (exec: xmlRegExecCtxtPtr | null, string: string | null, nbval: number, nbneg: number, values: string | null, terminal: number): number
                }
            
                xmlRegExecNextValues: {
                    /** 
                    * @param exec {xmlRegExecCtxtPtr | null} - xmlRegExecCtxtPtr
                    * @param nbval {number} - p.int
                    * @param nbneg {number} - p.int
                    * @param values {string | null} - p.p.xmlChar
                    * @param terminal {number} - p.int
                    * @returns {number - int}
                    */
                    (exec: xmlRegExecCtxtPtr | null, nbval: number, nbneg: number, values: string | null, terminal: number): number
                }
            
                xmlRegExecPushString: {
                    /** 
                    * @param exec {xmlRegExecCtxtPtr | null} - xmlRegExecCtxtPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (exec: xmlRegExecCtxtPtr | null, value: string | null, data: any): number
                }
            
                xmlRegExecPushString2: {
                    /** 
                    * @param exec {xmlRegExecCtxtPtr | null} - xmlRegExecCtxtPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param value2 {string | null} - p.q(const).xmlChar
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (exec: xmlRegExecCtxtPtr | null, value: string | null, value2: string | null, data: any): number
                }
            
                xmlRegFreeExecCtxt: {
                    /** 
                    * @param exec {xmlRegExecCtxtPtr | null} - xmlRegExecCtxtPtr
                    * @returns {any - void}
                    */
                    (exec: xmlRegExecCtxtPtr | null): any
                }
            
                xmlRegFreeRegexp: {
                    /** 
                    * @param regexp {xmlRegexpPtr | null} - xmlRegexpPtr
                    * @returns {any - void}
                    */
                    (regexp: xmlRegexpPtr | null): any
                }
            
                xmlRegNewExecCtxt: {
                    /** 
                    * @param comp {xmlRegexpPtr | null} - xmlRegexpPtr
                    * @param callback {xmlRegExecCallbacks} - xmlRegExecCallbacks
                    * @param data {any} - p.void
                    * @returns {xmlRegExecCtxtPtr - xmlRegExecCtxtPtr}
                    */
                    (comp: xmlRegexpPtr | null, callback: xmlRegExecCallbacks, data: any): xmlRegExecCtxtPtr
                }
            
                xmlRegexpCompile: {
                    /** 
                    * @param regexp {string | null} - p.q(const).xmlChar
                    * @returns {xmlRegexpPtr - xmlRegexpPtr}
                    */
                    (regexp: string | null): xmlRegexpPtr
                }
            
                xmlRegexpExec: {
                    /** 
                    * @param comp {xmlRegexpPtr | null} - xmlRegexpPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (comp: xmlRegexpPtr | null, value: string | null): number
                }
            
                xmlRegexpIsDeterminist: {
                    /** 
                    * @param comp {xmlRegexpPtr | null} - xmlRegexpPtr
                    * @returns {number - int}
                    */
                    (comp: xmlRegexpPtr | null): number
                }
            
                xmlRegexpPrint: {
                    /** 
                    * @param output {undefined} - p.FILE
                    * @param regexp {xmlRegexpPtr | null} - xmlRegexpPtr
                    * @returns {any - void}
                    */
                    (output: undefined, regexp: xmlRegexpPtr | null): any
                }
            
                xmlRegisterCharEncodingHandler: {
                    /** 
                    * @param handler {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {any - void}
                    */
                    (handler: xmlCharEncodingHandlerPtr | null): any
                }
            
                xmlRegisterDefaultInputCallbacks: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlRegisterDefaultOutputCallbacks: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlRegisterHTTPPostCallbacks: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlRegisterInputCallbacks: {
                    /** 
                    * @param matchFunc {xmlInputMatchCallback} - xmlInputMatchCallback
                    * @param openFunc {xmlInputOpenCallback} - xmlInputOpenCallback
                    * @param readFunc {xmlInputReadCallback} - xmlInputReadCallback
                    * @param closeFunc {xmlInputCloseCallback} - xmlInputCloseCallback
                    * @returns {number - int}
                    */
                    (matchFunc: xmlInputMatchCallback, openFunc: xmlInputOpenCallback, readFunc: xmlInputReadCallback, closeFunc: xmlInputCloseCallback): number
                }
            
                xmlRegisterNodeDefault: {
                    /** 
                    * @param func {xmlRegisterNodeFunc} - xmlRegisterNodeFunc
                    * @returns {xmlRegisterNodeFunc - xmlRegisterNodeFunc}
                    */
                    (func: xmlRegisterNodeFunc): xmlRegisterNodeFunc
                }
            
                xmlRegisterOutputCallbacks: {
                    /** 
                    * @param matchFunc {xmlOutputMatchCallback} - xmlOutputMatchCallback
                    * @param openFunc {xmlOutputOpenCallback} - xmlOutputOpenCallback
                    * @param writeFunc {xmlOutputWriteCallback} - xmlOutputWriteCallback
                    * @param closeFunc {xmlOutputCloseCallback} - xmlOutputCloseCallback
                    * @returns {number - int}
                    */
                    (matchFunc: xmlOutputMatchCallback, openFunc: xmlOutputOpenCallback, writeFunc: xmlOutputWriteCallback, closeFunc: xmlOutputCloseCallback): number
                }
            
                xmlRelaxNGCleanupTypes: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlRelaxNGDump: {
                    /** 
                    * @param output {undefined} - p.FILE
                    * @param schema {xmlRelaxNGPtr | null} - xmlRelaxNGPtr
                    * @returns {any - void}
                    */
                    (output: undefined, schema: xmlRelaxNGPtr | null): any
                }
            
                xmlRelaxNGDumpTree: {
                    /** 
                    * @param output {undefined} - p.FILE
                    * @param schema {xmlRelaxNGPtr | null} - xmlRelaxNGPtr
                    * @returns {any - void}
                    */
                    (output: undefined, schema: xmlRelaxNGPtr | null): any
                }
            
                xmlRelaxNGFree: {
                    /** 
                    * @param schema {xmlRelaxNGPtr | null} - xmlRelaxNGPtr
                    * @returns {any - void}
                    */
                    (schema: xmlRelaxNGPtr | null): any
                }
            
                xmlRelaxNGFreeParserCtxt: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null): any
                }
            
                xmlRelaxNGFreeValidCtxt: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null): any
                }
            
                xmlRelaxNGGetParserErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @param err {xmlRelaxNGValidityErrorFunc} - p.xmlRelaxNGValidityErrorFunc
                    * @param warn {xmlRelaxNGValidityWarningFunc} - p.xmlRelaxNGValidityWarningFunc
                    * @param ctx {any} - p.p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): number
                }
            
                xmlRelaxNGGetValidErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param err {xmlRelaxNGValidityErrorFunc} - p.xmlRelaxNGValidityErrorFunc
                    * @param warn {xmlRelaxNGValidityWarningFunc} - p.xmlRelaxNGValidityWarningFunc
                    * @param ctx {any} - p.p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): number
                }
            
                xmlRelaxNGInitTypes: {
                    /** 
                    * @returns {number - int}
                    */
                    (): number
                }
            
                xmlRelaxNGNewDocParserCtxt: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlRelaxNGParserCtxtPtr - xmlRelaxNGParserCtxtPtr}
                    */
                    (doc: xmlDocPtr | null): xmlRelaxNGParserCtxtPtr
                }
            
                xmlRelaxNGNewMemParserCtxt: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {xmlRelaxNGParserCtxtPtr - xmlRelaxNGParserCtxtPtr}
                    */
                    (buffer: string | null, size: number): xmlRelaxNGParserCtxtPtr
                }
            
                xmlRelaxNGNewParserCtxt: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @returns {xmlRelaxNGParserCtxtPtr - xmlRelaxNGParserCtxtPtr}
                    */
                    (URL: string | null): xmlRelaxNGParserCtxtPtr
                }
            
                xmlRelaxNGNewValidCtxt: {
                    /** 
                    * @param schema {xmlRelaxNGPtr | null} - xmlRelaxNGPtr
                    * @returns {xmlRelaxNGValidCtxtPtr - xmlRelaxNGValidCtxtPtr}
                    */
                    (schema: xmlRelaxNGPtr | null): xmlRelaxNGValidCtxtPtr
                }
            
                xmlRelaxNGParse: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @returns {xmlRelaxNGPtr - xmlRelaxNGPtr}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null): xmlRelaxNGPtr
                }
            
                xmlRelaxNGSetParserErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @param err {xmlRelaxNGValidityErrorFunc} - xmlRelaxNGValidityErrorFunc
                    * @param warn {xmlRelaxNGValidityWarningFunc} - xmlRelaxNGValidityWarningFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): any
                }
            
                xmlRelaxNGSetParserStructuredErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @param serror {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                }
            
                xmlRelaxNGSetValidErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param err {xmlRelaxNGValidityErrorFunc} - xmlRelaxNGValidityErrorFunc
                    * @param warn {xmlRelaxNGValidityWarningFunc} - xmlRelaxNGValidityWarningFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): any
                }
            
                xmlRelaxNGSetValidStructuredErrors: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param serror {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                }
            
                xmlRelaxNGValidateDoc: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlRelaxNGValidateFullElement: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlRelaxNGValidatePopElement: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlRelaxNGValidatePushCData: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param data {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, data: string | null, len: number): number
                }
            
                xmlRelaxNGValidatePushElement: {
                    /** 
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlRelaxParserSetFlag: {
                    /** 
                    * @param ctxt {xmlRelaxNGParserCtxtPtr | null} - xmlRelaxNGParserCtxtPtr
                    * @param flag {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlRelaxNGParserCtxtPtr | null, flag: number): number
                }
            
                xmlRemoveID: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, attr: xmlAttrPtr | null): number
                }
            
                xmlRemoveProp: {
                    /** 
                    * @param cur {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {number - int}
                    */
                    (cur: xmlAttrPtr | null): number
                }
            
                xmlRemoveRef: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, attr: xmlAttrPtr | null): number
                }
            
                xmlReplaceNode: {
                    /** 
                    * @param old {xmlNodePtr | null} - xmlNodePtr
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (old: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlResetError: {
                    /** 
                    * @param err {xmlErrorPtr | null} - xmlErrorPtr
                    * @returns {any - void}
                    */
                    (err: xmlErrorPtr | null): any
                }
            
                xmlResetLastError: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlSAX2AttributeDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param elem {string | null} - p.q(const).xmlChar
                    * @param fullname {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param def {number} - int
                    * @param defaultValue {string | null} - p.q(const).xmlChar
                    * @param tree {xmlEnumerationPtr | null} - xmlEnumerationPtr
                    * @returns {any - void}
                    */
                    (ctx: any, elem: string | null, fullname: string | null, type: number, def: number, defaultValue: string | null, tree: xmlEnumerationPtr | null): any
                }
            
                xmlSAX2CDataBlock: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, value: string | null, len: number): any
                }
            
                xmlSAX2Characters: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param ch {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, ch: string | null, len: number): any
                }
            
                xmlSAX2Comment: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, value: string | null): any
                }
            
                xmlSAX2ElementDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, type: number, content: xmlElementContentPtr | null): any
                }
            
                xmlSAX2EndDocument: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctx: any): any
                }
            
                xmlSAX2EndElement: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null): any
                }
            
                xmlSAX2EndElementNs: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param localname {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, localname: string | null, prefix: string | null, URI: string | null): any
                }
            
                xmlSAX2EntityDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param type {number} - int
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, type: number, publicId: string | null, systemId: string | null, content: string | null): any
                }
            
                xmlSAX2ExternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, ExternalID: string | null, SystemID: string | null): any
                }
            
                xmlSAX2GetColumnNumber: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                xmlSAX2GetEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (ctx: any, name: string | null): xmlEntityPtr
                }
            
                xmlSAX2GetLineNumber: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                xmlSAX2GetParameterEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {xmlEntityPtr - xmlEntityPtr}
                    */
                    (ctx: any, name: string | null): xmlEntityPtr
                }
            
                xmlSAX2GetPublicId: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctx: any): string
                }
            
                xmlSAX2GetSystemId: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {string - q(const).xmlChar}
                    */
                    (ctx: any): string
                }
            
                xmlSAX2HasExternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                xmlSAX2HasInternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                xmlSAX2IgnorableWhitespace: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param ch {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {any - void}
                    */
                    (ctx: any, ch: string | null, len: number): any
                }
            
                xmlSAX2InitDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandler} - p.xmlSAXHandler
                    * @param warning {number} - int
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandler, warning: number): any
                }
            
                xmlSAX2InitDocbDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandler} - p.xmlSAXHandler
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandler): any
                }
            
                xmlSAX2InitHtmlDefaultSAXHandler: {
                    /** 
                    * @param hdlr {xmlSAXHandler} - p.xmlSAXHandler
                    * @returns {any - void}
                    */
                    (hdlr: xmlSAXHandler): any
                }
            
                xmlSAX2InternalSubset: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, ExternalID: string | null, SystemID: string | null): any
                }
            
                xmlSAX2IsStandalone: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {number - int}
                    */
                    (ctx: any): number
                }
            
                xmlSAX2NotationDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, publicId: string | null, systemId: string | null): any
                }
            
                xmlSAX2ProcessingInstruction: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param target {string | null} - p.q(const).xmlChar
                    * @param data {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, target: string | null, data: string | null): any
                }
            
                xmlSAX2Reference: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null): any
                }
            
                xmlSAX2ResolveEntity: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @returns {xmlParserInputPtr - xmlParserInputPtr}
                    */
                    (ctx: any, publicId: string | null, systemId: string | null): xmlParserInputPtr
                }
            
                xmlSAX2SetDocumentLocator: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param loc {xmlSAXLocatorPtr | null} - xmlSAXLocatorPtr
                    * @returns {any - void}
                    */
                    (ctx: any, loc: xmlSAXLocatorPtr | null): any
                }
            
                xmlSAX2StartDocument: {
                    /** 
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctx: any): any
                }
            
                xmlSAX2StartElement: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param fullname {string | null} - p.q(const).xmlChar
                    * @param atts {string | null} - p.p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, fullname: string | null, atts: string | null): any
                }
            
                xmlSAX2StartElementNs: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param localname {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param URI {string | null} - p.q(const).xmlChar
                    * @param nb_namespaces {number} - int
                    * @param namespaces {string | null} - p.p.q(const).xmlChar
                    * @param nb_attributes {number} - int
                    * @param nb_defaulted {number} - int
                    * @param attributes {string | null} - p.p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, localname: string | null, prefix: string | null, URI: string | null, nb_namespaces: number, namespaces: string | null, nb_attributes: number, nb_defaulted: number, attributes: string | null): any
                }
            
                xmlSAX2UnparsedEntityDecl: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param publicId {string | null} - p.q(const).xmlChar
                    * @param systemId {string | null} - p.q(const).xmlChar
                    * @param notationName {string | null} - p.q(const).xmlChar
                    * @returns {any - void}
                    */
                    (ctx: any, name: string | null, publicId: string | null, systemId: string | null, notationName: string | null): any
                }
            
                xmlSAXDefaultVersion: {
                    /** 
                    * @param version {number} - int
                    * @returns {number - int}
                    */
                    (version: number): number
                }
            
                xmlSAXParseDTD: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param ExternalID {string | null} - p.q(const).xmlChar
                    * @param SystemID {string | null} - p.q(const).xmlChar
                    * @returns {xmlDtdPtr - xmlDtdPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, ExternalID: string | null, SystemID: string | null): xmlDtdPtr
                }
            
                xmlSAXParseDoc: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param recovery {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, cur: string | null, recovery: number): xmlDocPtr
                }
            
                xmlSAXParseEntity: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param filename {string | null} - p.q(const).char
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, filename: string | null): xmlDocPtr
                }
            
                xmlSAXParseFile: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param recovery {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, filename: string | null, recovery: number): xmlDocPtr
                }
            
                xmlSAXParseFileWithData: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param recovery {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, filename: string | null, recovery: number, data: any): xmlDocPtr
                }
            
                xmlSAXParseMemory: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param recovery {number} - int
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, buffer: string | null, size: number, recovery: number): xmlDocPtr
                }
            
                xmlSAXParseMemoryWithData: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @param recovery {number} - int
                    * @param data {any} - p.void
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (sax: xmlSAXHandlerPtr | null, buffer: string | null, size: number, recovery: number, data: any): xmlDocPtr
                }
            
                xmlSAXUserParseFile: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param filename {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (sax: xmlSAXHandlerPtr | null, user_data: any, filename: string | null): number
                }
            
                xmlSAXUserParseMemory: {
                    /** 
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {number - int}
                    */
                    (sax: xmlSAXHandlerPtr | null, user_data: any, buffer: string | null, size: number): number
                }
            
                xmlSAXVersion: {
                    /** 
                    * @param hdlr {xmlSAXHandler} - p.xmlSAXHandler
                    * @param version {number} - int
                    * @returns {number - int}
                    */
                    (hdlr: xmlSAXHandler, version: number): number
                }
            
                xmlSaveClose: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSaveCtxtPtr | null): number
                }
            
                xmlSaveDoc: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - long}
                    */
                    (ctxt: xmlSaveCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlSaveFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null): number
                }
            
                xmlSaveFileEnc: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null, encoding: string | null): number
                }
            
                xmlSaveFileTo: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | null): number
                }
            
                xmlSaveFlush: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSaveCtxtPtr | null): number
                }
            
                xmlSaveFormatFile: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null, format: number): number
                }
            
                xmlSaveFormatFileEnc: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (filename: string | null, cur: xmlDocPtr | null, encoding: string | null, format: number): number
                }
            
                xmlSaveFormatFileTo: {
                    /** 
                    * @param buf {xmlOutputBufferPtr | null} - xmlOutputBufferPtr
                    * @param cur {xmlDocPtr | null} - xmlDocPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param format {number} - int
                    * @returns {number - int}
                    */
                    (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | null, format: number): number
                }
            
                xmlSaveSetAttrEscape: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @param escape {xmlCharEncodingOutputFunc} - xmlCharEncodingOutputFunc
                    * @returns {number - int}
                    */
                    (ctxt: xmlSaveCtxtPtr | null, escape: xmlCharEncodingOutputFunc): number
                }
            
                xmlSaveSetEscape: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @param escape {xmlCharEncodingOutputFunc} - xmlCharEncodingOutputFunc
                    * @returns {number - int}
                    */
                    (ctxt: xmlSaveCtxtPtr | null, escape: xmlCharEncodingOutputFunc): number
                }
            
                xmlSaveToBuffer: {
                    /** 
                    * @param buffer {xmlBufferPtr | null} - xmlBufferPtr
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlSaveCtxtPtr - xmlSaveCtxtPtr}
                    */
                    (buffer: xmlBufferPtr | null, encoding: string | null, options: number): xmlSaveCtxtPtr
                }
            
                xmlSaveToFd: {
                    /** 
                    * @param fd {number} - int
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlSaveCtxtPtr - xmlSaveCtxtPtr}
                    */
                    (fd: number, encoding: string | null, options: number): xmlSaveCtxtPtr
                }
            
                xmlSaveToFilename: {
                    /** 
                    * @param filename {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlSaveCtxtPtr - xmlSaveCtxtPtr}
                    */
                    (filename: string | null, encoding: string | null, options: number): xmlSaveCtxtPtr
                }
            
                xmlSaveToIO: {
                    /** 
                    * @param iowrite {xmlOutputWriteCallback} - xmlOutputWriteCallback
                    * @param ioclose {xmlOutputCloseCallback} - xmlOutputCloseCallback
                    * @param ioctx {any} - p.void
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {xmlSaveCtxtPtr - xmlSaveCtxtPtr}
                    */
                    (iowrite: xmlOutputWriteCallback, ioclose: xmlOutputCloseCallback, ioctx: any, encoding: string | null, options: number): xmlSaveCtxtPtr
                }
            
                xmlSaveTree: {
                    /** 
                    * @param ctxt {xmlSaveCtxtPtr | null} - xmlSaveCtxtPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - long}
                    */
                    (ctxt: xmlSaveCtxtPtr | null, node: xmlNodePtr | null): number
                }
            
                xmlSaveUri: {
                    /** 
                    * @param uri {xmlURIPtr | null} - xmlURIPtr
                    * @returns {string - xmlChar}
                    */
                    (uri: xmlURIPtr | null): string
                }
            
                xmlScanName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null): string
                }
            
                xmlSchemaCheckFacet: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param typeDecl {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (facet: xmlSchemaFacetPtr | null, typeDecl: xmlSchemaTypePtr | null, ctxt: xmlSchemaParserCtxtPtr | null, name: string | null): number
                }
            
                xmlSchemaCleanupTypes: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlSchemaCollapseString: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (value: string | null): string
                }
            
                xmlSchemaCompareValues: {
                    /** 
                    * @param x {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param y {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {number - int}
                    */
                    (x: xmlSchemaValPtr | null, y: xmlSchemaValPtr | null): number
                }
            
                xmlSchemaCompareValuesWhtsp: {
                    /** 
                    * @param x {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param xws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @param y {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param yws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @returns {number - int}
                    */
                    (x: xmlSchemaValPtr | null, xws: xmlSchemaWhitespaceValueType, y: xmlSchemaValPtr | null, yws: xmlSchemaWhitespaceValueType): number
                }
            
                xmlSchemaCopyValue: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {xmlSchemaValPtr - xmlSchemaValPtr}
                    */
                    (val: xmlSchemaValPtr | null): xmlSchemaValPtr
                }
            
                xmlSchemaDump: {
                    /** 
                    * @param output {undefined} - p.FILE
                    * @param schema {xmlSchemaPtr | null} - xmlSchemaPtr
                    * @returns {any - void}
                    */
                    (output: undefined, schema: xmlSchemaPtr | null): any
                }
            
                xmlSchemaFree: {
                    /** 
                    * @param schema {xmlSchemaPtr | null} - xmlSchemaPtr
                    * @returns {any - void}
                    */
                    (schema: xmlSchemaPtr | null): any
                }
            
                xmlSchemaFreeFacet: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @returns {any - void}
                    */
                    (facet: xmlSchemaFacetPtr | null): any
                }
            
                xmlSchemaFreeParserCtxt: {
                    /** 
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaParserCtxtPtr | null): any
                }
            
                xmlSchemaFreeType: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @returns {any - void}
                    */
                    (type: xmlSchemaTypePtr | null): any
                }
            
                xmlSchemaFreeValidCtxt: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null): any
                }
            
                xmlSchemaFreeValue: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {any - void}
                    */
                    (val: xmlSchemaValPtr | null): any
                }
            
                xmlSchemaFreeWildcard: {
                    /** 
                    * @param wildcard {xmlSchemaWildcardPtr | null} - xmlSchemaWildcardPtr
                    * @returns {any - void}
                    */
                    (wildcard: xmlSchemaWildcardPtr | null): any
                }
            
                xmlSchemaGetBuiltInListSimpleTypeItemType: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @returns {xmlSchemaTypePtr - xmlSchemaTypePtr}
                    */
                    (type: xmlSchemaTypePtr | null): xmlSchemaTypePtr
                }
            
                xmlSchemaGetBuiltInType: {
                    /** 
                    * @param type {xmlSchemaValType} - xmlSchemaValType
                    * @returns {xmlSchemaTypePtr - xmlSchemaTypePtr}
                    */
                    (type: xmlSchemaValType): xmlSchemaTypePtr
                }
            
                xmlSchemaGetCanonValue: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param retValue {string | null} - p.p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (val: xmlSchemaValPtr | null, retValue: string | null): number
                }
            
                xmlSchemaGetCanonValueWhtsp: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param retValue {string | null} - p.p.q(const).xmlChar
                    * @param ws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @returns {number - int}
                    */
                    (val: xmlSchemaValPtr | null, retValue: string | null, ws: xmlSchemaWhitespaceValueType): number
                }
            
                xmlSchemaGetFacetValueAsULong: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @returns {number - unsigned long}
                    */
                    (facet: xmlSchemaFacetPtr | null): number
                }
            
                xmlSchemaGetParserErrors: {
                    /** 
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @param err {xmlSchemaValidityErrorFunc} - p.xmlSchemaValidityErrorFunc
                    * @param warn {xmlSchemaValidityWarningFunc} - p.xmlSchemaValidityWarningFunc
                    * @param ctx {any} - p.p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaParserCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): number
                }
            
                xmlSchemaGetPredefinedType: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @returns {xmlSchemaTypePtr - xmlSchemaTypePtr}
                    */
                    (name: string | null, ns: string | null): xmlSchemaTypePtr
                }
            
                xmlSchemaGetValType: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {xmlSchemaValType - xmlSchemaValType}
                    */
                    (val: xmlSchemaValPtr | null): xmlSchemaValType
                }
            
                xmlSchemaGetValidErrors: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param err {xmlSchemaValidityErrorFunc} - p.xmlSchemaValidityErrorFunc
                    * @param warn {xmlSchemaValidityWarningFunc} - p.xmlSchemaValidityWarningFunc
                    * @param ctx {any} - p.p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): number
                }
            
                xmlSchemaInitTypes: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlSchemaIsBuiltInTypeFacet: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param facetType {number} - int
                    * @returns {number - int}
                    */
                    (type: xmlSchemaTypePtr | null, facetType: number): number
                }
            
                xmlSchemaIsValid: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null): number
                }
            
                xmlSchemaNewDocParserCtxt: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlSchemaParserCtxtPtr - xmlSchemaParserCtxtPtr}
                    */
                    (doc: xmlDocPtr | null): xmlSchemaParserCtxtPtr
                }
            
                xmlSchemaNewFacet: {
                    /** 
                    * @returns {xmlSchemaFacetPtr - xmlSchemaFacetPtr}
                    */
                    (): xmlSchemaFacetPtr
                }
            
                xmlSchemaNewMemParserCtxt: {
                    /** 
                    * @param buffer {string | null} - p.q(const).char
                    * @param size {number} - int
                    * @returns {xmlSchemaParserCtxtPtr - xmlSchemaParserCtxtPtr}
                    */
                    (buffer: string | null, size: number): xmlSchemaParserCtxtPtr
                }
            
                xmlSchemaNewNOTATIONValue: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @returns {xmlSchemaValPtr - xmlSchemaValPtr}
                    */
                    (name: string | null, ns: string | null): xmlSchemaValPtr
                }
            
                xmlSchemaNewParserCtxt: {
                    /** 
                    * @param URL {string | null} - p.q(const).char
                    * @returns {xmlSchemaParserCtxtPtr - xmlSchemaParserCtxtPtr}
                    */
                    (URL: string | null): xmlSchemaParserCtxtPtr
                }
            
                xmlSchemaNewQNameValue: {
                    /** 
                    * @param namespaceName {string | null} - p.q(const).xmlChar
                    * @param localName {string | null} - p.q(const).xmlChar
                    * @returns {xmlSchemaValPtr - xmlSchemaValPtr}
                    */
                    (namespaceName: string | null, localName: string | null): xmlSchemaValPtr
                }
            
                xmlSchemaNewStringValue: {
                    /** 
                    * @param type {xmlSchemaValType} - xmlSchemaValType
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlSchemaValPtr - xmlSchemaValPtr}
                    */
                    (type: xmlSchemaValType, value: string | null): xmlSchemaValPtr
                }
            
                xmlSchemaNewValidCtxt: {
                    /** 
                    * @param schema {xmlSchemaPtr | null} - xmlSchemaPtr
                    * @returns {xmlSchemaValidCtxtPtr - xmlSchemaValidCtxtPtr}
                    */
                    (schema: xmlSchemaPtr | null): xmlSchemaValidCtxtPtr
                }
            
                xmlSchemaParse: {
                    /** 
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @returns {xmlSchemaPtr - xmlSchemaPtr}
                    */
                    (ctxt: xmlSchemaParserCtxtPtr | null): xmlSchemaPtr
                }
            
                xmlSchemaSAXPlug: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param sax {xmlSAXHandlerPtr | null} - p.xmlSAXHandlerPtr
                    * @param user_data {any} - p.p.void
                    * @returns {xmlSchemaSAXPlugPtr - xmlSchemaSAXPlugPtr}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any): xmlSchemaSAXPlugPtr
                }
            
                xmlSchemaSAXUnplug: {
                    /** 
                    * @param plug {xmlSchemaSAXPlugPtr | null} - xmlSchemaSAXPlugPtr
                    * @returns {number - int}
                    */
                    (plug: xmlSchemaSAXPlugPtr | null): number
                }
            
                xmlSchemaSetParserErrors: {
                    /** 
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @param err {xmlSchemaValidityErrorFunc} - xmlSchemaValidityErrorFunc
                    * @param warn {xmlSchemaValidityWarningFunc} - xmlSchemaValidityWarningFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaParserCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): any
                }
            
                xmlSchemaSetParserStructuredErrors: {
                    /** 
                    * @param ctxt {xmlSchemaParserCtxtPtr | null} - xmlSchemaParserCtxtPtr
                    * @param serror {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaParserCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                }
            
                xmlSchemaSetValidErrors: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param err {xmlSchemaValidityErrorFunc} - xmlSchemaValidityErrorFunc
                    * @param warn {xmlSchemaValidityWarningFunc} - xmlSchemaValidityWarningFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): any
                }
            
                xmlSchemaSetValidOptions: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, options: number): number
                }
            
                xmlSchemaSetValidStructuredErrors: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param serror {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @param ctx {any} - p.void
                    * @returns {any - void}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                }
            
                xmlSchemaValPredefTypeNode: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - p.xmlSchemaValPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (type: xmlSchemaTypePtr | null, value: string | null, val: xmlSchemaValPtr | null, node: xmlNodePtr | null): number
                }
            
                xmlSchemaValPredefTypeNodeNoNorm: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - p.xmlSchemaValPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (type: xmlSchemaTypePtr | null, value: string | null, val: xmlSchemaValPtr | null, node: xmlNodePtr | null): number
                }
            
                xmlSchemaValidCtxtGetOptions: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null): number
                }
            
                xmlSchemaValidCtxtGetParserCtxt: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @returns {xmlParserCtxtPtr - xmlParserCtxtPtr}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null): xmlParserCtxtPtr
                }
            
                xmlSchemaValidateDoc: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param instance {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, instance: xmlDocPtr | null): number
                }
            
                xmlSchemaValidateFacet: {
                    /** 
                    * @param base {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {number - int}
                    */
                    (base: xmlSchemaTypePtr | null, facet: xmlSchemaFacetPtr | null, value: string | null, val: xmlSchemaValPtr | null): number
                }
            
                xmlSchemaValidateFacetWhtsp: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param fws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @param valType {xmlSchemaValType} - xmlSchemaValType
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param ws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @returns {number - int}
                    */
                    (facet: xmlSchemaFacetPtr | null, fws: xmlSchemaWhitespaceValueType, valType: xmlSchemaValType, value: string | null, val: xmlSchemaValPtr | null, ws: xmlSchemaWhitespaceValueType): number
                }
            
                xmlSchemaValidateFile: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param filename {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, filename: string | null, options: number): number
                }
            
                xmlSchemaValidateLengthFacet: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param length {number} - p.unsigned long
                    * @returns {number - int}
                    */
                    (type: xmlSchemaTypePtr | null, facet: xmlSchemaFacetPtr | null, value: string | null, val: xmlSchemaValPtr | null, length: number): number
                }
            
                xmlSchemaValidateLengthFacetWhtsp: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param valType {xmlSchemaValType} - xmlSchemaValType
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param length {number} - p.unsigned long
                    * @param ws {xmlSchemaWhitespaceValueType} - xmlSchemaWhitespaceValueType
                    * @returns {number - int}
                    */
                    (facet: xmlSchemaFacetPtr | null, valType: xmlSchemaValType, value: string | null, val: xmlSchemaValPtr | null, length: number, ws: xmlSchemaWhitespaceValueType): number
                }
            
                xmlSchemaValidateListSimpleTypeFacet: {
                    /** 
                    * @param facet {xmlSchemaFacetPtr | null} - xmlSchemaFacetPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param actualLen {number} - unsigned long
                    * @param expectedLen {number} - p.unsigned long
                    * @returns {number - int}
                    */
                    (facet: xmlSchemaFacetPtr | null, value: string | null, actualLen: number, expectedLen: number): number
                }
            
                xmlSchemaValidateOneElement: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlSchemaValidatePredefinedType: {
                    /** 
                    * @param type {xmlSchemaTypePtr | null} - xmlSchemaTypePtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param val {xmlSchemaValPtr | null} - p.xmlSchemaValPtr
                    * @returns {number - int}
                    */
                    (type: xmlSchemaTypePtr | null, value: string | null, val: xmlSchemaValPtr | null): number
                }
            
                xmlSchemaValidateSetFilename: {
                    /** 
                    * @param vctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param filename {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (vctxt: xmlSchemaValidCtxtPtr | null, filename: string | null): any
                }
            
                xmlSchemaValidateSetLocator: {
                    /** 
                    * @param vctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param f {xmlSchemaValidityLocatorFunc} - xmlSchemaValidityLocatorFunc
                    * @param ctxt {any} - p.void
                    * @returns {any - void}
                    */
                    (vctxt: xmlSchemaValidCtxtPtr | null, f: xmlSchemaValidityLocatorFunc, ctxt: any): any
                }
            
                xmlSchemaValidateStream: {
                    /** 
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param input {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @param sax {xmlSAXHandlerPtr | null} - xmlSAXHandlerPtr
                    * @param user_data {any} - p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlSchemaValidCtxtPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding, sax: xmlSAXHandlerPtr | null, user_data: any): number
                }
            
                xmlSchemaValueAppend: {
                    /** 
                    * @param prev {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @param cur {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {number - int}
                    */
                    (prev: xmlSchemaValPtr | null, cur: xmlSchemaValPtr | null): number
                }
            
                xmlSchemaValueGetAsBoolean: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {number - int}
                    */
                    (val: xmlSchemaValPtr | null): number
                }
            
                xmlSchemaValueGetAsString: {
                    /** 
                    * @param val {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (val: xmlSchemaValPtr | null): string
                }
            
                xmlSchemaValueGetNext: {
                    /** 
                    * @param cur {xmlSchemaValPtr | null} - xmlSchemaValPtr
                    * @returns {xmlSchemaValPtr - xmlSchemaValPtr}
                    */
                    (cur: xmlSchemaValPtr | null): xmlSchemaValPtr
                }
            
                xmlSchemaWhiteSpaceReplace: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (value: string | null): string
                }
            
                xmlSearchNs: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param nameSpace {string | null} - p.q(const).xmlChar
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (doc: xmlDocPtr | null, node: xmlNodePtr | null, nameSpace: string | null): xmlNsPtr
                }
            
                xmlSearchNsByHref: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param href {string | null} - p.q(const).xmlChar
                    * @returns {xmlNsPtr - xmlNsPtr}
                    */
                    (doc: xmlDocPtr | null, node: xmlNodePtr | null, href: string | null): xmlNsPtr
                }
            
                xmlSetBufferAllocationScheme: {
                    /** 
                    * @param scheme {xmlBufferAllocationScheme} - xmlBufferAllocationScheme
                    * @returns {any - void}
                    */
                    (scheme: xmlBufferAllocationScheme): any
                }
            
                xmlSetCompressMode: {
                    /** 
                    * @param mode {number} - int
                    * @returns {any - void}
                    */
                    (mode: number): any
                }
            
                xmlSetDocCompressMode: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param mode {number} - int
                    * @returns {any - void}
                    */
                    (doc: xmlDocPtr | null, mode: number): any
                }
            
                xmlSetEntityReferenceFunc: {
                    /** 
                    * @param func {xmlEntityReferenceFunc} - xmlEntityReferenceFunc
                    * @returns {any - void}
                    */
                    (func: xmlEntityReferenceFunc): any
                }
            
                xmlSetExternalEntityLoader: {
                    /** 
                    * @param f {xmlExternalEntityLoader} - xmlExternalEntityLoader
                    * @returns {any - void}
                    */
                    (f: xmlExternalEntityLoader): any
                }
            
                xmlSetFeature: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param name {string | null} - p.q(const).char
                    * @param value {any} - p.void
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, name: string | null, value: any): number
                }
            
                xmlSetGenericErrorFunc: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param handler {xmlGenericErrorFunc} - xmlGenericErrorFunc
                    * @returns {any - void}
                    */
                    (ctx: any, handler: xmlGenericErrorFunc): any
                }
            
                xmlSetListDoc: {
                    /** 
                    * @param list {xmlNodePtr | null} - xmlNodePtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {any - void}
                    */
                    (list: xmlNodePtr | null, doc: xmlDocPtr | null): any
                }
            
                xmlSetNs: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @returns {any - void}
                    */
                    (node: xmlNodePtr | null, ns: xmlNsPtr | null): any
                }
            
                xmlSetNsProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlSetProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlAttrPtr - xmlAttrPtr}
                    */
                    (node: xmlNodePtr | null, name: string | null, value: string | null): xmlAttrPtr
                }
            
                xmlSetStructuredErrorFunc: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param handler {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @returns {any - void}
                    */
                    (ctx: any, handler: xmlStructuredErrorFunc): any
                }
            
                xmlSetTreeDoc: {
                    /** 
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {any - void}
                    */
                    (tree: xmlNodePtr | null, doc: xmlDocPtr | null): any
                }
            
                xmlSetupParserForBuffer: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param buffer {string | null} - p.q(const).xmlChar
                    * @param filename {string | null} - p.q(const).char
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null, buffer: string | null, filename: string | null): any
                }
            
                xmlSkipBlankChars: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null): number
                }
            
                xmlSnprintfElementContent: {
                    /** 
                    * @param buf {string | null} - p.char
                    * @param size {number} - int
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @param englob {number} - int
                    * @returns {any - void}
                    */
                    (buf: string | null, size: number, content: xmlElementContentPtr | null, englob: number): any
                }
            
                xmlSplitQName: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.p.xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, name: string | null, prefix: string | null): string
                }
            
                xmlSplitQName2: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param prefix {string | null} - p.p.xmlChar
                    * @returns {string - xmlChar}
                    */
                    (name: string | null, prefix: string | null): string
                }
            
                xmlSplitQName3: {
                    /** 
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param len {number} - p.int
                    * @returns {string - q(const).xmlChar}
                    */
                    (name: string | null, len: number): string
                }
            
                xmlSprintfElementContent: {
                    /** 
                    * @param buf {string | null} - p.char
                    * @param content {xmlElementContentPtr | null} - xmlElementContentPtr
                    * @param englob {number} - int
                    * @returns {any - void}
                    */
                    (buf: string | null, content: xmlElementContentPtr | null, englob: number): any
                }
            
                xmlStopParser: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlParserCtxtPtr | null): any
                }
            
                xmlStrEqual: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (str1: string | null, str2: string | null): number
                }
            
                xmlStrPrintf: {
                    /** 
                    * @param buf {string | null} - p.xmlChar
                    * @param len {number} - int
                    * @param msg {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (buf: string | null, len: number, msg: string | null, arg3: undefined): number
                }
            
                xmlStrQEqual: {
                    /** 
                    * @param pref {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (pref: string | null, name: string | null, str: string | null): number
                }
            
                xmlStrcasecmp: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (str1: string | null, str2: string | null): number
                }
            
                xmlStrcasestr: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param val {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (str: string | null, val: string | null): string
                }
            
                xmlStrcat: {
                    /** 
                    * @param cur {string | null} - p.xmlChar
                    * @param add {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null, add: string | null): string
                }
            
                xmlStrchr: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param val {string | null} - xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (str: string | null, val: string | null): string
                }
            
                xmlStrcmp: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (str1: string | null, str2: string | null): number
                }
            
                xmlStrdup: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null): string
                }
            
                xmlStreamPop: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @returns {number - int}
                    */
                    (stream: xmlStreamCtxtPtr | null): number
                }
            
                xmlStreamPush: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (stream: xmlStreamCtxtPtr | null, name: string | null, ns: string | null): number
                }
            
                xmlStreamPushAttr: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (stream: xmlStreamCtxtPtr | null, name: string | null, ns: string | null): number
                }
            
                xmlStreamPushNode: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param ns {string | null} - p.q(const).xmlChar
                    * @param nodeType {number} - int
                    * @returns {number - int}
                    */
                    (stream: xmlStreamCtxtPtr | null, name: string | null, ns: string | null, nodeType: number): number
                }
            
                xmlStreamWantsAnyNode: {
                    /** 
                    * @param stream {xmlStreamCtxtPtr | null} - xmlStreamCtxtPtr
                    * @returns {number - int}
                    */
                    (stream: xmlStreamCtxtPtr | null): number
                }
            
                xmlStringCurrentChar: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param len {number} - p.int
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, cur: string | null, len: number): number
                }
            
                xmlStringDecodeEntities: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param what {number} - int
                    * @param end {string | null} - xmlChar
                    * @param end2 {string | null} - xmlChar
                    * @param end3 {string | null} - xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, str: string | null, what: number, end: string | null, end2: string | null, end3: string | null): string
                }
            
                xmlStringGetNodeList: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDoc, value: string | null): xmlNodePtr
                }
            
                xmlStringLenDecodeEntities: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @param what {number} - int
                    * @param end {string | null} - xmlChar
                    * @param end2 {string | null} - xmlChar
                    * @param end3 {string | null} - xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlParserCtxtPtr | null, str: string | null, len: number, what: number, end: string | null, end2: string | null, end3: string | null): string
                }
            
                xmlStringLenGetNodeList: {
                    /** 
                    * @param doc {xmlDoc} - p.q(const).xmlDoc
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (doc: xmlDoc, value: string | null, len: number): xmlNodePtr
                }
            
                xmlStrlen: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (str: string | null): number
                }
            
                xmlStrncasecmp: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (str1: string | null, str2: string | null, len: number): number
                }
            
                xmlStrncat: {
                    /** 
                    * @param cur {string | null} - p.xmlChar
                    * @param add {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null, add: string | null, len: number): string
                }
            
                xmlStrncatNew: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (str1: string | null, str2: string | null, len: number): string
                }
            
                xmlStrncmp: {
                    /** 
                    * @param str1 {string | null} - p.q(const).xmlChar
                    * @param str2 {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (str1: string | null, str2: string | null, len: number): number
                }
            
                xmlStrndup: {
                    /** 
                    * @param cur {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (cur: string | null, len: number): string
                }
            
                xmlStrstr: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param val {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (str: string | null, val: string | null): string
                }
            
                xmlStrsub: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param start {number} - int
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (str: string | null, start: number, len: number): string
                }
            
                xmlSubstituteEntitiesDefault: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlSwitchEncoding: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param enc {xmlCharEncoding} - xmlCharEncoding
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, enc: xmlCharEncoding): number
                }
            
                xmlSwitchInputEncoding: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param input {xmlParserInputPtr | null} - xmlParserInputPtr
                    * @param handler {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputPtr | null, handler: xmlCharEncodingHandlerPtr | null): number
                }
            
                xmlSwitchToEncoding: {
                    /** 
                    * @param ctxt {xmlParserCtxtPtr | null} - xmlParserCtxtPtr
                    * @param handler {xmlCharEncodingHandlerPtr | null} - xmlCharEncodingHandlerPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlParserCtxtPtr | null, handler: xmlCharEncodingHandlerPtr | null): number
                }
            
                xmlTextConcat: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (node: xmlNodePtr | null, content: string | null, len: number): number
                }
            
                xmlTextMerge: {
                    /** 
                    * @param first {xmlNodePtr | null} - xmlNodePtr
                    * @param second {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (first: xmlNodePtr | null, second: xmlNodePtr | null): xmlNodePtr
                }
            
                xmlTextReaderAttributeCount: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderBaseUri: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderByteConsumed: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - long}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderClose: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderConstBaseUri: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstEncoding: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstLocalName: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstName: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstNamespaceUri: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstPrefix: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstString: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null, str: string | null): string
                }
            
                xmlTextReaderConstValue: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstXmlLang: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderConstXmlVersion: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - q(const).xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderCurrentDoc: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {xmlDocPtr - xmlDocPtr}
                    */
                    (reader: xmlTextReaderPtr | null): xmlDocPtr
                }
            
                xmlTextReaderCurrentNode: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (reader: xmlTextReaderPtr | null): xmlNodePtr
                }
            
                xmlTextReaderDepth: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderExpand: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (reader: xmlTextReaderPtr | null): xmlNodePtr
                }
            
                xmlTextReaderGetAttribute: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null, name: string | null): string
                }
            
                xmlTextReaderGetAttributeNo: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param no {number} - int
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null, no: number): string
                }
            
                xmlTextReaderGetAttributeNs: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param localName {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null, localName: string | null, namespaceURI: string | null): string
                }
            
                xmlTextReaderGetErrorHandler: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param f {xmlTextReaderErrorFunc} - p.xmlTextReaderErrorFunc
                    * @param arg {any} - p.p.void
                    * @returns {any - void}
                    */
                    (reader: xmlTextReaderPtr | null, f: xmlTextReaderErrorFunc, arg: any): any
                }
            
                xmlTextReaderGetParserColumnNumber: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderGetParserLineNumber: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderGetParserProp: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param prop {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, prop: number): number
                }
            
                xmlTextReaderGetRemainder: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {xmlParserInputBufferPtr - xmlParserInputBufferPtr}
                    */
                    (reader: xmlTextReaderPtr | null): xmlParserInputBufferPtr
                }
            
                xmlTextReaderHasAttributes: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderHasValue: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderIsDefault: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderIsEmptyElement: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderIsNamespaceDecl: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderIsValid: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderLocalName: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderLocatorBaseURI: {
                    /** 
                    * @param locator {xmlTextReaderLocatorPtr | null} - xmlTextReaderLocatorPtr
                    * @returns {string - xmlChar}
                    */
                    (locator: xmlTextReaderLocatorPtr | null): string
                }
            
                xmlTextReaderLocatorLineNumber: {
                    /** 
                    * @param locator {xmlTextReaderLocatorPtr | null} - xmlTextReaderLocatorPtr
                    * @returns {number - int}
                    */
                    (locator: xmlTextReaderLocatorPtr | null): number
                }
            
                xmlTextReaderLookupNamespace: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null, prefix: string | null): string
                }
            
                xmlTextReaderMoveToAttribute: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, name: string | null): number
                }
            
                xmlTextReaderMoveToAttributeNo: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param no {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, no: number): number
                }
            
                xmlTextReaderMoveToAttributeNs: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param localName {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, localName: string | null, namespaceURI: string | null): number
                }
            
                xmlTextReaderMoveToElement: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderMoveToFirstAttribute: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderMoveToNextAttribute: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderName: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderNamespaceUri: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderNext: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderNextSibling: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderNodeType: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderNormalization: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderPrefix: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderPreserve: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (reader: xmlTextReaderPtr | null): xmlNodePtr
                }
            
                xmlTextReaderPreservePattern: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param pattern {string | null} - p.q(const).xmlChar
                    * @param namespaces {string | null} - p.p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, pattern: string | null, namespaces: string | null): number
                }
            
                xmlTextReaderQuoteChar: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderRead: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderReadAttributeValue: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderReadInnerXml: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderReadOuterXml: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderReadState: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderReadString: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderRelaxNGSetSchema: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param schema {xmlRelaxNGPtr | null} - xmlRelaxNGPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, schema: xmlRelaxNGPtr | null): number
                }
            
                xmlTextReaderRelaxNGValidate: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param rng {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, rng: string | null): number
                }
            
                xmlTextReaderRelaxNGValidateCtxt: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param ctxt {xmlRelaxNGValidCtxtPtr | null} - xmlRelaxNGValidCtxtPtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, ctxt: xmlRelaxNGValidCtxtPtr | null, options: number): number
                }
            
                xmlTextReaderSchemaValidate: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param xsd {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, xsd: string | null): number
                }
            
                xmlTextReaderSchemaValidateCtxt: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param ctxt {xmlSchemaValidCtxtPtr | null} - xmlSchemaValidCtxtPtr
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, ctxt: xmlSchemaValidCtxtPtr | null, options: number): number
                }
            
                xmlTextReaderSetErrorHandler: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param f {xmlTextReaderErrorFunc} - xmlTextReaderErrorFunc
                    * @param arg {any} - p.void
                    * @returns {any - void}
                    */
                    (reader: xmlTextReaderPtr | null, f: xmlTextReaderErrorFunc, arg: any): any
                }
            
                xmlTextReaderSetParserProp: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param prop {number} - int
                    * @param value {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, prop: number, value: number): number
                }
            
                xmlTextReaderSetSchema: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param schema {xmlSchemaPtr | null} - xmlSchemaPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, schema: xmlSchemaPtr | null): number
                }
            
                xmlTextReaderSetStructuredErrorHandler: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param f {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @param arg {any} - p.void
                    * @returns {any - void}
                    */
                    (reader: xmlTextReaderPtr | null, f: xmlStructuredErrorFunc, arg: any): any
                }
            
                xmlTextReaderSetup: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @param input {xmlParserInputBufferPtr | null} - xmlParserInputBufferPtr
                    * @param URL {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null, input: xmlParserInputBufferPtr | null, URL: string | null, encoding: string | null, options: number): number
                }
            
                xmlTextReaderStandalone: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {number - int}
                    */
                    (reader: xmlTextReaderPtr | null): number
                }
            
                xmlTextReaderValue: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextReaderXmlLang: {
                    /** 
                    * @param reader {xmlTextReaderPtr | null} - xmlTextReaderPtr
                    * @returns {string - xmlChar}
                    */
                    (reader: xmlTextReaderPtr | null): string
                }
            
                xmlTextWriterEndAttribute: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndCDATA: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndComment: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndDTD: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndDTDAttlist: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndDTDElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndDTDEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndDocument: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterEndPI: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterFlush: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterFullEndElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterSetIndent: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param indent {number} - int
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, indent: number): number
                }
            
                xmlTextWriterSetIndentString: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, str: string | null): number
                }
            
                xmlTextWriterSetQuoteChar: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param quotechar {string | null} - xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, quotechar: string | null): number
                }
            
                xmlTextWriterStartAttribute: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null): number
                }
            
                xmlTextWriterStartAttributeNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null): number
                }
            
                xmlTextWriterStartCDATA: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterStartComment: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null): number
                }
            
                xmlTextWriterStartDTD: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, pubid: string | null, sysid: string | null): number
                }
            
                xmlTextWriterStartDTDAttlist: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null): number
                }
            
                xmlTextWriterStartDTDElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null): number
                }
            
                xmlTextWriterStartDTDEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pe {number} - int
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pe: number, name: string | null): number
                }
            
                xmlTextWriterStartDocument: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param version {string | null} - p.q(const).char
                    * @param encoding {string | null} - p.q(const).char
                    * @param standalone {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, version: string | null, encoding: string | null, standalone: string | null): number
                }
            
                xmlTextWriterStartElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null): number
                }
            
                xmlTextWriterStartElementNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null): number
                }
            
                xmlTextWriterStartPI: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param target {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, target: string | null): number
                }
            
                xmlTextWriterWriteAttribute: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteAttributeNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteBase64: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param data {string | null} - p.q(const).char
                    * @param start {number} - int
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, data: string | null, start: number, len: number): number
                }
            
                xmlTextWriterWriteBinHex: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param data {string | null} - p.q(const).char
                    * @param start {number} - int
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, data: string | null, start: number, len: number): number
                }
            
                xmlTextWriterWriteCDATA: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, content: string | null): number
                }
            
                xmlTextWriterWriteComment: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, content: string | null): number
                }
            
                xmlTextWriterWriteDTD: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @param subset {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, pubid: string | null, sysid: string | null, subset: string | null): number
                }
            
                xmlTextWriterWriteDTDAttlist: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteDTDElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteDTDEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pe {number} - int
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @param ndataid {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pe: number, name: string | null, pubid: string | null, sysid: string | null, ndataid: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteDTDExternalEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pe {number} - int
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @param ndataid {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pe: number, name: string | null, pubid: string | null, sysid: string | null, ndataid: string | null): number
                }
            
                xmlTextWriterWriteDTDExternalEntityContents: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @param ndataid {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pubid: string | null, sysid: string | null, ndataid: string | null): number
                }
            
                xmlTextWriterWriteDTDInternalEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pe {number} - int
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pe: number, name: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteDTDNotation: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, pubid: string | null, sysid: string | null): number
                }
            
                xmlTextWriterWriteElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteElementNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteFormatAttribute: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, format: string | null, arg3: undefined): number
                }
            
                xmlTextWriterWriteFormatAttributeNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg5 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null, format: string | null, arg5: undefined): number
                }
            
                xmlTextWriterWriteFormatCDATA: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param format {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, format: string | null, arg2: undefined): number
                }
            
                xmlTextWriterWriteFormatComment: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param format {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, format: string | null, arg2: undefined): number
                }
            
                xmlTextWriterWriteFormatDTD: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param pubid {string | null} - p.q(const).xmlChar
                    * @param sysid {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg5 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, pubid: string | null, sysid: string | null, format: string | null, arg5: undefined): number
                }
            
                xmlTextWriterWriteFormatDTDAttlist: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, format: string | null, arg3: undefined): number
                }
            
                xmlTextWriterWriteFormatDTDElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, format: string | null, arg3: undefined): number
                }
            
                xmlTextWriterWriteFormatDTDInternalEntity: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param pe {number} - int
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg4 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, pe: number, name: string | null, format: string | null, arg4: undefined): number
                }
            
                xmlTextWriterWriteFormatElement: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, name: string | null, format: string | null, arg3: undefined): number
                }
            
                xmlTextWriterWriteFormatElementNS: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param namespaceURI {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg5 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, prefix: string | null, name: string | null, namespaceURI: string | null, format: string | null, arg5: undefined): number
                }
            
                xmlTextWriterWriteFormatPI: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param target {string | null} - p.q(const).xmlChar
                    * @param format {string | null} - p.q(const).char
                    * @param arg3 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, target: string | null, format: string | null, arg3: undefined): number
                }
            
                xmlTextWriterWriteFormatRaw: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param format {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, format: string | null, arg2: undefined): number
                }
            
                xmlTextWriterWriteFormatString: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param format {string | null} - p.q(const).char
                    * @param arg2 {undefined} - v(...)
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, format: string | null, arg2: undefined): number
                }
            
                xmlTextWriterWritePI: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param target {string | null} - p.q(const).xmlChar
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, target: string | null, content: string | null): number
                }
            
                xmlTextWriterWriteRaw: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, content: string | null): number
                }
            
                xmlTextWriterWriteRawLen: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, content: string | null, len: number): number
                }
            
                xmlTextWriterWriteString: {
                    /** 
                    * @param writer {xmlTextWriterPtr | null} - xmlTextWriterPtr
                    * @param content {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (writer: xmlTextWriterPtr | null, content: string | null): number
                }
            
                xmlThrDefBufferAllocScheme: {
                    /** 
                    * @param v {xmlBufferAllocationScheme} - xmlBufferAllocationScheme
                    * @returns {xmlBufferAllocationScheme - xmlBufferAllocationScheme}
                    */
                    (v: xmlBufferAllocationScheme): xmlBufferAllocationScheme
                }
            
                xmlThrDefDefaultBufferSize: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefDeregisterNodeDefault: {
                    /** 
                    * @param func {xmlDeregisterNodeFunc} - xmlDeregisterNodeFunc
                    * @returns {xmlDeregisterNodeFunc - xmlDeregisterNodeFunc}
                    */
                    (func: xmlDeregisterNodeFunc): xmlDeregisterNodeFunc
                }
            
                xmlThrDefDoValidityCheckingDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefGetWarningsDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefIndentTreeOutput: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefKeepBlanksDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefLineNumbersDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefLoadExtDtdDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefOutputBufferCreateFilenameDefault: {
                    /** 
                    * @param func {xmlOutputBufferCreateFilenameFunc} - xmlOutputBufferCreateFilenameFunc
                    * @returns {xmlOutputBufferCreateFilenameFunc - xmlOutputBufferCreateFilenameFunc}
                    */
                    (func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc
                }
            
                xmlThrDefParserDebugEntities: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefParserInputBufferCreateFilenameDefault: {
                    /** 
                    * @param func {xmlParserInputBufferCreateFilenameFunc} - xmlParserInputBufferCreateFilenameFunc
                    * @returns {xmlParserInputBufferCreateFilenameFunc - xmlParserInputBufferCreateFilenameFunc}
                    */
                    (func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc
                }
            
                xmlThrDefPedanticParserDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefRegisterNodeDefault: {
                    /** 
                    * @param func {xmlRegisterNodeFunc} - xmlRegisterNodeFunc
                    * @returns {xmlRegisterNodeFunc - xmlRegisterNodeFunc}
                    */
                    (func: xmlRegisterNodeFunc): xmlRegisterNodeFunc
                }
            
                xmlThrDefSaveNoEmptyTags: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefSetGenericErrorFunc: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param handler {xmlGenericErrorFunc} - xmlGenericErrorFunc
                    * @returns {any - void}
                    */
                    (ctx: any, handler: xmlGenericErrorFunc): any
                }
            
                xmlThrDefSetStructuredErrorFunc: {
                    /** 
                    * @param ctx {any} - p.void
                    * @param handler {xmlStructuredErrorFunc} - xmlStructuredErrorFunc
                    * @returns {any - void}
                    */
                    (ctx: any, handler: xmlStructuredErrorFunc): any
                }
            
                xmlThrDefSubstituteEntitiesDefaultValue: {
                    /** 
                    * @param v {number} - int
                    * @returns {number - int}
                    */
                    (v: number): number
                }
            
                xmlThrDefTreeIndentString: {
                    /** 
                    * @param v {string | null} - p.q(const).char
                    * @returns {string - q(const).char}
                    */
                    (v: string | null): string
                }
            
                xmlUCSIsAegeanNumbers: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsAlphabeticPresentationForms: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsArabic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsArabicPresentationFormsA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsArabicPresentationFormsB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsArmenian: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsArrows: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBasicLatin: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBengali: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBlock: {
                    /** 
                    * @param code {number} - int
                    * @param block {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (code: number, block: string | null): number
                }
            
                xmlUCSIsBlockElements: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBopomofo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBopomofoExtended: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBoxDrawing: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBraillePatterns: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsBuhid: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsByzantineMusicalSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKCompatibility: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKCompatibilityForms: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKCompatibilityIdeographs: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKCompatibilityIdeographsSupplement: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKRadicalsSupplement: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKSymbolsandPunctuation: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKUnifiedIdeographs: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKUnifiedIdeographsExtensionA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCJKUnifiedIdeographsExtensionB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCat: {
                    /** 
                    * @param code {number} - int
                    * @param cat {string | null} - p.q(const).char
                    * @returns {number - int}
                    */
                    (code: number, cat: string | null): number
                }
            
                xmlUCSIsCatC: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatCc: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatCf: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatCo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatCs: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatL: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatLl: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatLm: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatLo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatLt: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatLu: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatM: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatMc: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatMe: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatMn: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatN: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatNd: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatNl: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatNo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatP: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPc: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPd: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPe: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPf: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPi: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatPs: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatS: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatSc: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatSk: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatSm: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatSo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatZ: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatZl: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatZp: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCatZs: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCherokee: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCombiningDiacriticalMarks: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCombiningDiacriticalMarksforSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCombiningHalfMarks: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCombiningMarksforSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsControlPictures: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCurrencySymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCypriotSyllabary: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCyrillic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsCyrillicSupplement: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsDeseret: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsDevanagari: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsDingbats: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsEnclosedAlphanumerics: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsEnclosedCJKLettersandMonths: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsEthiopic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGeneralPunctuation: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGeometricShapes: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGeorgian: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGothic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGreek: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGreekExtended: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGreekandCoptic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGujarati: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsGurmukhi: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHalfwidthandFullwidthForms: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHangulCompatibilityJamo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHangulJamo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHangulSyllables: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHanunoo: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHebrew: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHighPrivateUseSurrogates: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHighSurrogates: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsHiragana: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsIPAExtensions: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsIdeographicDescriptionCharacters: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKanbun: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKangxiRadicals: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKannada: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKatakana: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKatakanaPhoneticExtensions: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKhmer: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsKhmerSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLao: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLatin1Supplement: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLatinExtendedA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLatinExtendedAdditional: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLatinExtendedB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLetterlikeSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLimbu: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLinearBIdeograms: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLinearBSyllabary: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsLowSurrogates: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMalayalam: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMathematicalAlphanumericSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMathematicalOperators: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMiscellaneousMathematicalSymbolsA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMiscellaneousMathematicalSymbolsB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMiscellaneousSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMiscellaneousSymbolsandArrows: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMiscellaneousTechnical: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMongolian: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMusicalSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsMyanmar: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsNumberForms: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsOgham: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsOldItalic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsOpticalCharacterRecognition: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsOriya: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsOsmanya: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsPhoneticExtensions: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsPrivateUse: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsPrivateUseArea: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsRunic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsShavian: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSinhala: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSmallFormVariants: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSpacingModifierLetters: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSpecials: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSuperscriptsandSubscripts: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSupplementalArrowsA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSupplementalArrowsB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSupplementalMathematicalOperators: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSupplementaryPrivateUseAreaA: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSupplementaryPrivateUseAreaB: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsSyriac: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTagalog: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTagbanwa: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTags: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTaiLe: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTaiXuanJingSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTamil: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTelugu: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsThaana: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsThai: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsTibetan: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsUgaritic: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsUnifiedCanadianAboriginalSyllabics: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsVariationSelectors: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsVariationSelectorsSupplement: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsYiRadicals: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsYiSyllables: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlUCSIsYijingHexagramSymbols: {
                    /** 
                    * @param code {number} - int
                    * @returns {number - int}
                    */
                    (code: number): number
                }
            
                xmlURIEscape: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (str: string | null): string
                }
            
                xmlURIEscapeStr: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param list {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (str: string | null, list: string | null): string
                }
            
                xmlURIUnescapeString: {
                    /** 
                    * @param str {string | null} - p.q(const).char
                    * @param len {number} - int
                    * @param target {string | null} - p.char
                    * @returns {string - char}
                    */
                    (str: string | null, len: number, target: string | null): string
                }
            
                xmlUTF8Charcmp: {
                    /** 
                    * @param utf1 {string | null} - p.q(const).xmlChar
                    * @param utf2 {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (utf1: string | null, utf2: string | null): number
                }
            
                xmlUTF8Size: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (utf: string | null): number
                }
            
                xmlUTF8Strlen: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (utf: string | null): number
                }
            
                xmlUTF8Strloc: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @param utfchar {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (utf: string | null, utfchar: string | null): number
                }
            
                xmlUTF8Strndup: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (utf: string | null, len: number): string
                }
            
                xmlUTF8Strpos: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @param pos {number} - int
                    * @returns {string - q(const).xmlChar}
                    */
                    (utf: string | null, pos: number): string
                }
            
                xmlUTF8Strsize: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (utf: string | null, len: number): number
                }
            
                xmlUTF8Strsub: {
                    /** 
                    * @param utf {string | null} - p.q(const).xmlChar
                    * @param start {number} - int
                    * @param len {number} - int
                    * @returns {string - xmlChar}
                    */
                    (utf: string | null, start: number, len: number): string
                }
            
                xmlUnlinkNode: {
                    /** 
                    * @param cur {xmlNodePtr | null} - xmlNodePtr
                    * @returns {any - void}
                    */
                    (cur: xmlNodePtr | null): any
                }
            
                xmlUnlockLibrary: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlUnsetNsProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | null): number
                }
            
                xmlUnsetProp: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (node: xmlNodePtr | null, name: string | null): number
                }
            
                xmlValidBuildContentModel: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param elem {xmlElementPtr | null} - xmlElementPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, elem: xmlElementPtr | null): number
                }
            
                xmlValidCtxtNormalizeAttributeValue: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, name: string | null, value: string | null): string
                }
            
                xmlValidGetPotentialChildren: {
                    /** 
                    * @param ctree {xmlElementContent} - p.xmlElementContent
                    * @param names {string | null} - p.p.q(const).xmlChar
                    * @param len {number} - p.int
                    * @param max {number} - int
                    * @returns {number - int}
                    */
                    (ctree: xmlElementContent, names: string | null, len: number, max: number): number
                }
            
                xmlValidGetValidElements: {
                    /** 
                    * @param prev {xmlNode} - p.xmlNode
                    * @param next {xmlNode} - p.xmlNode
                    * @param names {string | null} - p.p.q(const).xmlChar
                    * @param max {number} - int
                    * @returns {number - int}
                    */
                    (prev: xmlNode, next: xmlNode, names: string | null, max: number): number
                }
            
                xmlValidNormalizeAttributeValue: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param name {string | null} - p.q(const).xmlChar
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {string - xmlChar}
                    */
                    (doc: xmlDocPtr | null, elem: xmlNodePtr | null, name: string | null, value: string | null): string
                }
            
                xmlValidateAttributeDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param attr {xmlAttributePtr | null} - xmlAttributePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, attr: xmlAttributePtr | null): number
                }
            
                xmlValidateAttributeValue: {
                    /** 
                    * @param type {xmlAttributeType} - xmlAttributeType
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (type: xmlAttributeType, value: string | null): number
                }
            
                xmlValidateDocument: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlValidateDocumentFinal: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlValidateDtd: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param dtd {xmlDtdPtr | null} - xmlDtdPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, dtd: xmlDtdPtr | null): number
                }
            
                xmlValidateDtdFinal: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlValidateElement: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlValidateElementDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlElementPtr | null} - xmlElementPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlElementPtr | null): number
                }
            
                xmlValidateNCName: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param space {number} - int
                    * @returns {number - int}
                    */
                    (value: string | null, space: number): number
                }
            
                xmlValidateNMToken: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param space {number} - int
                    * @returns {number - int}
                    */
                    (value: string | null, space: number): number
                }
            
                xmlValidateName: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param space {number} - int
                    * @returns {number - int}
                    */
                    (value: string | null, space: number): number
                }
            
                xmlValidateNameValue: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (value: string | null): number
                }
            
                xmlValidateNamesValue: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (value: string | null): number
                }
            
                xmlValidateNmtokenValue: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (value: string | null): number
                }
            
                xmlValidateNmtokensValue: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (value: string | null): number
                }
            
                xmlValidateNotationDecl: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param nota {xmlNotationPtr | null} - xmlNotationPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, nota: xmlNotationPtr | null): number
                }
            
                xmlValidateNotationUse: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param notationName {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, notationName: string | null): number
                }
            
                xmlValidateOneAttribute: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param attr {xmlAttrPtr | null} - xmlAttrPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null, value: string | null): number
                }
            
                xmlValidateOneElement: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                }
            
                xmlValidateOneNamespace: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param prefix {string | null} - p.q(const).xmlChar
                    * @param ns {xmlNsPtr | null} - xmlNsPtr
                    * @param value {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, prefix: string | null, ns: xmlNsPtr | null, value: string | null): number
                }
            
                xmlValidatePopElement: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param qname {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, qname: string | null): number
                }
            
                xmlValidatePushCData: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param data {string | null} - p.q(const).xmlChar
                    * @param len {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, data: string | null, len: number): number
                }
            
                xmlValidatePushElement: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param elem {xmlNodePtr | null} - xmlNodePtr
                    * @param qname {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, qname: string | null): number
                }
            
                xmlValidateQName: {
                    /** 
                    * @param value {string | null} - p.q(const).xmlChar
                    * @param space {number} - int
                    * @returns {number - int}
                    */
                    (value: string | null, space: number): number
                }
            
                xmlValidateRoot: {
                    /** 
                    * @param ctxt {xmlValidCtxtPtr | null} - xmlValidCtxtPtr
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                }
            
                xmlXIncludeFreeContext: {
                    /** 
                    * @param ctxt {xmlXIncludeCtxtPtr | null} - xmlXIncludeCtxtPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlXIncludeCtxtPtr | null): any
                }
            
                xmlXIncludeNewContext: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlXIncludeCtxtPtr - xmlXIncludeCtxtPtr}
                    */
                    (doc: xmlDocPtr | null): xmlXIncludeCtxtPtr
                }
            
                xmlXIncludeProcess: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null): number
                }
            
                xmlXIncludeProcessFlags: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param flags {number} - int
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, flags: number): number
                }
            
                xmlXIncludeProcessFlagsData: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param flags {number} - int
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (doc: xmlDocPtr | null, flags: number, data: any): number
                }
            
                xmlXIncludeProcessNode: {
                    /** 
                    * @param ctxt {xmlXIncludeCtxtPtr | null} - xmlXIncludeCtxtPtr
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlXIncludeCtxtPtr | null, tree: xmlNodePtr | null): number
                }
            
                xmlXIncludeProcessTree: {
                    /** 
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (tree: xmlNodePtr | null): number
                }
            
                xmlXIncludeProcessTreeFlags: {
                    /** 
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @param flags {number} - int
                    * @returns {number - int}
                    */
                    (tree: xmlNodePtr | null, flags: number): number
                }
            
                xmlXIncludeProcessTreeFlagsData: {
                    /** 
                    * @param tree {xmlNodePtr | null} - xmlNodePtr
                    * @param flags {number} - int
                    * @param data {any} - p.void
                    * @returns {number - int}
                    */
                    (tree: xmlNodePtr | null, flags: number, data: any): number
                }
            
                xmlXIncludeSetFlags: {
                    /** 
                    * @param ctxt {xmlXIncludeCtxtPtr | null} - xmlXIncludeCtxtPtr
                    * @param flags {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlXIncludeCtxtPtr | null, flags: number): number
                }
            
                xmlXPathCastBooleanToNumber: {
                    /** 
                    * @param val {number} - int
                    * @returns {number - double}
                    */
                    (val: number): number
                }
            
                xmlXPathCastBooleanToString: {
                    /** 
                    * @param val {number} - int
                    * @returns {string - xmlChar}
                    */
                    (val: number): string
                }
            
                xmlXPathCastNodeSetToBoolean: {
                    /** 
                    * @param ns {xmlNodePtr[]} - xmlNodeSetPtr
                    * @returns {number - int}
                    */
                    (ns: xmlNodePtr[]): number
                }
            
                xmlXPathCastNodeSetToNumber: {
                    /** 
                    * @param ns {xmlNodePtr[]} - xmlNodeSetPtr
                    * @returns {number - double}
                    */
                    (ns: xmlNodePtr[]): number
                }
            
                xmlXPathCastNodeSetToString: {
                    /** 
                    * @param ns {xmlNodePtr[]} - xmlNodeSetPtr
                    * @returns {string - xmlChar}
                    */
                    (ns: xmlNodePtr[]): string
                }
            
                xmlXPathCastNodeToNumber: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - double}
                    */
                    (node: xmlNodePtr | null): number
                }
            
                xmlXPathCastNodeToString: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @returns {string - xmlChar}
                    */
                    (node: xmlNodePtr | null): string
                }
            
                xmlXPathCastNumberToBoolean: {
                    /** 
                    * @param val {number} - double
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlXPathCastNumberToString: {
                    /** 
                    * @param val {number} - double
                    * @returns {string - xmlChar}
                    */
                    (val: number): string
                }
            
                xmlXPathCastStringToBoolean: {
                    /** 
                    * @param val {string | null} - p.q(const).xmlChar
                    * @returns {number - int}
                    */
                    (val: string | null): number
                }
            
                xmlXPathCastStringToNumber: {
                    /** 
                    * @param val {string | null} - p.q(const).xmlChar
                    * @returns {number - double}
                    */
                    (val: string | null): number
                }
            
                xmlXPathCastToBoolean: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {number - int}
                    */
                    (val: xmlXPathObjectPtr | null): number
                }
            
                xmlXPathCastToNumber: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {number - double}
                    */
                    (val: xmlXPathObjectPtr | null): number
                }
            
                xmlXPathCastToString: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {string - xmlChar}
                    */
                    (val: xmlXPathObjectPtr | null): string
                }
            
                xmlXPathCmpNodes: {
                    /** 
                    * @param node1 {xmlNodePtr | null} - xmlNodePtr
                    * @param node2 {xmlNodePtr | null} - xmlNodePtr
                    * @returns {number - int}
                    */
                    (node1: xmlNodePtr | null, node2: xmlNodePtr | null): number
                }
            
                xmlXPathCompile: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {xmlXPathCompExprPtr - xmlXPathCompExprPtr}
                    */
                    (str: string | null): xmlXPathCompExprPtr
                }
            
                xmlXPathCompiledEval: {
                    /** 
                    * @param comp {xmlXPathCompExprPtr | null} - xmlXPathCompExprPtr
                    * @param ctx {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (comp: xmlXPathCompExprPtr | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathCompiledEvalToBoolean: {
                    /** 
                    * @param comp {xmlXPathCompExprPtr | null} - xmlXPathCompExprPtr
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {number - int}
                    */
                    (comp: xmlXPathCompExprPtr | null, ctxt: xmlXPathContextPtr | null): number
                }
            
                xmlXPathContextSetCache: {
                    /** 
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @param active {number} - int
                    * @param value {number} - int
                    * @param options {number} - int
                    * @returns {number - int}
                    */
                    (ctxt: xmlXPathContextPtr | null, active: number, value: number, options: number): number
                }
            
                xmlXPathConvertBoolean: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathConvertNumber: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathConvertString: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathCtxtCompile: {
                    /** 
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @returns {xmlXPathCompExprPtr - xmlXPathCompExprPtr}
                    */
                    (ctxt: xmlXPathContextPtr | null, str: string | null): xmlXPathCompExprPtr
                }
            
                xmlXPathEval: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param ctx {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (str: string | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathEvalExpression: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (str: string | null, ctxt: xmlXPathContextPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathEvalPredicate: {
                    /** 
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @param res {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {number - int}
                    */
                    (ctxt: xmlXPathContextPtr | null, res: xmlXPathObjectPtr | null): number
                }
            
                xmlXPathFreeCompExpr: {
                    /** 
                    * @param comp {xmlXPathCompExprPtr | null} - xmlXPathCompExprPtr
                    * @returns {any - void}
                    */
                    (comp: xmlXPathCompExprPtr | null): any
                }
            
                xmlXPathFreeContext: {
                    /** 
                    * @param ctxt {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlXPathContextPtr | null): any
                }
            
                xmlXPathFreeNodeSet: {
                    /** 
                    * @param obj {xmlNodePtr[]} - xmlNodeSetPtr
                    * @returns {any - void}
                    */
                    (obj: xmlNodePtr[]): any
                }
            
                xmlXPathFreeNodeSetList: {
                    /** 
                    * @param obj {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {any - void}
                    */
                    (obj: xmlXPathObjectPtr | null): any
                }
            
                xmlXPathFreeObject: {
                    /** 
                    * @param obj {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {any - void}
                    */
                    (obj: xmlXPathObjectPtr | null): any
                }
            
                xmlXPathInit: {
                    /** 
                    * @returns {any - void}
                    */
                    (): any
                }
            
                xmlXPathIsInf: {
                    /** 
                    * @param val {number} - double
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlXPathIsNaN: {
                    /** 
                    * @param val {number} - double
                    * @returns {number - int}
                    */
                    (val: number): number
                }
            
                xmlXPathNewContext: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {xmlXPathContextPtr - xmlXPathContextPtr}
                    */
                    (doc: xmlDocPtr | null): xmlXPathContextPtr
                }
            
                xmlXPathNodeEval: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param ctx {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (node: xmlNodePtr | null, str: string | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathNodeSetCreate: {
                    /** 
                    * @param val {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlNodePtr[] - xmlNodeSetPtr}
                    */
                    (val: xmlNodePtr | null): xmlNodePtr[]
                }
            
                xmlXPathObjectCopy: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPathOrderDocElems: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @returns {number - long}
                    */
                    (doc: xmlDocPtr | null): number
                }
            
                xmlXPathSetContextNode: {
                    /** 
                    * @param node {xmlNodePtr | null} - xmlNodePtr
                    * @param ctx {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {number - int}
                    */
                    (node: xmlNodePtr | null, ctx: xmlXPathContextPtr | null): number
                }
            
                xmlXPtrBuildNodeList: {
                    /** 
                    * @param obj {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlNodePtr - xmlNodePtr}
                    */
                    (obj: xmlXPathObjectPtr | null): xmlNodePtr
                }
            
                xmlXPtrEval: {
                    /** 
                    * @param str {string | null} - p.q(const).xmlChar
                    * @param ctx {xmlXPathContextPtr | null} - xmlXPathContextPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (str: string | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrEvalRangePredicate: {
                    /** 
                    * @param ctxt {xmlXPathParserContextPtr | null} - xmlXPathParserContextPtr
                    * @returns {any - void}
                    */
                    (ctxt: xmlXPathParserContextPtr | null): any
                }
            
                xmlXPtrFreeLocationSet: {
                    /** 
                    * @param obj {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @returns {any - void}
                    */
                    (obj: xmlLocationSetPtr | null): any
                }
            
                xmlXPtrLocationSetAdd: {
                    /** 
                    * @param cur {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {any - void}
                    */
                    (cur: xmlLocationSetPtr | null, val: xmlXPathObjectPtr | null): any
                }
            
                xmlXPtrLocationSetCreate: {
                    /** 
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlLocationSetPtr - xmlLocationSetPtr}
                    */
                    (val: xmlXPathObjectPtr | null): xmlLocationSetPtr
                }
            
                xmlXPtrLocationSetDel: {
                    /** 
                    * @param cur {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @param val {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {any - void}
                    */
                    (cur: xmlLocationSetPtr | null, val: xmlXPathObjectPtr | null): any
                }
            
                xmlXPtrLocationSetMerge: {
                    /** 
                    * @param val1 {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @param val2 {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @returns {xmlLocationSetPtr - xmlLocationSetPtr}
                    */
                    (val1: xmlLocationSetPtr | null, val2: xmlLocationSetPtr | null): xmlLocationSetPtr
                }
            
                xmlXPtrLocationSetRemove: {
                    /** 
                    * @param cur {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @param val {number} - int
                    * @returns {any - void}
                    */
                    (cur: xmlLocationSetPtr | null, val: number): any
                }
            
                xmlXPtrNewCollapsedRange: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewContext: {
                    /** 
                    * @param doc {xmlDocPtr | null} - xmlDocPtr
                    * @param here {xmlNodePtr | null} - xmlNodePtr
                    * @param origin {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlXPathContextPtr - xmlXPathContextPtr}
                    */
                    (doc: xmlDocPtr | null, here: xmlNodePtr | null, origin: xmlNodePtr | null): xmlXPathContextPtr
                }
            
                xmlXPtrNewLocationSetNodeSet: {
                    /** 
                    * @param set {xmlNodePtr[]} - xmlNodeSetPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (set: xmlNodePtr[]): xmlXPathObjectPtr
                }
            
                xmlXPtrNewLocationSetNodes: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @param end {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRange: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @param startindex {number} - int
                    * @param end {xmlNodePtr | null} - xmlNodePtr
                    * @param endindex {number} - int
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null, startindex: number, end: xmlNodePtr | null, endindex: number): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRangeNodeObject: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @param end {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRangeNodePoint: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @param end {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRangeNodes: {
                    /** 
                    * @param start {xmlNodePtr | null} - xmlNodePtr
                    * @param end {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlNodePtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRangePointNode: {
                    /** 
                    * @param start {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @param end {xmlNodePtr | null} - xmlNodePtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlXPathObjectPtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrNewRangePoints: {
                    /** 
                    * @param start {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @param end {xmlXPathObjectPtr | null} - xmlXPathObjectPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (start: xmlXPathObjectPtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                }
            
                xmlXPtrRangeToFunction: {
                    /** 
                    * @param ctxt {xmlXPathParserContextPtr | null} - xmlXPathParserContextPtr
                    * @param nargs {number} - int
                    * @returns {any - void}
                    */
                    (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                }
            
                xmlXPtrWrapLocationSet: {
                    /** 
                    * @param val {xmlLocationSetPtr | null} - xmlLocationSetPtr
                    * @returns {xmlXPathObjectPtr - xmlXPathObjectPtr}
                    */
                    (val: xmlLocationSetPtr | null): xmlXPathObjectPtr
                }
            

    fromBufferAsync: {
        /** 
        * @param type {FROM_BUFFER_ASYNC_TYPE} - type
        * @param buffer {string} - p.q(const).char
        * @param size {number} - int
        * @param URL {string} - p.q(const).char
        * @param encoding {string} - p.q(const).char
        * @param options {number} - int
        * @param callback {Function} - callback
        * @returns xmlDocPtr - xmlDocPtr
        */
        (type: FROM_BUFFER_ASYNC_TYPE, buffer: string, size: number, URL: string, encoding: string, options: number, callback: Function): xmlDocPtr
    }
            
    xmlPtrToXmlAttr: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlAttrPtr - xmlAttrPtr}
        */
        (arg0: any): xmlAttrPtr
    }

    xmlPtrToXmlDoc: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlDocPtr - xmlDocPtr}
        */
        (arg0: any): xmlDocPtr
    }

    xmlPtrToXmlDtd: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlDtdPtr - xmlDtdPtr}
        */
        (arg0: any): xmlDtdPtr
    }

    xmlPtrToXmlElement: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlElementPtr - xmlElementPtr}
        */
        (arg0: any): xmlElementPtr
    }

    xmlPtrToXmlNode: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlNodePtr - xmlNodePtr}
        */
        (arg0: any): xmlNodePtr
    }

    xmlPtrToXmlNs: {
        /** 
        * @param arg0 {any} - p.void
        * @returns {xmlNodePtr - xmlNsPtr}
        */
        (arg0: any): xmlNsPtr
    }
}

import * as getBindings from "bindings";

const bindings = getBindings('xmljs');

export const {
            UTF8ToHtml,
            UTF8Toisolat1,
            __docbDefaultSAXHandler,
            __htmlDefaultSAXHandler,
            __oldXMLWDcompatibility,
            __xmlBufferAllocScheme,
            __xmlDefaultBufferSize,
            __xmlDefaultSAXHandler,
            __xmlDefaultSAXLocator,
            __xmlDeregisterNodeDefaultValue,
            __xmlDoValidityCheckingDefaultValue,
            __xmlGenericError,
            __xmlGenericErrorContext,
            __xmlGetWarningsDefaultValue,
            __xmlIndentTreeOutput,
            __xmlKeepBlanksDefaultValue,
            __xmlLastError,
            __xmlLineNumbersDefaultValue,
            __xmlLoadExtDtdDefaultValue,
            __xmlOutputBufferCreateFilename,
            __xmlOutputBufferCreateFilenameValue,
            __xmlParserDebugEntities,
            __xmlParserInputBufferCreateFilename,
            __xmlParserInputBufferCreateFilenameValue,
            __xmlParserVersion,
            __xmlPedanticParserDefaultValue,
            __xmlRegisterNodeDefaultValue,
            __xmlSaveNoEmptyTags,
            __xmlStructuredError,
            __xmlStructuredErrorContext,
            __xmlSubstituteEntitiesDefaultValue,
            __xmlTreeIndentString,
            attribute,
            attributeDecl,
            cdataBlock,
            characters,
            checkNamespace,
            comment,
            docbDefaultSAXHandlerInit,
            elementDecl,
            endDocument,
            endElement,
            entityDecl,
            externalSubset,
            getChildAtIndex,
            getColumnNumber,
            getEntity,
            getLineNumber,
            getMemUsed,
            getNamespace,
            getNodeCount,
            getParameterEntity,
            getPublicId,
            getSystemId,
            globalNamespace,
            hasExternalSubset,
            hasInternalSubset,
            htmlAttrAllowed,
            htmlAutoCloseTag,
            htmlCreateFileParserCtxt,
            htmlCreateMemoryParserCtxt,
            htmlCreatePushParserCtxt,
            htmlCtxtReadDoc,
            htmlCtxtReadFd,
            htmlCtxtReadFile,
            htmlCtxtReadIO,
            htmlCtxtReadMemory,
            htmlCtxtReset,
            htmlCtxtUseOptions,
            htmlDefaultSAXHandlerInit,
            htmlDocContentDumpFormatOutput,
            htmlDocContentDumpOutput,
            htmlDocDump,
            htmlDocDumpMemory,
            htmlDocDumpMemoryFormat,
            htmlElementAllowedHere,
            htmlElementStatusHere,
            htmlEncodeEntities,
            htmlEntityLookup,
            htmlEntityValueLookup,
            htmlFreeParserCtxt,
            htmlGetMetaEncoding,
            htmlHandleOmittedElem,
            htmlInitAutoClose,
            htmlIsAutoClosed,
            htmlIsBooleanAttr,
            htmlIsScriptAttribute,
            htmlNewDoc,
            htmlNewDocNoDtD,
            htmlNewParserCtxt,
            htmlNodeDump,
            htmlNodeDumpFile,
            htmlNodeDumpFileFormat,
            htmlNodeDumpFormatOutput,
            htmlNodeDumpOutput,
            htmlNodeStatus,
            htmlParseCharRef,
            htmlParseChunk,
            htmlParseDoc,
            htmlParseDocument,
            htmlParseElement,
            htmlParseEntityRef,
            htmlParseFile,
            htmlReadDoc,
            htmlReadFd,
            htmlReadFile,
            htmlReadIO,
            htmlReadMemory,
            htmlSAXParseDoc,
            htmlSAXParseFile,
            htmlSaveFile,
            htmlSaveFileEnc,
            htmlSaveFileFormat,
            htmlSetMetaEncoding,
            htmlTagLookup,
            ignorableWhitespace,
            initGenericErrorDefaultFunc,
            initdocbDefaultSAXHandler,
            inithtmlDefaultSAXHandler,
            initxmlDefaultSAXHandler,
            inputPop,
            inputPush,
            internalSubset,
            isStandalone,
            isolat1ToUTF8,
            namePop,
            namePush,
            namespaceDecl,
            nodePop,
            nodePush,
            notationDecl,
            processingInstruction,
            reference,
            resolveEntity,
            setDebugDisable,
            setDebugEnable,
            setDocumentLocator,
            setNamespace,
            startDocument,
            startElement,
            unparsedEntityDecl,
            xlinkGetDefaultDetect,
            xlinkGetDefaultHandler,
            xlinkIsLink,
            xlinkSetDefaultDetect,
            xlinkSetDefaultHandler,
            xmlACatalogAdd,
            xmlACatalogDump,
            xmlACatalogRemove,
            xmlACatalogResolve,
            xmlACatalogResolvePublic,
            xmlACatalogResolveSystem,
            xmlACatalogResolveURI,
            xmlAddAttributeDecl,
            xmlAddChild,
            xmlAddChildList,
            xmlAddDocEntity,
            xmlAddDtdEntity,
            xmlAddElementDecl,
            xmlAddEncodingAlias,
            xmlAddID,
            xmlAddNextSibling,
            xmlAddNotationDecl,
            xmlAddPrevSibling,
            xmlAddRef,
            xmlAddSibling,
            xmlAllocOutputBuffer,
            xmlAllocParserInputBuffer,
            xmlAttrSerializeTxtContent,
            xmlAutomataCompile,
            xmlAutomataGetInitState,
            xmlAutomataIsDeterminist,
            xmlAutomataNewAllTrans,
            xmlAutomataNewCountTrans,
            xmlAutomataNewCountTrans2,
            xmlAutomataNewCountedTrans,
            xmlAutomataNewCounter,
            xmlAutomataNewCounterTrans,
            xmlAutomataNewEpsilon,
            xmlAutomataNewNegTrans,
            xmlAutomataNewOnceTrans,
            xmlAutomataNewOnceTrans2,
            xmlAutomataNewState,
            xmlAutomataNewTransition,
            xmlAutomataNewTransition2,
            xmlAutomataSetFinalState,
            xmlBufContent,
            xmlBufEnd,
            xmlBufGetNodeContent,
            xmlBufNodeDump,
            xmlBufShrink,
            xmlBufUse,
            xmlBufferAdd,
            xmlBufferAddHead,
            xmlBufferCCat,
            xmlBufferCat,
            xmlBufferContent,
            xmlBufferCreate,
            xmlBufferCreateSize,
            xmlBufferCreateStatic,
            xmlBufferDetach,
            xmlBufferDump,
            xmlBufferEmpty,
            xmlBufferFree,
            xmlBufferGrow,
            xmlBufferLength,
            xmlBufferResize,
            xmlBufferSetAllocationScheme,
            xmlBufferShrink,
            xmlBufferWriteCHAR,
            xmlBufferWriteChar,
            xmlBufferWriteQuotedString,
            xmlBuildQName,
            xmlBuildRelativeURI,
            xmlBuildURI,
            xmlByteConsumed,
            xmlCanonicPath,
            xmlCatalogAdd,
            xmlCatalogAddLocal,
            xmlCatalogCleanup,
            xmlCatalogConvert,
            xmlCatalogDump,
            xmlCatalogFreeLocal,
            xmlCatalogGetDefaults,
            xmlCatalogGetPublic,
            xmlCatalogGetSystem,
            xmlCatalogIsEmpty,
            xmlCatalogLocalResolve,
            xmlCatalogLocalResolveURI,
            xmlCatalogRemove,
            xmlCatalogResolve,
            xmlCatalogResolvePublic,
            xmlCatalogResolveSystem,
            xmlCatalogResolveURI,
            xmlCatalogSetDebug,
            xmlCatalogSetDefaultPrefer,
            xmlCatalogSetDefaults,
            xmlCharEncCloseFunc,
            xmlCharEncFirstLine,
            xmlCharEncInFunc,
            xmlCharEncOutFunc,
            xmlCharInRange,
            xmlCharStrdup,
            xmlCharStrndup,
            xmlCheckFilename,
            xmlCheckHTTPInput,
            xmlCheckLanguageID,
            xmlCheckUTF8,
            xmlCheckVersion,
            xmlChildElementCount,
            xmlCleanupCharEncodingHandlers,
            xmlCleanupEncodingAliases,
            xmlCleanupGlobals,
            xmlCleanupInputCallbacks,
            xmlCleanupMemory,
            xmlCleanupOutputCallbacks,
            xmlCleanupParser,
            xmlCleanupPredefinedEntities,
            xmlCleanupThreads,
            xmlClearNodeInfoSeq,
            xmlClearParserCtxt,
            xmlConvertSGMLCatalog,
            xmlCopyAttributeTable,
            xmlCopyChar,
            xmlCopyCharMultiByte,
            xmlCopyDoc,
            xmlCopyDocElementContent,
            xmlCopyDtd,
            xmlCopyElementContent,
            xmlCopyElementTable,
            xmlCopyEntitiesTable,
            xmlCopyEnumeration,
            xmlCopyError,
            xmlCopyNamespace,
            xmlCopyNamespaceList,
            xmlCopyNode,
            xmlCopyNodeList,
            xmlCopyNotationTable,
            xmlCopyProp,
            xmlCopyPropList,
            xmlCreateDocParserCtxt,
            xmlCreateEntitiesTable,
            xmlCreateEntityParserCtxt,
            xmlCreateEnumeration,
            xmlCreateFileParserCtxt,
            xmlCreateIOParserCtxt,
            xmlCreateIntSubset,
            xmlCreateMemoryParserCtxt,
            xmlCreatePushParserCtxt,
            xmlCreateURI,
            xmlCreateURLParserCtxt,
            xmlCtxtGetLastError,
            xmlCtxtReadDoc,
            xmlCtxtReadFd,
            xmlCtxtReadFile,
            xmlCtxtReadIO,
            xmlCtxtReadMemory,
            xmlCtxtReset,
            xmlCtxtResetLastError,
            xmlCtxtResetPush,
            xmlCtxtUseOptions,
            xmlCurrentChar,
            xmlDOMWrapAdoptNode,
            xmlDOMWrapCloneNode,
            xmlDOMWrapFreeCtxt,
            xmlDOMWrapNewCtxt,
            xmlDOMWrapReconcileNamespaces,
            xmlDOMWrapRemoveNode,
            xmlDecodeEntities,
            xmlDefaultSAXHandlerInit,
            xmlDelEncodingAlias,
            xmlDeregisterNodeDefault,
            xmlDetectCharEncoding,
            xmlDictCleanup,
            xmlDictCreate,
            xmlDictCreateSub,
            xmlDictExists,
            xmlDictFree,
            xmlDictGetUsage,
            xmlDictLookup,
            xmlDictOwns,
            xmlDictQLookup,
            xmlDictReference,
            xmlDictSetLimit,
            xmlDictSize,
            xmlDocCopyNode,
            xmlDocCopyNodeList,
            xmlDocDump,
            xmlDocDumpFormatMemory,
            xmlDocDumpFormatMemoryEnc,
            xmlDocDumpMemory,
            xmlDocDumpMemoryEnc,
            xmlDocFormatDump,
            xmlDocGetRootElement,
            xmlDocSetRootElement,
            xmlDumpAttributeDecl,
            xmlDumpAttributeTable,
            xmlDumpElementDecl,
            xmlDumpElementTable,
            xmlDumpEntitiesTable,
            xmlDumpEntityDecl,
            xmlDumpNotationDecl,
            xmlDumpNotationTable,
            xmlElemDump,
            xmlEncodeEntities,
            xmlEncodeEntitiesReentrant,
            xmlEncodeSpecialChars,
            xmlFileClose,
            xmlFileMatch,
            xmlFileOpen,
            xmlFileRead,
            xmlFindCharEncodingHandler,
            xmlFirstElementChild,
            xmlFreeAttributeTable,
            xmlFreeAutomata,
            xmlFreeCatalog,
            xmlFreeDoc,
            xmlFreeDocElementContent,
            xmlFreeDtd,
            xmlFreeElementContent,
            xmlFreeElementTable,
            xmlFreeEntitiesTable,
            xmlFreeEnumeration,
            xmlFreeIDTable,
            xmlFreeInputStream,
            xmlFreeMutex,
            xmlFreeNode,
            xmlFreeNodeList,
            xmlFreeNotationTable,
            xmlFreeNs,
            xmlFreeNsList,
            xmlFreeParserCtxt,
            xmlFreeParserInputBuffer,
            xmlFreePattern,
            xmlFreePatternList,
            xmlFreeProp,
            xmlFreePropList,
            xmlFreeRMutex,
            xmlFreeRefTable,
            xmlFreeStreamCtxt,
            xmlFreeTextReader,
            xmlFreeTextWriter,
            xmlFreeURI,
            xmlFreeValidCtxt,
            xmlGcMemGet,
            xmlGcMemSetup,
            xmlGetBufferAllocationScheme,
            xmlGetCharEncodingHandler,
            xmlGetCharEncodingName,
            xmlGetCompressMode,
            xmlGetDocCompressMode,
            xmlGetDocEntity,
            xmlGetDtdAttrDesc,
            xmlGetDtdElementDesc,
            xmlGetDtdEntity,
            xmlGetDtdNotationDesc,
            xmlGetDtdQAttrDesc,
            xmlGetDtdQElementDesc,
            xmlGetEncodingAlias,
            xmlGetExternalEntityLoader,
            xmlGetFeature,
            xmlGetFeaturesList,
            xmlGetGlobalState,
            xmlGetID,
            xmlGetIntSubset,
            xmlGetLastChild,
            xmlGetLastError,
            xmlGetLineNo,
            xmlGetNoNsProp,
            xmlGetNodePath,
            xmlGetNsList,
            xmlGetNsProp,
            xmlGetParameterEntity,
            xmlGetPredefinedEntity,
            xmlGetProp,
            xmlGetRefs,
            xmlGetThreadId,
            xmlGetUTF8Char,
            xmlHandleEntity,
            xmlHasFeature,
            xmlHasNsProp,
            xmlHasProp,
            xmlHashAddEntry,
            xmlHashAddEntry2,
            xmlHashAddEntry3,
            xmlHashCopy,
            xmlHashCreate,
            xmlHashCreateDict,
            xmlHashDefaultDeallocator,
            xmlHashFree,
            xmlHashLookup,
            xmlHashLookup2,
            xmlHashLookup3,
            xmlHashQLookup,
            xmlHashQLookup2,
            xmlHashQLookup3,
            xmlHashRemoveEntry,
            xmlHashRemoveEntry2,
            xmlHashRemoveEntry3,
            xmlHashScan,
            xmlHashScan3,
            xmlHashScanFull,
            xmlHashScanFull3,
            xmlHashSize,
            xmlHashUpdateEntry,
            xmlHashUpdateEntry2,
            xmlHashUpdateEntry3,
            xmlIOFTPClose,
            xmlIOFTPMatch,
            xmlIOFTPOpen,
            xmlIOFTPRead,
            xmlIOHTTPClose,
            xmlIOHTTPMatch,
            xmlIOHTTPOpen,
            xmlIOHTTPOpenW,
            xmlIOHTTPRead,
            xmlIOParseDTD,
            xmlInitCharEncodingHandlers,
            xmlInitGlobals,
            xmlInitMemory,
            xmlInitNodeInfoSeq,
            xmlInitParser,
            xmlInitParserCtxt,
            xmlInitThreads,
            xmlInitializeCatalog,
            xmlInitializeDict,
            xmlInitializeGlobalState,
            xmlInitializePredefinedEntities,
            xmlIsBaseChar,
            xmlIsBlank,
            xmlIsBlankNode,
            xmlIsChar,
            xmlIsCombining,
            xmlIsDigit,
            xmlIsExtender,
            xmlIsID,
            xmlIsIdeographic,
            xmlIsLetter,
            xmlIsMainThread,
            xmlIsMixedElement,
            xmlIsPubidChar,
            xmlIsRef,
            xmlIsXHTML,
            xmlKeepBlanksDefault,
            xmlLastElementChild,
            xmlLineNumbersDefault,
            xmlLinkGetData,
            xmlListAppend,
            xmlListClear,
            xmlListCopy,
            xmlListCreate,
            xmlListDelete,
            xmlListDup,
            xmlListEmpty,
            xmlListEnd,
            xmlListFront,
            xmlListInsert,
            xmlListMerge,
            xmlListPopBack,
            xmlListPopFront,
            xmlListPushBack,
            xmlListPushFront,
            xmlListRemoveAll,
            xmlListRemoveFirst,
            xmlListRemoveLast,
            xmlListReverse,
            xmlListReverseSearch,
            xmlListReverseWalk,
            xmlListSearch,
            xmlListSize,
            xmlListSort,
            xmlListWalk,
            xmlLoadACatalog,
            xmlLoadCatalog,
            xmlLoadCatalogs,
            xmlLoadExternalEntity,
            xmlLoadSGMLSuperCatalog,
            xmlLockLibrary,
            xmlMallocAtomicLoc,
            xmlMallocLoc,
            xmlMemBlocks,
            xmlMemDisplay,
            xmlMemDisplayLast,
            xmlMemFree,
            xmlMemGet,
            xmlMemMalloc,
            xmlMemRealloc,
            xmlMemSetup,
            xmlMemShow,
            xmlMemStrdupLoc,
            xmlMemUsed,
            xmlMemoryDump,
            xmlMemoryStrdup,
            xmlModuleClose,
            xmlModuleFree,
            xmlModuleOpen,
            xmlModuleSymbol,
            xmlMutexLock,
            xmlMutexUnlock,
            xmlNamespaceParseNCName,
            xmlNamespaceParseNSDef,
            xmlNamespaceParseQName,
            xmlNewAutomata,
            xmlNewCDataBlock,
            xmlNewCatalog,
            xmlNewCharEncodingHandler,
            xmlNewCharRef,
            xmlNewChild,
            xmlNewComment,
            xmlNewDoc,
            xmlNewDocComment,
            xmlNewDocElementContent,
            xmlNewDocFragment,
            xmlNewDocNode,
            xmlNewDocNodeEatName,
            xmlNewDocPI,
            xmlNewDocProp,
            xmlNewDocRawNode,
            xmlNewDocText,
            xmlNewDocTextLen,
            xmlNewDtd,
            xmlNewElementContent,
            xmlNewEntity,
            xmlNewEntityInputStream,
            xmlNewGlobalNs,
            xmlNewIOInputStream,
            xmlNewInputFromFile,
            xmlNewInputStream,
            xmlNewMutex,
            xmlNewNode,
            xmlNewNodeEatName,
            xmlNewNs,
            xmlNewNsProp,
            xmlNewNsPropEatName,
            xmlNewPI,
            xmlNewParserCtxt,
            xmlNewProp,
            xmlNewRMutex,
            xmlNewReference,
            xmlNewStringInputStream,
            xmlNewText,
            xmlNewTextChild,
            xmlNewTextLen,
            xmlNewTextReader,
            xmlNewTextReaderFilename,
            xmlNewTextWriter,
            xmlNewTextWriterDoc,
            xmlNewTextWriterFilename,
            xmlNewTextWriterMemory,
            xmlNewTextWriterPushParser,
            xmlNewTextWriterTree,
            xmlNewValidCtxt,
            xmlNextChar,
            xmlNextElementSibling,
            xmlNoNetExternalEntityLoader,
            xmlNodeAddContent,
            xmlNodeAddContentLen,
            xmlNodeBufGetContent,
            xmlNodeDump,
            xmlNodeDumpOutput,
            xmlNodeGetBase,
            xmlNodeGetContent,
            xmlNodeGetLang,
            xmlNodeGetSpacePreserve,
            xmlNodeIsText,
            xmlNodeListGetRawString,
            xmlNodeListGetString,
            xmlNodeSetBase,
            xmlNodeSetContent,
            xmlNodeSetContentLen,
            xmlNodeSetLang,
            xmlNodeSetName,
            xmlNodeSetSpacePreserve,
            xmlNormalizeURIPath,
            xmlNormalizeWindowsPath,
            xmlOutputBufferClose,
            xmlOutputBufferCreateBuffer,
            xmlOutputBufferCreateFd,
            xmlOutputBufferCreateFile,
            xmlOutputBufferCreateFilename,
            xmlOutputBufferCreateFilenameDefault,
            xmlOutputBufferCreateIO,
            xmlOutputBufferFlush,
            xmlOutputBufferGetContent,
            xmlOutputBufferGetSize,
            xmlOutputBufferWrite,
            xmlOutputBufferWriteEscape,
            xmlOutputBufferWriteString,
            xmlParseAttValue,
            xmlParseAttribute,
            xmlParseAttributeListDecl,
            xmlParseAttributeType,
            xmlParseBalancedChunkMemory,
            xmlParseBalancedChunkMemoryRecover,
            xmlParseCDSect,
            xmlParseCatalogFile,
            xmlParseCharData,
            xmlParseCharEncoding,
            xmlParseCharRef,
            xmlParseChunk,
            xmlParseComment,
            xmlParseContent,
            xmlParseCtxtExternalEntity,
            xmlParseDTD,
            xmlParseDefaultDecl,
            xmlParseDoc,
            xmlParseDocTypeDecl,
            xmlParseDocument,
            xmlParseElement,
            xmlParseElementChildrenContentDecl,
            xmlParseElementContentDecl,
            xmlParseElementDecl,
            xmlParseElementMixedContentDecl,
            xmlParseEncName,
            xmlParseEncodingDecl,
            xmlParseEndTag,
            xmlParseEntity,
            xmlParseEntityDecl,
            xmlParseEntityRef,
            xmlParseEntityValue,
            xmlParseEnumeratedType,
            xmlParseEnumerationType,
            xmlParseExtParsedEnt,
            xmlParseExternalEntity,
            xmlParseExternalID,
            xmlParseExternalSubset,
            xmlParseFile,
            xmlParseInNodeContext,
            xmlParseMarkupDecl,
            xmlParseMemory,
            xmlParseMisc,
            xmlParseName,
            xmlParseNamespace,
            xmlParseNmtoken,
            xmlParseNotationDecl,
            xmlParseNotationType,
            xmlParsePEReference,
            xmlParsePI,
            xmlParsePITarget,
            xmlParsePubidLiteral,
            xmlParseQuotedString,
            xmlParseReference,
            xmlParseSDDecl,
            xmlParseStartTag,
            xmlParseSystemLiteral,
            xmlParseTextDecl,
            xmlParseURI,
            xmlParseURIRaw,
            xmlParseURIReference,
            xmlParseVersionInfo,
            xmlParseVersionNum,
            xmlParseXMLDecl,
            xmlParserAddNodeInfo,
            xmlParserError,
            xmlParserFindNodeInfo,
            xmlParserFindNodeInfoIndex,
            xmlParserGetDirectory,
            xmlParserHandlePEReference,
            xmlParserHandleReference,
            xmlParserInputBufferCreateFd,
            xmlParserInputBufferCreateFile,
            xmlParserInputBufferCreateFilename,
            xmlParserInputBufferCreateFilenameDefault,
            xmlParserInputBufferCreateIO,
            xmlParserInputBufferCreateMem,
            xmlParserInputBufferCreateStatic,
            xmlParserInputBufferGrow,
            xmlParserInputBufferPush,
            xmlParserInputBufferRead,
            xmlParserInputGrow,
            xmlParserInputRead,
            xmlParserInputShrink,
            xmlParserPrintFileContext,
            xmlParserPrintFileInfo,
            xmlParserValidityError,
            xmlParserValidityWarning,
            xmlParserWarning,
            xmlPathToURI,
            xmlPatternFromRoot,
            xmlPatternGetStreamCtxt,
            xmlPatternMatch,
            xmlPatternMaxDepth,
            xmlPatternMinDepth,
            xmlPatternStreamable,
            xmlPatterncompile,
            xmlPedanticParserDefault,
            xmlPopInput,
            xmlPopInputCallbacks,
            xmlPopOutputCallbacks,
            xmlPreviousElementSibling,
            xmlPrintURI,
            xmlPushInput,
            xmlRMutexLock,
            xmlRMutexUnlock,
            xmlReadDoc,
            xmlReadFd,
            xmlReadFile,
            xmlReadIO,
            xmlReadMemory,
            xmlReaderForDoc,
            xmlReaderForFd,
            xmlReaderForFile,
            xmlReaderForIO,
            xmlReaderForMemory,
            xmlReaderNewDoc,
            xmlReaderNewFd,
            xmlReaderNewFile,
            xmlReaderNewIO,
            xmlReaderNewMemory,
            xmlReaderNewWalker,
            xmlReaderWalker,
            xmlReallocLoc,
            xmlReconciliateNs,
            xmlRecoverDoc,
            xmlRecoverFile,
            xmlRecoverMemory,
            xmlRegExecErrInfo,
            xmlRegExecNextValues,
            xmlRegExecPushString,
            xmlRegExecPushString2,
            xmlRegFreeExecCtxt,
            xmlRegFreeRegexp,
            xmlRegNewExecCtxt,
            xmlRegexpCompile,
            xmlRegexpExec,
            xmlRegexpIsDeterminist,
            xmlRegexpPrint,
            xmlRegisterCharEncodingHandler,
            xmlRegisterDefaultInputCallbacks,
            xmlRegisterDefaultOutputCallbacks,
            xmlRegisterHTTPPostCallbacks,
            xmlRegisterInputCallbacks,
            xmlRegisterNodeDefault,
            xmlRegisterOutputCallbacks,
            xmlRelaxNGCleanupTypes,
            xmlRelaxNGDump,
            xmlRelaxNGDumpTree,
            xmlRelaxNGFree,
            xmlRelaxNGFreeParserCtxt,
            xmlRelaxNGFreeValidCtxt,
            xmlRelaxNGGetParserErrors,
            xmlRelaxNGGetValidErrors,
            xmlRelaxNGInitTypes,
            xmlRelaxNGNewDocParserCtxt,
            xmlRelaxNGNewMemParserCtxt,
            xmlRelaxNGNewParserCtxt,
            xmlRelaxNGNewValidCtxt,
            xmlRelaxNGParse,
            xmlRelaxNGSetParserErrors,
            xmlRelaxNGSetParserStructuredErrors,
            xmlRelaxNGSetValidErrors,
            xmlRelaxNGSetValidStructuredErrors,
            xmlRelaxNGValidateDoc,
            xmlRelaxNGValidateFullElement,
            xmlRelaxNGValidatePopElement,
            xmlRelaxNGValidatePushCData,
            xmlRelaxNGValidatePushElement,
            xmlRelaxParserSetFlag,
            xmlRemoveID,
            xmlRemoveProp,
            xmlRemoveRef,
            xmlReplaceNode,
            xmlResetError,
            xmlResetLastError,
            xmlSAX2AttributeDecl,
            xmlSAX2CDataBlock,
            xmlSAX2Characters,
            xmlSAX2Comment,
            xmlSAX2ElementDecl,
            xmlSAX2EndDocument,
            xmlSAX2EndElement,
            xmlSAX2EndElementNs,
            xmlSAX2EntityDecl,
            xmlSAX2ExternalSubset,
            xmlSAX2GetColumnNumber,
            xmlSAX2GetEntity,
            xmlSAX2GetLineNumber,
            xmlSAX2GetParameterEntity,
            xmlSAX2GetPublicId,
            xmlSAX2GetSystemId,
            xmlSAX2HasExternalSubset,
            xmlSAX2HasInternalSubset,
            xmlSAX2IgnorableWhitespace,
            xmlSAX2InitDefaultSAXHandler,
            xmlSAX2InitDocbDefaultSAXHandler,
            xmlSAX2InitHtmlDefaultSAXHandler,
            xmlSAX2InternalSubset,
            xmlSAX2IsStandalone,
            xmlSAX2NotationDecl,
            xmlSAX2ProcessingInstruction,
            xmlSAX2Reference,
            xmlSAX2ResolveEntity,
            xmlSAX2SetDocumentLocator,
            xmlSAX2StartDocument,
            xmlSAX2StartElement,
            xmlSAX2StartElementNs,
            xmlSAX2UnparsedEntityDecl,
            xmlSAXDefaultVersion,
            xmlSAXParseDTD,
            xmlSAXParseDoc,
            xmlSAXParseEntity,
            xmlSAXParseFile,
            xmlSAXParseFileWithData,
            xmlSAXParseMemory,
            xmlSAXParseMemoryWithData,
            xmlSAXUserParseFile,
            xmlSAXUserParseMemory,
            xmlSAXVersion,
            xmlSaveClose,
            xmlSaveDoc,
            xmlSaveFile,
            xmlSaveFileEnc,
            xmlSaveFileTo,
            xmlSaveFlush,
            xmlSaveFormatFile,
            xmlSaveFormatFileEnc,
            xmlSaveFormatFileTo,
            xmlSaveSetAttrEscape,
            xmlSaveSetEscape,
            xmlSaveToBuffer,
            xmlSaveToFd,
            xmlSaveToFilename,
            xmlSaveToIO,
            xmlSaveTree,
            xmlSaveUri,
            xmlScanName,
            xmlSchemaCheckFacet,
            xmlSchemaCleanupTypes,
            xmlSchemaCollapseString,
            xmlSchemaCompareValues,
            xmlSchemaCompareValuesWhtsp,
            xmlSchemaCopyValue,
            xmlSchemaDump,
            xmlSchemaFree,
            xmlSchemaFreeFacet,
            xmlSchemaFreeParserCtxt,
            xmlSchemaFreeType,
            xmlSchemaFreeValidCtxt,
            xmlSchemaFreeValue,
            xmlSchemaFreeWildcard,
            xmlSchemaGetBuiltInListSimpleTypeItemType,
            xmlSchemaGetBuiltInType,
            xmlSchemaGetCanonValue,
            xmlSchemaGetCanonValueWhtsp,
            xmlSchemaGetFacetValueAsULong,
            xmlSchemaGetParserErrors,
            xmlSchemaGetPredefinedType,
            xmlSchemaGetValType,
            xmlSchemaGetValidErrors,
            xmlSchemaInitTypes,
            xmlSchemaIsBuiltInTypeFacet,
            xmlSchemaIsValid,
            xmlSchemaNewDocParserCtxt,
            xmlSchemaNewFacet,
            xmlSchemaNewMemParserCtxt,
            xmlSchemaNewNOTATIONValue,
            xmlSchemaNewParserCtxt,
            xmlSchemaNewQNameValue,
            xmlSchemaNewStringValue,
            xmlSchemaNewValidCtxt,
            xmlSchemaParse,
            xmlSchemaSAXPlug,
            xmlSchemaSAXUnplug,
            xmlSchemaSetParserErrors,
            xmlSchemaSetParserStructuredErrors,
            xmlSchemaSetValidErrors,
            xmlSchemaSetValidOptions,
            xmlSchemaSetValidStructuredErrors,
            xmlSchemaValPredefTypeNode,
            xmlSchemaValPredefTypeNodeNoNorm,
            xmlSchemaValidCtxtGetOptions,
            xmlSchemaValidCtxtGetParserCtxt,
            xmlSchemaValidateDoc,
            xmlSchemaValidateFacet,
            xmlSchemaValidateFacetWhtsp,
            xmlSchemaValidateFile,
            xmlSchemaValidateLengthFacet,
            xmlSchemaValidateLengthFacetWhtsp,
            xmlSchemaValidateListSimpleTypeFacet,
            xmlSchemaValidateOneElement,
            xmlSchemaValidatePredefinedType,
            xmlSchemaValidateSetFilename,
            xmlSchemaValidateSetLocator,
            xmlSchemaValidateStream,
            xmlSchemaValueAppend,
            xmlSchemaValueGetAsBoolean,
            xmlSchemaValueGetAsString,
            xmlSchemaValueGetNext,
            xmlSchemaWhiteSpaceReplace,
            xmlSearchNs,
            xmlSearchNsByHref,
            xmlSetBufferAllocationScheme,
            xmlSetCompressMode,
            xmlSetDocCompressMode,
            xmlSetEntityReferenceFunc,
            xmlSetExternalEntityLoader,
            xmlSetFeature,
            xmlSetGenericErrorFunc,
            xmlSetListDoc,
            xmlSetNs,
            xmlSetNsProp,
            xmlSetProp,
            xmlSetStructuredErrorFunc,
            xmlSetTreeDoc,
            xmlSetupParserForBuffer,
            xmlSkipBlankChars,
            xmlSnprintfElementContent,
            xmlSplitQName,
            xmlSplitQName2,
            xmlSplitQName3,
            xmlSprintfElementContent,
            xmlStopParser,
            xmlStrEqual,
            xmlStrPrintf,
            xmlStrQEqual,
            xmlStrcasecmp,
            xmlStrcasestr,
            xmlStrcat,
            xmlStrchr,
            xmlStrcmp,
            xmlStrdup,
            xmlStreamPop,
            xmlStreamPush,
            xmlStreamPushAttr,
            xmlStreamPushNode,
            xmlStreamWantsAnyNode,
            xmlStringCurrentChar,
            xmlStringDecodeEntities,
            xmlStringGetNodeList,
            xmlStringLenDecodeEntities,
            xmlStringLenGetNodeList,
            xmlStrlen,
            xmlStrncasecmp,
            xmlStrncat,
            xmlStrncatNew,
            xmlStrncmp,
            xmlStrndup,
            xmlStrstr,
            xmlStrsub,
            xmlSubstituteEntitiesDefault,
            xmlSwitchEncoding,
            xmlSwitchInputEncoding,
            xmlSwitchToEncoding,
            xmlTextConcat,
            xmlTextMerge,
            xmlTextReaderAttributeCount,
            xmlTextReaderBaseUri,
            xmlTextReaderByteConsumed,
            xmlTextReaderClose,
            xmlTextReaderConstBaseUri,
            xmlTextReaderConstEncoding,
            xmlTextReaderConstLocalName,
            xmlTextReaderConstName,
            xmlTextReaderConstNamespaceUri,
            xmlTextReaderConstPrefix,
            xmlTextReaderConstString,
            xmlTextReaderConstValue,
            xmlTextReaderConstXmlLang,
            xmlTextReaderConstXmlVersion,
            xmlTextReaderCurrentDoc,
            xmlTextReaderCurrentNode,
            xmlTextReaderDepth,
            xmlTextReaderExpand,
            xmlTextReaderGetAttribute,
            xmlTextReaderGetAttributeNo,
            xmlTextReaderGetAttributeNs,
            xmlTextReaderGetErrorHandler,
            xmlTextReaderGetParserColumnNumber,
            xmlTextReaderGetParserLineNumber,
            xmlTextReaderGetParserProp,
            xmlTextReaderGetRemainder,
            xmlTextReaderHasAttributes,
            xmlTextReaderHasValue,
            xmlTextReaderIsDefault,
            xmlTextReaderIsEmptyElement,
            xmlTextReaderIsNamespaceDecl,
            xmlTextReaderIsValid,
            xmlTextReaderLocalName,
            xmlTextReaderLocatorBaseURI,
            xmlTextReaderLocatorLineNumber,
            xmlTextReaderLookupNamespace,
            xmlTextReaderMoveToAttribute,
            xmlTextReaderMoveToAttributeNo,
            xmlTextReaderMoveToAttributeNs,
            xmlTextReaderMoveToElement,
            xmlTextReaderMoveToFirstAttribute,
            xmlTextReaderMoveToNextAttribute,
            xmlTextReaderName,
            xmlTextReaderNamespaceUri,
            xmlTextReaderNext,
            xmlTextReaderNextSibling,
            xmlTextReaderNodeType,
            xmlTextReaderNormalization,
            xmlTextReaderPrefix,
            xmlTextReaderPreserve,
            xmlTextReaderPreservePattern,
            xmlTextReaderQuoteChar,
            xmlTextReaderRead,
            xmlTextReaderReadAttributeValue,
            xmlTextReaderReadInnerXml,
            xmlTextReaderReadOuterXml,
            xmlTextReaderReadState,
            xmlTextReaderReadString,
            xmlTextReaderRelaxNGSetSchema,
            xmlTextReaderRelaxNGValidate,
            xmlTextReaderRelaxNGValidateCtxt,
            xmlTextReaderSchemaValidate,
            xmlTextReaderSchemaValidateCtxt,
            xmlTextReaderSetErrorHandler,
            xmlTextReaderSetParserProp,
            xmlTextReaderSetSchema,
            xmlTextReaderSetStructuredErrorHandler,
            xmlTextReaderSetup,
            xmlTextReaderStandalone,
            xmlTextReaderValue,
            xmlTextReaderXmlLang,
            xmlTextWriterEndAttribute,
            xmlTextWriterEndCDATA,
            xmlTextWriterEndComment,
            xmlTextWriterEndDTD,
            xmlTextWriterEndDTDAttlist,
            xmlTextWriterEndDTDElement,
            xmlTextWriterEndDTDEntity,
            xmlTextWriterEndDocument,
            xmlTextWriterEndElement,
            xmlTextWriterEndPI,
            xmlTextWriterFlush,
            xmlTextWriterFullEndElement,
            xmlTextWriterSetIndent,
            xmlTextWriterSetIndentString,
            xmlTextWriterSetQuoteChar,
            xmlTextWriterStartAttribute,
            xmlTextWriterStartAttributeNS,
            xmlTextWriterStartCDATA,
            xmlTextWriterStartComment,
            xmlTextWriterStartDTD,
            xmlTextWriterStartDTDAttlist,
            xmlTextWriterStartDTDElement,
            xmlTextWriterStartDTDEntity,
            xmlTextWriterStartDocument,
            xmlTextWriterStartElement,
            xmlTextWriterStartElementNS,
            xmlTextWriterStartPI,
            xmlTextWriterWriteAttribute,
            xmlTextWriterWriteAttributeNS,
            xmlTextWriterWriteBase64,
            xmlTextWriterWriteBinHex,
            xmlTextWriterWriteCDATA,
            xmlTextWriterWriteComment,
            xmlTextWriterWriteDTD,
            xmlTextWriterWriteDTDAttlist,
            xmlTextWriterWriteDTDElement,
            xmlTextWriterWriteDTDEntity,
            xmlTextWriterWriteDTDExternalEntity,
            xmlTextWriterWriteDTDExternalEntityContents,
            xmlTextWriterWriteDTDInternalEntity,
            xmlTextWriterWriteDTDNotation,
            xmlTextWriterWriteElement,
            xmlTextWriterWriteElementNS,
            xmlTextWriterWriteFormatAttribute,
            xmlTextWriterWriteFormatAttributeNS,
            xmlTextWriterWriteFormatCDATA,
            xmlTextWriterWriteFormatComment,
            xmlTextWriterWriteFormatDTD,
            xmlTextWriterWriteFormatDTDAttlist,
            xmlTextWriterWriteFormatDTDElement,
            xmlTextWriterWriteFormatDTDInternalEntity,
            xmlTextWriterWriteFormatElement,
            xmlTextWriterWriteFormatElementNS,
            xmlTextWriterWriteFormatPI,
            xmlTextWriterWriteFormatRaw,
            xmlTextWriterWriteFormatString,
            xmlTextWriterWritePI,
            xmlTextWriterWriteRaw,
            xmlTextWriterWriteRawLen,
            xmlTextWriterWriteString,
            xmlThrDefBufferAllocScheme,
            xmlThrDefDefaultBufferSize,
            xmlThrDefDeregisterNodeDefault,
            xmlThrDefDoValidityCheckingDefaultValue,
            xmlThrDefGetWarningsDefaultValue,
            xmlThrDefIndentTreeOutput,
            xmlThrDefKeepBlanksDefaultValue,
            xmlThrDefLineNumbersDefaultValue,
            xmlThrDefLoadExtDtdDefaultValue,
            xmlThrDefOutputBufferCreateFilenameDefault,
            xmlThrDefParserDebugEntities,
            xmlThrDefParserInputBufferCreateFilenameDefault,
            xmlThrDefPedanticParserDefaultValue,
            xmlThrDefRegisterNodeDefault,
            xmlThrDefSaveNoEmptyTags,
            xmlThrDefSetGenericErrorFunc,
            xmlThrDefSetStructuredErrorFunc,
            xmlThrDefSubstituteEntitiesDefaultValue,
            xmlThrDefTreeIndentString,
            xmlUCSIsAegeanNumbers,
            xmlUCSIsAlphabeticPresentationForms,
            xmlUCSIsArabic,
            xmlUCSIsArabicPresentationFormsA,
            xmlUCSIsArabicPresentationFormsB,
            xmlUCSIsArmenian,
            xmlUCSIsArrows,
            xmlUCSIsBasicLatin,
            xmlUCSIsBengali,
            xmlUCSIsBlock,
            xmlUCSIsBlockElements,
            xmlUCSIsBopomofo,
            xmlUCSIsBopomofoExtended,
            xmlUCSIsBoxDrawing,
            xmlUCSIsBraillePatterns,
            xmlUCSIsBuhid,
            xmlUCSIsByzantineMusicalSymbols,
            xmlUCSIsCJKCompatibility,
            xmlUCSIsCJKCompatibilityForms,
            xmlUCSIsCJKCompatibilityIdeographs,
            xmlUCSIsCJKCompatibilityIdeographsSupplement,
            xmlUCSIsCJKRadicalsSupplement,
            xmlUCSIsCJKSymbolsandPunctuation,
            xmlUCSIsCJKUnifiedIdeographs,
            xmlUCSIsCJKUnifiedIdeographsExtensionA,
            xmlUCSIsCJKUnifiedIdeographsExtensionB,
            xmlUCSIsCat,
            xmlUCSIsCatC,
            xmlUCSIsCatCc,
            xmlUCSIsCatCf,
            xmlUCSIsCatCo,
            xmlUCSIsCatCs,
            xmlUCSIsCatL,
            xmlUCSIsCatLl,
            xmlUCSIsCatLm,
            xmlUCSIsCatLo,
            xmlUCSIsCatLt,
            xmlUCSIsCatLu,
            xmlUCSIsCatM,
            xmlUCSIsCatMc,
            xmlUCSIsCatMe,
            xmlUCSIsCatMn,
            xmlUCSIsCatN,
            xmlUCSIsCatNd,
            xmlUCSIsCatNl,
            xmlUCSIsCatNo,
            xmlUCSIsCatP,
            xmlUCSIsCatPc,
            xmlUCSIsCatPd,
            xmlUCSIsCatPe,
            xmlUCSIsCatPf,
            xmlUCSIsCatPi,
            xmlUCSIsCatPo,
            xmlUCSIsCatPs,
            xmlUCSIsCatS,
            xmlUCSIsCatSc,
            xmlUCSIsCatSk,
            xmlUCSIsCatSm,
            xmlUCSIsCatSo,
            xmlUCSIsCatZ,
            xmlUCSIsCatZl,
            xmlUCSIsCatZp,
            xmlUCSIsCatZs,
            xmlUCSIsCherokee,
            xmlUCSIsCombiningDiacriticalMarks,
            xmlUCSIsCombiningDiacriticalMarksforSymbols,
            xmlUCSIsCombiningHalfMarks,
            xmlUCSIsCombiningMarksforSymbols,
            xmlUCSIsControlPictures,
            xmlUCSIsCurrencySymbols,
            xmlUCSIsCypriotSyllabary,
            xmlUCSIsCyrillic,
            xmlUCSIsCyrillicSupplement,
            xmlUCSIsDeseret,
            xmlUCSIsDevanagari,
            xmlUCSIsDingbats,
            xmlUCSIsEnclosedAlphanumerics,
            xmlUCSIsEnclosedCJKLettersandMonths,
            xmlUCSIsEthiopic,
            xmlUCSIsGeneralPunctuation,
            xmlUCSIsGeometricShapes,
            xmlUCSIsGeorgian,
            xmlUCSIsGothic,
            xmlUCSIsGreek,
            xmlUCSIsGreekExtended,
            xmlUCSIsGreekandCoptic,
            xmlUCSIsGujarati,
            xmlUCSIsGurmukhi,
            xmlUCSIsHalfwidthandFullwidthForms,
            xmlUCSIsHangulCompatibilityJamo,
            xmlUCSIsHangulJamo,
            xmlUCSIsHangulSyllables,
            xmlUCSIsHanunoo,
            xmlUCSIsHebrew,
            xmlUCSIsHighPrivateUseSurrogates,
            xmlUCSIsHighSurrogates,
            xmlUCSIsHiragana,
            xmlUCSIsIPAExtensions,
            xmlUCSIsIdeographicDescriptionCharacters,
            xmlUCSIsKanbun,
            xmlUCSIsKangxiRadicals,
            xmlUCSIsKannada,
            xmlUCSIsKatakana,
            xmlUCSIsKatakanaPhoneticExtensions,
            xmlUCSIsKhmer,
            xmlUCSIsKhmerSymbols,
            xmlUCSIsLao,
            xmlUCSIsLatin1Supplement,
            xmlUCSIsLatinExtendedA,
            xmlUCSIsLatinExtendedAdditional,
            xmlUCSIsLatinExtendedB,
            xmlUCSIsLetterlikeSymbols,
            xmlUCSIsLimbu,
            xmlUCSIsLinearBIdeograms,
            xmlUCSIsLinearBSyllabary,
            xmlUCSIsLowSurrogates,
            xmlUCSIsMalayalam,
            xmlUCSIsMathematicalAlphanumericSymbols,
            xmlUCSIsMathematicalOperators,
            xmlUCSIsMiscellaneousMathematicalSymbolsA,
            xmlUCSIsMiscellaneousMathematicalSymbolsB,
            xmlUCSIsMiscellaneousSymbols,
            xmlUCSIsMiscellaneousSymbolsandArrows,
            xmlUCSIsMiscellaneousTechnical,
            xmlUCSIsMongolian,
            xmlUCSIsMusicalSymbols,
            xmlUCSIsMyanmar,
            xmlUCSIsNumberForms,
            xmlUCSIsOgham,
            xmlUCSIsOldItalic,
            xmlUCSIsOpticalCharacterRecognition,
            xmlUCSIsOriya,
            xmlUCSIsOsmanya,
            xmlUCSIsPhoneticExtensions,
            xmlUCSIsPrivateUse,
            xmlUCSIsPrivateUseArea,
            xmlUCSIsRunic,
            xmlUCSIsShavian,
            xmlUCSIsSinhala,
            xmlUCSIsSmallFormVariants,
            xmlUCSIsSpacingModifierLetters,
            xmlUCSIsSpecials,
            xmlUCSIsSuperscriptsandSubscripts,
            xmlUCSIsSupplementalArrowsA,
            xmlUCSIsSupplementalArrowsB,
            xmlUCSIsSupplementalMathematicalOperators,
            xmlUCSIsSupplementaryPrivateUseAreaA,
            xmlUCSIsSupplementaryPrivateUseAreaB,
            xmlUCSIsSyriac,
            xmlUCSIsTagalog,
            xmlUCSIsTagbanwa,
            xmlUCSIsTags,
            xmlUCSIsTaiLe,
            xmlUCSIsTaiXuanJingSymbols,
            xmlUCSIsTamil,
            xmlUCSIsTelugu,
            xmlUCSIsThaana,
            xmlUCSIsThai,
            xmlUCSIsTibetan,
            xmlUCSIsUgaritic,
            xmlUCSIsUnifiedCanadianAboriginalSyllabics,
            xmlUCSIsVariationSelectors,
            xmlUCSIsVariationSelectorsSupplement,
            xmlUCSIsYiRadicals,
            xmlUCSIsYiSyllables,
            xmlUCSIsYijingHexagramSymbols,
            xmlURIEscape,
            xmlURIEscapeStr,
            xmlURIUnescapeString,
            xmlUTF8Charcmp,
            xmlUTF8Size,
            xmlUTF8Strlen,
            xmlUTF8Strloc,
            xmlUTF8Strndup,
            xmlUTF8Strpos,
            xmlUTF8Strsize,
            xmlUTF8Strsub,
            xmlUnlinkNode,
            xmlUnlockLibrary,
            xmlUnsetNsProp,
            xmlUnsetProp,
            xmlValidBuildContentModel,
            xmlValidCtxtNormalizeAttributeValue,
            xmlValidGetPotentialChildren,
            xmlValidGetValidElements,
            xmlValidNormalizeAttributeValue,
            xmlValidateAttributeDecl,
            xmlValidateAttributeValue,
            xmlValidateDocument,
            xmlValidateDocumentFinal,
            xmlValidateDtd,
            xmlValidateDtdFinal,
            xmlValidateElement,
            xmlValidateElementDecl,
            xmlValidateNCName,
            xmlValidateNMToken,
            xmlValidateName,
            xmlValidateNameValue,
            xmlValidateNamesValue,
            xmlValidateNmtokenValue,
            xmlValidateNmtokensValue,
            xmlValidateNotationDecl,
            xmlValidateNotationUse,
            xmlValidateOneAttribute,
            xmlValidateOneElement,
            xmlValidateOneNamespace,
            xmlValidatePopElement,
            xmlValidatePushCData,
            xmlValidatePushElement,
            xmlValidateQName,
            xmlValidateRoot,
            xmlXIncludeFreeContext,
            xmlXIncludeNewContext,
            xmlXIncludeProcess,
            xmlXIncludeProcessFlags,
            xmlXIncludeProcessFlagsData,
            xmlXIncludeProcessNode,
            xmlXIncludeProcessTree,
            xmlXIncludeProcessTreeFlags,
            xmlXIncludeProcessTreeFlagsData,
            xmlXIncludeSetFlags,
            xmlXPathCastBooleanToNumber,
            xmlXPathCastBooleanToString,
            xmlXPathCastNodeSetToBoolean,
            xmlXPathCastNodeSetToNumber,
            xmlXPathCastNodeSetToString,
            xmlXPathCastNodeToNumber,
            xmlXPathCastNodeToString,
            xmlXPathCastNumberToBoolean,
            xmlXPathCastNumberToString,
            xmlXPathCastStringToBoolean,
            xmlXPathCastStringToNumber,
            xmlXPathCastToBoolean,
            xmlXPathCastToNumber,
            xmlXPathCastToString,
            xmlXPathCmpNodes,
            xmlXPathCompile,
            xmlXPathCompiledEval,
            xmlXPathCompiledEvalToBoolean,
            xmlXPathContextSetCache,
            xmlXPathConvertBoolean,
            xmlXPathConvertNumber,
            xmlXPathConvertString,
            xmlXPathCtxtCompile,
            xmlXPathEval,
            xmlXPathEvalExpression,
            xmlXPathEvalPredicate,
            xmlXPathFreeCompExpr,
            xmlXPathFreeContext,
            xmlXPathFreeNodeSet,
            xmlXPathFreeNodeSetList,
            xmlXPathFreeObject,
            xmlXPathInit,
            xmlXPathIsInf,
            xmlXPathIsNaN,
            xmlXPathNewContext,
            xmlXPathNodeEval,
            xmlXPathNodeSetCreate,
            xmlXPathObjectCopy,
            xmlXPathOrderDocElems,
            xmlXPathSetContextNode,
            xmlXPtrBuildNodeList,
            xmlXPtrEval,
            xmlXPtrEvalRangePredicate,
            xmlXPtrFreeLocationSet,
            xmlXPtrLocationSetAdd,
            xmlXPtrLocationSetCreate,
            xmlXPtrLocationSetDel,
            xmlXPtrLocationSetMerge,
            xmlXPtrLocationSetRemove,
            xmlXPtrNewCollapsedRange,
            xmlXPtrNewContext,
            xmlXPtrNewLocationSetNodeSet,
            xmlXPtrNewLocationSetNodes,
            xmlXPtrNewRange,
            xmlXPtrNewRangeNodeObject,
            xmlXPtrNewRangeNodePoint,
            xmlXPtrNewRangeNodes,
            xmlXPtrNewRangePointNode,
            xmlXPtrNewRangePoints,
            xmlXPtrRangeToFunction,
            xmlXPtrWrapLocationSet,
            BASE_BUFFER_SIZE,
            HAVE_ARPA_INET_H,
            HAVE_ARPA_NAMESER_H,
            HAVE_CTYPE_H,
            HAVE_DIRENT_H,
            HAVE_DLFCN_H,
            HAVE_ERRNO_H,
            HAVE_FCNTL_H,
            HAVE_FINITE,
            HAVE_FLOAT_H,
            HAVE_FPRINTF,
            HAVE_FTIME,
            HAVE_GETTIMEOFDAY,
            HAVE_INTTYPES_H,
            HAVE_ISASCII,
            HAVE_LIBZ,
            HAVE_LIMITS_H,
            HAVE_LOCALTIME,
            HAVE_MATH_H,
            HAVE_MEMORY_H,
            HAVE_MMAP,
            HAVE_MUNMAP,
            HAVE_NETDB_H,
            HAVE_NETINET_IN_H,
            HAVE_POLL_H,
            HAVE_PRINTF,
            HAVE_PUTENV,
            HAVE_RAND,
            HAVE_RESOLV_H,
            HAVE_SIGNAL,
            HAVE_SIGNAL_H,
            HAVE_SNPRINTF,
            HAVE_SPRINTF,
            HAVE_SRAND,
            HAVE_SSCANF,
            HAVE_STAT,
            HAVE_STDARG_H,
            HAVE_STDINT_H,
            HAVE_STDLIB_H,
            HAVE_STRDUP,
            HAVE_STRERROR,
            HAVE_STRFTIME,
            HAVE_STRINGS_H,
            HAVE_STRING_H,
            HAVE_STRNDUP,
            HAVE_SYS_MMAN_H,
            HAVE_SYS_SELECT_H,
            HAVE_SYS_SOCKET_H,
            HAVE_SYS_STAT_H,
            HAVE_SYS_TIMEB_H,
            HAVE_SYS_TIME_H,
            HAVE_SYS_TYPES_H,
            HAVE_TIME,
            HAVE_TIME_H,
            HAVE_VA_COPY,
            HAVE_VFPRINTF,
            HAVE_VSNPRINTF,
            HAVE_VSPRINTF,
            HTML_DEPRECATED,
            HTML_INVALID,
            HTML_NA,
            HTML_PARSE_COMPACT,
            HTML_PARSE_IGNORE_ENC,
            HTML_PARSE_NOBLANKS,
            HTML_PARSE_NODEFDTD,
            HTML_PARSE_NOERROR,
            HTML_PARSE_NOIMPLIED,
            HTML_PARSE_NONET,
            HTML_PARSE_NOWARNING,
            HTML_PARSE_PEDANTIC,
            HTML_PARSE_RECOVER,
            HTML_REQUIRED,
            HTML_VALID,
            INPUT_CHUNK,
            LIBXML_DOTTED_VERSION,
            LIBXML_MODULE_EXTENSION,
            LIBXML_VERSION,
            LIBXML_VERSION_EXTRA,
            LIBXML_VERSION_STRING,
            LT_OBJDIR,
            PACKAGE,
            PACKAGE_BUGREPORT,
            PACKAGE_NAME,
            PACKAGE_STRING,
            PACKAGE_TARNAME,
            PACKAGE_URL,
            PACKAGE_VERSION,
            STDC_HEADERS,
            VA_LIST_IS_ARRAY,
            VERSION,
            XLINK_ACTUATE_AUTO,
            XLINK_ACTUATE_NONE,
            XLINK_ACTUATE_ONREQUEST,
            XLINK_SHOW_EMBED,
            XLINK_SHOW_NEW,
            XLINK_SHOW_NONE,
            XLINK_SHOW_REPLACE,
            XLINK_TYPE_EXTENDED,
            XLINK_TYPE_EXTENDED_SET,
            XLINK_TYPE_NONE,
            XLINK_TYPE_SIMPLE,
            XML_ATTRIBUTE_CDATA,
            XML_ATTRIBUTE_DECL,
            XML_ATTRIBUTE_ENTITIES,
            XML_ATTRIBUTE_ENTITY,
            XML_ATTRIBUTE_ENUMERATION,
            XML_ATTRIBUTE_FIXED,
            XML_ATTRIBUTE_ID,
            XML_ATTRIBUTE_IDREF,
            XML_ATTRIBUTE_IDREFS,
            XML_ATTRIBUTE_IMPLIED,
            XML_ATTRIBUTE_NMTOKEN,
            XML_ATTRIBUTE_NMTOKENS,
            XML_ATTRIBUTE_NODE,
            XML_ATTRIBUTE_NONE,
            XML_ATTRIBUTE_NOTATION,
            XML_ATTRIBUTE_REQUIRED,
            XML_BUFFER_ALLOC_BOUNDED,
            XML_BUFFER_ALLOC_DOUBLEIT,
            XML_BUFFER_ALLOC_EXACT,
            XML_BUFFER_ALLOC_HYBRID,
            XML_BUFFER_ALLOC_IMMUTABLE,
            XML_BUFFER_ALLOC_IO,
            XML_BUF_OVERFLOW,
            XML_C14N_CREATE_CTXT,
            XML_C14N_CREATE_STACK,
            XML_C14N_INVALID_NODE,
            XML_C14N_RELATIVE_NAMESPACE,
            XML_C14N_REQUIRES_UTF8,
            XML_C14N_UNKNOW_NODE,
            XML_CATALOG_ENTRY_BROKEN,
            XML_CATALOG_MISSING_ATTR,
            XML_CATALOG_NOT_CATALOG,
            XML_CATALOG_PREFER_VALUE,
            XML_CATALOG_RECURSION,
            XML_CATA_ALLOW_ALL,
            XML_CATA_ALLOW_DOCUMENT,
            XML_CATA_ALLOW_GLOBAL,
            XML_CATA_ALLOW_NONE,
            XML_CATA_PREFER_NONE,
            XML_CATA_PREFER_PUBLIC,
            XML_CATA_PREFER_SYSTEM,
            XML_CDATA_SECTION_NODE,
            XML_CHAR_ENCODING_2022_JP,
            XML_CHAR_ENCODING_8859_1,
            XML_CHAR_ENCODING_8859_2,
            XML_CHAR_ENCODING_8859_3,
            XML_CHAR_ENCODING_8859_4,
            XML_CHAR_ENCODING_8859_5,
            XML_CHAR_ENCODING_8859_6,
            XML_CHAR_ENCODING_8859_7,
            XML_CHAR_ENCODING_8859_8,
            XML_CHAR_ENCODING_8859_9,
            XML_CHAR_ENCODING_ASCII,
            XML_CHAR_ENCODING_EBCDIC,
            XML_CHAR_ENCODING_ERROR,
            XML_CHAR_ENCODING_EUC_JP,
            XML_CHAR_ENCODING_NONE,
            XML_CHAR_ENCODING_SHIFT_JIS,
            XML_CHAR_ENCODING_UCS2,
            XML_CHAR_ENCODING_UCS4BE,
            XML_CHAR_ENCODING_UCS4LE,
            XML_CHAR_ENCODING_UCS4_2143,
            XML_CHAR_ENCODING_UCS4_3412,
            XML_CHAR_ENCODING_UTF16BE,
            XML_CHAR_ENCODING_UTF16LE,
            XML_CHAR_ENCODING_UTF8,
            XML_CHECK_ENTITY_TYPE,
            XML_CHECK_FOUND_ATTRIBUTE,
            XML_CHECK_FOUND_CDATA,
            XML_CHECK_FOUND_COMMENT,
            XML_CHECK_FOUND_DOCTYPE,
            XML_CHECK_FOUND_ELEMENT,
            XML_CHECK_FOUND_ENTITY,
            XML_CHECK_FOUND_ENTITYREF,
            XML_CHECK_FOUND_FRAGMENT,
            XML_CHECK_FOUND_NOTATION,
            XML_CHECK_FOUND_PI,
            XML_CHECK_FOUND_TEXT,
            XML_CHECK_NAME_NOT_NULL,
            XML_CHECK_NOT_ATTR,
            XML_CHECK_NOT_ATTR_DECL,
            XML_CHECK_NOT_DTD,
            XML_CHECK_NOT_ELEM_DECL,
            XML_CHECK_NOT_ENTITY_DECL,
            XML_CHECK_NOT_NCNAME,
            XML_CHECK_NOT_NS_DECL,
            XML_CHECK_NOT_UTF8,
            XML_CHECK_NO_DICT,
            XML_CHECK_NO_DOC,
            XML_CHECK_NO_ELEM,
            XML_CHECK_NO_HREF,
            XML_CHECK_NO_NAME,
            XML_CHECK_NO_NEXT,
            XML_CHECK_NO_PARENT,
            XML_CHECK_NO_PREV,
            XML_CHECK_NS_ANCESTOR,
            XML_CHECK_NS_SCOPE,
            XML_CHECK_OUTSIDE_DICT,
            XML_CHECK_UNKNOWN_NODE,
            XML_CHECK_WRONG_DOC,
            XML_CHECK_WRONG_NAME,
            XML_CHECK_WRONG_NEXT,
            XML_CHECK_WRONG_PARENT,
            XML_CHECK_WRONG_PREV,
            XML_COMMENT_NODE,
            XML_COMPLETE_ATTRS,
            XML_DEFAULT_VERSION,
            XML_DETECT_IDS,
            XML_DOCB_DOCUMENT_NODE,
            XML_DOCUMENT_FRAG_NODE,
            XML_DOCUMENT_NODE,
            XML_DOCUMENT_TYPE_NODE,
            XML_DOC_DTDVALID,
            XML_DOC_HTML,
            XML_DOC_INTERNAL,
            XML_DOC_NSVALID,
            XML_DOC_OLD10,
            XML_DOC_USERBUILT,
            XML_DOC_WELLFORMED,
            XML_DOC_XINCLUDE,
            XML_DTD_ATTRIBUTE_DEFAULT,
            XML_DTD_ATTRIBUTE_REDEFINED,
            XML_DTD_ATTRIBUTE_VALUE,
            XML_DTD_CONTENT_ERROR,
            XML_DTD_CONTENT_MODEL,
            XML_DTD_CONTENT_NOT_DETERMINIST,
            XML_DTD_DIFFERENT_PREFIX,
            XML_DTD_DUP_TOKEN,
            XML_DTD_ELEM_DEFAULT_NAMESPACE,
            XML_DTD_ELEM_NAMESPACE,
            XML_DTD_ELEM_REDEFINED,
            XML_DTD_EMPTY_NOTATION,
            XML_DTD_ENTITY_TYPE,
            XML_DTD_ID_FIXED,
            XML_DTD_ID_REDEFINED,
            XML_DTD_ID_SUBSET,
            XML_DTD_INVALID_CHILD,
            XML_DTD_INVALID_DEFAULT,
            XML_DTD_LOAD_ERROR,
            XML_DTD_MISSING_ATTRIBUTE,
            XML_DTD_MIXED_CORRUPT,
            XML_DTD_MULTIPLE_ID,
            XML_DTD_NODE,
            XML_DTD_NOTATION_REDEFINED,
            XML_DTD_NOTATION_VALUE,
            XML_DTD_NOT_EMPTY,
            XML_DTD_NOT_PCDATA,
            XML_DTD_NOT_STANDALONE,
            XML_DTD_NO_DOC,
            XML_DTD_NO_DTD,
            XML_DTD_NO_ELEM_NAME,
            XML_DTD_NO_PREFIX,
            XML_DTD_NO_ROOT,
            XML_DTD_ROOT_NAME,
            XML_DTD_STANDALONE_DEFAULTED,
            XML_DTD_STANDALONE_WHITE_SPACE,
            XML_DTD_UNKNOWN_ATTRIBUTE,
            XML_DTD_UNKNOWN_ELEM,
            XML_DTD_UNKNOWN_ENTITY,
            XML_DTD_UNKNOWN_ID,
            XML_DTD_UNKNOWN_NOTATION,
            XML_DTD_XMLID_TYPE,
            XML_DTD_XMLID_VALUE,
            XML_ELEMENT_CONTENT_ELEMENT,
            XML_ELEMENT_CONTENT_MULT,
            XML_ELEMENT_CONTENT_ONCE,
            XML_ELEMENT_CONTENT_OPT,
            XML_ELEMENT_CONTENT_OR,
            XML_ELEMENT_CONTENT_PCDATA,
            XML_ELEMENT_CONTENT_PLUS,
            XML_ELEMENT_CONTENT_SEQ,
            XML_ELEMENT_DECL,
            XML_ELEMENT_NODE,
            XML_ELEMENT_TYPE_ANY,
            XML_ELEMENT_TYPE_ELEMENT,
            XML_ELEMENT_TYPE_EMPTY,
            XML_ELEMENT_TYPE_MIXED,
            XML_ELEMENT_TYPE_UNDEFINED,
            XML_ENTITY_DECL,
            XML_ENTITY_NODE,
            XML_ENTITY_REF_NODE,
            XML_ERR_ATTLIST_NOT_FINISHED,
            XML_ERR_ATTLIST_NOT_STARTED,
            XML_ERR_ATTRIBUTE_NOT_FINISHED,
            XML_ERR_ATTRIBUTE_NOT_STARTED,
            XML_ERR_ATTRIBUTE_REDEFINED,
            XML_ERR_ATTRIBUTE_WITHOUT_VALUE,
            XML_ERR_CDATA_NOT_FINISHED,
            XML_ERR_CHARREF_AT_EOF,
            XML_ERR_CHARREF_IN_DTD,
            XML_ERR_CHARREF_IN_EPILOG,
            XML_ERR_CHARREF_IN_PROLOG,
            XML_ERR_COMMENT_NOT_FINISHED,
            XML_ERR_CONDSEC_INVALID,
            XML_ERR_CONDSEC_INVALID_KEYWORD,
            XML_ERR_CONDSEC_NOT_FINISHED,
            XML_ERR_CONDSEC_NOT_STARTED,
            XML_ERR_DOCTYPE_NOT_FINISHED,
            XML_ERR_DOCUMENT_EMPTY,
            XML_ERR_DOCUMENT_END,
            XML_ERR_DOCUMENT_START,
            XML_ERR_ELEMCONTENT_NOT_FINISHED,
            XML_ERR_ELEMCONTENT_NOT_STARTED,
            XML_ERR_ENCODING_NAME,
            XML_ERR_ENTITYREF_AT_EOF,
            XML_ERR_ENTITYREF_IN_DTD,
            XML_ERR_ENTITYREF_IN_EPILOG,
            XML_ERR_ENTITYREF_IN_PROLOG,
            XML_ERR_ENTITYREF_NO_NAME,
            XML_ERR_ENTITYREF_SEMICOL_MISSING,
            XML_ERR_ENTITY_BOUNDARY,
            XML_ERR_ENTITY_CHAR_ERROR,
            XML_ERR_ENTITY_IS_EXTERNAL,
            XML_ERR_ENTITY_IS_PARAMETER,
            XML_ERR_ENTITY_LOOP,
            XML_ERR_ENTITY_NOT_FINISHED,
            XML_ERR_ENTITY_NOT_STARTED,
            XML_ERR_ENTITY_PE_INTERNAL,
            XML_ERR_ENTITY_PROCESSING,
            XML_ERR_EQUAL_REQUIRED,
            XML_ERR_ERROR,
            XML_ERR_EXTRA_CONTENT,
            XML_ERR_EXT_ENTITY_STANDALONE,
            XML_ERR_EXT_SUBSET_NOT_FINISHED,
            XML_ERR_FATAL,
            XML_ERR_GT_REQUIRED,
            XML_ERR_HYPHEN_IN_COMMENT,
            XML_ERR_INTERNAL_ERROR,
            XML_ERR_INVALID_CHAR,
            XML_ERR_INVALID_CHARREF,
            XML_ERR_INVALID_DEC_CHARREF,
            XML_ERR_INVALID_ENCODING,
            XML_ERR_INVALID_HEX_CHARREF,
            XML_ERR_INVALID_URI,
            XML_ERR_LITERAL_NOT_FINISHED,
            XML_ERR_LITERAL_NOT_STARTED,
            XML_ERR_LTSLASH_REQUIRED,
            XML_ERR_LT_IN_ATTRIBUTE,
            XML_ERR_LT_REQUIRED,
            XML_ERR_MISPLACED_CDATA_END,
            XML_ERR_MISSING_ENCODING,
            XML_ERR_MIXED_NOT_FINISHED,
            XML_ERR_MIXED_NOT_STARTED,
            XML_ERR_NAME_REQUIRED,
            XML_ERR_NAME_TOO_LONG,
            XML_ERR_NMTOKEN_REQUIRED,
            XML_ERR_NONE,
            XML_ERR_NOTATION_NOT_FINISHED,
            XML_ERR_NOTATION_NOT_STARTED,
            XML_ERR_NOTATION_PROCESSING,
            XML_ERR_NOT_STANDALONE,
            XML_ERR_NOT_WELL_BALANCED,
            XML_ERR_NO_DTD,
            XML_ERR_NO_MEMORY,
            XML_ERR_NS_DECL_ERROR,
            XML_ERR_OK,
            XML_ERR_PCDATA_REQUIRED,
            XML_ERR_PEREF_AT_EOF,
            XML_ERR_PEREF_IN_EPILOG,
            XML_ERR_PEREF_IN_INT_SUBSET,
            XML_ERR_PEREF_IN_PROLOG,
            XML_ERR_PEREF_NO_NAME,
            XML_ERR_PEREF_SEMICOL_MISSING,
            XML_ERR_PI_NOT_FINISHED,
            XML_ERR_PI_NOT_STARTED,
            XML_ERR_PUBID_REQUIRED,
            XML_ERR_RESERVED_XML_NAME,
            XML_ERR_SEPARATOR_REQUIRED,
            XML_ERR_SPACE_REQUIRED,
            XML_ERR_STANDALONE_VALUE,
            XML_ERR_STRING_NOT_CLOSED,
            XML_ERR_STRING_NOT_STARTED,
            XML_ERR_TAG_NAME_MISMATCH,
            XML_ERR_TAG_NOT_FINISHED,
            XML_ERR_UNDECLARED_ENTITY,
            XML_ERR_UNKNOWN_ENCODING,
            XML_ERR_UNKNOWN_VERSION,
            XML_ERR_UNPARSED_ENTITY,
            XML_ERR_UNSUPPORTED_ENCODING,
            XML_ERR_URI_FRAGMENT,
            XML_ERR_URI_REQUIRED,
            XML_ERR_USER_STOP,
            XML_ERR_VALUE_REQUIRED,
            XML_ERR_VERSION_MISMATCH,
            XML_ERR_VERSION_MISSING,
            XML_ERR_WARNING,
            XML_ERR_XMLDECL_NOT_FINISHED,
            XML_ERR_XMLDECL_NOT_STARTED,
            XML_EXTERNAL_GENERAL_PARSED_ENTITY,
            XML_EXTERNAL_GENERAL_UNPARSED_ENTITY,
            XML_EXTERNAL_PARAMETER_ENTITY,
            XML_FROM_BUFFER,
            XML_FROM_C14N,
            XML_FROM_CATALOG,
            XML_FROM_CHECK,
            XML_FROM_DATATYPE,
            XML_FROM_DTD,
            XML_FROM_FTP,
            XML_FROM_HTML,
            XML_FROM_HTTP,
            XML_FROM_I18N,
            XML_FROM_IO,
            XML_FROM_MEMORY,
            XML_FROM_MODULE,
            XML_FROM_NAMESPACE,
            XML_FROM_NONE,
            XML_FROM_OUTPUT,
            XML_FROM_PARSER,
            XML_FROM_REGEXP,
            XML_FROM_RELAXNGP,
            XML_FROM_RELAXNGV,
            XML_FROM_SCHEMASP,
            XML_FROM_SCHEMASV,
            XML_FROM_SCHEMATRONV,
            XML_FROM_TREE,
            XML_FROM_URI,
            XML_FROM_VALID,
            XML_FROM_WRITER,
            XML_FROM_XINCLUDE,
            XML_FROM_XPATH,
            XML_FROM_XPOINTER,
            XML_FROM_XSLT,
            XML_FTP_ACCNT,
            XML_FTP_EPSV_ANSWER,
            XML_FTP_PASV_ANSWER,
            XML_FTP_URL_SYNTAX,
            XML_HTML_DOCUMENT_NODE,
            XML_HTML_STRUCURE_ERROR,
            XML_HTML_UNKNOWN_TAG,
            XML_HTTP_UNKNOWN_HOST,
            XML_HTTP_URL_SYNTAX,
            XML_HTTP_USE_IP,
            XML_I18N_CONV_FAILED,
            XML_I18N_EXCESS_HANDLER,
            XML_I18N_NO_HANDLER,
            XML_I18N_NO_NAME,
            XML_I18N_NO_OUTPUT,
            XML_INTERNAL_GENERAL_ENTITY,
            XML_INTERNAL_PARAMETER_ENTITY,
            XML_INTERNAL_PREDEFINED_ENTITY,
            XML_IO_BUFFER_FULL,
            XML_IO_EACCES,
            XML_IO_EADDRINUSE,
            XML_IO_EAFNOSUPPORT,
            XML_IO_EAGAIN,
            XML_IO_EALREADY,
            XML_IO_EBADF,
            XML_IO_EBADMSG,
            XML_IO_EBUSY,
            XML_IO_ECANCELED,
            XML_IO_ECHILD,
            XML_IO_ECONNREFUSED,
            XML_IO_EDEADLK,
            XML_IO_EDOM,
            XML_IO_EEXIST,
            XML_IO_EFAULT,
            XML_IO_EFBIG,
            XML_IO_EINPROGRESS,
            XML_IO_EINTR,
            XML_IO_EINVAL,
            XML_IO_EIO,
            XML_IO_EISCONN,
            XML_IO_EISDIR,
            XML_IO_EMFILE,
            XML_IO_EMLINK,
            XML_IO_EMSGSIZE,
            XML_IO_ENAMETOOLONG,
            XML_IO_ENCODER,
            XML_IO_ENETUNREACH,
            XML_IO_ENFILE,
            XML_IO_ENODEV,
            XML_IO_ENOENT,
            XML_IO_ENOEXEC,
            XML_IO_ENOLCK,
            XML_IO_ENOMEM,
            XML_IO_ENOSPC,
            XML_IO_ENOSYS,
            XML_IO_ENOTDIR,
            XML_IO_ENOTEMPTY,
            XML_IO_ENOTSOCK,
            XML_IO_ENOTSUP,
            XML_IO_ENOTTY,
            XML_IO_ENXIO,
            XML_IO_EPERM,
            XML_IO_EPIPE,
            XML_IO_ERANGE,
            XML_IO_EROFS,
            XML_IO_ESPIPE,
            XML_IO_ESRCH,
            XML_IO_ETIMEDOUT,
            XML_IO_EXDEV,
            XML_IO_FLUSH,
            XML_IO_LOAD_ERROR,
            XML_IO_NETWORK_ATTEMPT,
            XML_IO_NO_INPUT,
            XML_IO_UNKNOWN,
            XML_IO_WRITE,
            XML_MAX_DICTIONARY_LIMIT,
            XML_MAX_LOOKUP_LIMIT,
            XML_MAX_NAMELEN,
            XML_MAX_NAME_LENGTH,
            XML_MAX_TEXT_LENGTH,
            XML_MODULE_CLOSE,
            XML_MODULE_LAZY,
            XML_MODULE_LOCAL,
            XML_MODULE_OPEN,
            XML_NAMESPACE_DECL,
            XML_NOTATION_NODE,
            XML_NS_ERR_ATTRIBUTE_REDEFINED,
            XML_NS_ERR_COLON,
            XML_NS_ERR_EMPTY,
            XML_NS_ERR_QNAME,
            XML_NS_ERR_UNDEFINED_NAMESPACE,
            XML_NS_ERR_XML_NAMESPACE,
            XML_PARSER_ATTRIBUTE_VALUE,
            XML_PARSER_CDATA_SECTION,
            XML_PARSER_COMMENT,
            XML_PARSER_CONTENT,
            XML_PARSER_DEFAULTATTRS,
            XML_PARSER_DTD,
            XML_PARSER_END_TAG,
            XML_PARSER_ENTITY_DECL,
            XML_PARSER_ENTITY_VALUE,
            XML_PARSER_EOF,
            XML_PARSER_EPILOG,
            XML_PARSER_IGNORE,
            XML_PARSER_LOADDTD,
            XML_PARSER_MISC,
            XML_PARSER_PI,
            XML_PARSER_PROLOG,
            XML_PARSER_PUBLIC_LITERAL,
            XML_PARSER_SEVERITY_ERROR,
            XML_PARSER_SEVERITY_VALIDITY_ERROR,
            XML_PARSER_SEVERITY_VALIDITY_WARNING,
            XML_PARSER_SEVERITY_WARNING,
            XML_PARSER_START,
            XML_PARSER_START_TAG,
            XML_PARSER_SUBST_ENTITIES,
            XML_PARSER_SYSTEM_LITERAL,
            XML_PARSER_VALIDATE,
            XML_PARSE_BIG_LINES,
            XML_PARSE_COMPACT,
            XML_PARSE_DOM,
            XML_PARSE_DTDATTR,
            XML_PARSE_DTDLOAD,
            XML_PARSE_DTDVALID,
            XML_PARSE_HUGE,
            XML_PARSE_IGNORE_ENC,
            XML_PARSE_NOBASEFIX,
            XML_PARSE_NOBLANKS,
            XML_PARSE_NOCDATA,
            XML_PARSE_NODICT,
            XML_PARSE_NOENT,
            XML_PARSE_NOERROR,
            XML_PARSE_NONET,
            XML_PARSE_NOWARNING,
            XML_PARSE_NOXINCNODE,
            XML_PARSE_NSCLEAN,
            XML_PARSE_OLD10,
            XML_PARSE_OLDSAX,
            XML_PARSE_PEDANTIC,
            XML_PARSE_PUSH_DOM,
            XML_PARSE_PUSH_SAX,
            XML_PARSE_READER,
            XML_PARSE_RECOVER,
            XML_PARSE_SAX,
            XML_PARSE_SAX1,
            XML_PARSE_UNKNOWN,
            XML_PARSE_XINCLUDE,
            XML_PATTERN_DEFAULT,
            XML_PATTERN_XPATH,
            XML_PATTERN_XSFIELD,
            XML_PATTERN_XSSEL,
            XML_PI_NODE,
            XML_READER_TYPE_ATTRIBUTE,
            XML_READER_TYPE_CDATA,
            XML_READER_TYPE_COMMENT,
            XML_READER_TYPE_DOCUMENT,
            XML_READER_TYPE_DOCUMENT_FRAGMENT,
            XML_READER_TYPE_DOCUMENT_TYPE,
            XML_READER_TYPE_ELEMENT,
            XML_READER_TYPE_END_ELEMENT,
            XML_READER_TYPE_END_ENTITY,
            XML_READER_TYPE_ENTITY,
            XML_READER_TYPE_ENTITY_REFERENCE,
            XML_READER_TYPE_NONE,
            XML_READER_TYPE_NOTATION,
            XML_READER_TYPE_PROCESSING_INSTRUCTION,
            XML_READER_TYPE_SIGNIFICANT_WHITESPACE,
            XML_READER_TYPE_TEXT,
            XML_READER_TYPE_WHITESPACE,
            XML_READER_TYPE_XML_DECLARATION,
            XML_REGEXP_COMPILE_ERROR,
            XML_RELAXNGP_CRNG,
            XML_RELAXNGP_FREE_DOC,
            XML_RELAXNGP_NONE,
            XML_RELAXNG_ERR_ATTREXTRANS,
            XML_RELAXNG_ERR_ATTRNAME,
            XML_RELAXNG_ERR_ATTRNONS,
            XML_RELAXNG_ERR_ATTRVALID,
            XML_RELAXNG_ERR_ATTRWRONGNS,
            XML_RELAXNG_ERR_CONTENTVALID,
            XML_RELAXNG_ERR_DATAELEM,
            XML_RELAXNG_ERR_DATATYPE,
            XML_RELAXNG_ERR_DUPID,
            XML_RELAXNG_ERR_ELEMEXTRANS,
            XML_RELAXNG_ERR_ELEMNAME,
            XML_RELAXNG_ERR_ELEMNONS,
            XML_RELAXNG_ERR_ELEMNOTEMPTY,
            XML_RELAXNG_ERR_ELEMWRONG,
            XML_RELAXNG_ERR_ELEMWRONGNS,
            XML_RELAXNG_ERR_EXTRACONTENT,
            XML_RELAXNG_ERR_EXTRADATA,
            XML_RELAXNG_ERR_INTEREXTRA,
            XML_RELAXNG_ERR_INTERNAL,
            XML_RELAXNG_ERR_INTERNODATA,
            XML_RELAXNG_ERR_INTERSEQ,
            XML_RELAXNG_ERR_INVALIDATTR,
            XML_RELAXNG_ERR_LACKDATA,
            XML_RELAXNG_ERR_LIST,
            XML_RELAXNG_ERR_LISTELEM,
            XML_RELAXNG_ERR_LISTEMPTY,
            XML_RELAXNG_ERR_LISTEXTRA,
            XML_RELAXNG_ERR_MEMORY,
            XML_RELAXNG_ERR_NODEFINE,
            XML_RELAXNG_ERR_NOELEM,
            XML_RELAXNG_ERR_NOGRAMMAR,
            XML_RELAXNG_ERR_NOSTATE,
            XML_RELAXNG_ERR_NOTELEM,
            XML_RELAXNG_ERR_TEXTWRONG,
            XML_RELAXNG_ERR_TYPE,
            XML_RELAXNG_ERR_TYPECMP,
            XML_RELAXNG_ERR_TYPEVAL,
            XML_RELAXNG_ERR_VALELEM,
            XML_RELAXNG_ERR_VALUE,
            XML_RELAXNG_OK,
            XML_RNGP_ANYNAME_ATTR_ANCESTOR,
            XML_RNGP_ATTRIBUTE_CHILDREN,
            XML_RNGP_ATTRIBUTE_CONTENT,
            XML_RNGP_ATTRIBUTE_EMPTY,
            XML_RNGP_ATTRIBUTE_NOOP,
            XML_RNGP_ATTR_CONFLICT,
            XML_RNGP_CHOICE_CONTENT,
            XML_RNGP_CHOICE_EMPTY,
            XML_RNGP_CREATE_FAILURE,
            XML_RNGP_DATA_CONTENT,
            XML_RNGP_DEFINE_CREATE_FAILED,
            XML_RNGP_DEFINE_EMPTY,
            XML_RNGP_DEFINE_MISSING,
            XML_RNGP_DEFINE_NAME_MISSING,
            XML_RNGP_DEF_CHOICE_AND_INTERLEAVE,
            XML_RNGP_ELEMENT_CONTENT,
            XML_RNGP_ELEMENT_EMPTY,
            XML_RNGP_ELEMENT_NAME,
            XML_RNGP_ELEMENT_NO_CONTENT,
            XML_RNGP_ELEM_CONTENT_EMPTY,
            XML_RNGP_ELEM_CONTENT_ERROR,
            XML_RNGP_ELEM_TEXT_CONFLICT,
            XML_RNGP_EMPTY,
            XML_RNGP_EMPTY_CONSTRUCT,
            XML_RNGP_EMPTY_CONTENT,
            XML_RNGP_EMPTY_NOT_EMPTY,
            XML_RNGP_ERROR_TYPE_LIB,
            XML_RNGP_EXCEPT_EMPTY,
            XML_RNGP_EXCEPT_MISSING,
            XML_RNGP_EXCEPT_MULTIPLE,
            XML_RNGP_EXCEPT_NO_CONTENT,
            XML_RNGP_EXTERNALREF_EMTPY,
            XML_RNGP_EXTERNALREF_RECURSE,
            XML_RNGP_EXTERNAL_REF_FAILURE,
            XML_RNGP_FORBIDDEN_ATTRIBUTE,
            XML_RNGP_FOREIGN_ELEMENT,
            XML_RNGP_GRAMMAR_CONTENT,
            XML_RNGP_GRAMMAR_EMPTY,
            XML_RNGP_GRAMMAR_MISSING,
            XML_RNGP_GRAMMAR_NO_START,
            XML_RNGP_GROUP_ATTR_CONFLICT,
            XML_RNGP_HREF_ERROR,
            XML_RNGP_INCLUDE_EMPTY,
            XML_RNGP_INCLUDE_FAILURE,
            XML_RNGP_INCLUDE_RECURSE,
            XML_RNGP_INTERLEAVE_ADD,
            XML_RNGP_INTERLEAVE_CREATE_FAILED,
            XML_RNGP_INTERLEAVE_EMPTY,
            XML_RNGP_INTERLEAVE_NO_CONTENT,
            XML_RNGP_INVALID_DEFINE_NAME,
            XML_RNGP_INVALID_URI,
            XML_RNGP_INVALID_VALUE,
            XML_RNGP_MISSING_HREF,
            XML_RNGP_NAME_MISSING,
            XML_RNGP_NEED_COMBINE,
            XML_RNGP_NOTALLOWED_NOT_EMPTY,
            XML_RNGP_NSNAME_ATTR_ANCESTOR,
            XML_RNGP_NSNAME_NO_NS,
            XML_RNGP_PARAM_FORBIDDEN,
            XML_RNGP_PARAM_NAME_MISSING,
            XML_RNGP_PARENTREF_CREATE_FAILED,
            XML_RNGP_PARENTREF_NAME_INVALID,
            XML_RNGP_PARENTREF_NOT_EMPTY,
            XML_RNGP_PARENTREF_NO_NAME,
            XML_RNGP_PARENTREF_NO_PARENT,
            XML_RNGP_PARSE_ERROR,
            XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME,
            XML_RNGP_PAT_ATTR_ATTR,
            XML_RNGP_PAT_ATTR_ELEM,
            XML_RNGP_PAT_DATA_EXCEPT_ATTR,
            XML_RNGP_PAT_DATA_EXCEPT_ELEM,
            XML_RNGP_PAT_DATA_EXCEPT_EMPTY,
            XML_RNGP_PAT_DATA_EXCEPT_GROUP,
            XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE,
            XML_RNGP_PAT_DATA_EXCEPT_LIST,
            XML_RNGP_PAT_DATA_EXCEPT_ONEMORE,
            XML_RNGP_PAT_DATA_EXCEPT_REF,
            XML_RNGP_PAT_DATA_EXCEPT_TEXT,
            XML_RNGP_PAT_LIST_ATTR,
            XML_RNGP_PAT_LIST_ELEM,
            XML_RNGP_PAT_LIST_INTERLEAVE,
            XML_RNGP_PAT_LIST_LIST,
            XML_RNGP_PAT_LIST_REF,
            XML_RNGP_PAT_LIST_TEXT,
            XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME,
            XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME,
            XML_RNGP_PAT_ONEMORE_GROUP_ATTR,
            XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR,
            XML_RNGP_PAT_START_ATTR,
            XML_RNGP_PAT_START_DATA,
            XML_RNGP_PAT_START_EMPTY,
            XML_RNGP_PAT_START_GROUP,
            XML_RNGP_PAT_START_INTERLEAVE,
            XML_RNGP_PAT_START_LIST,
            XML_RNGP_PAT_START_ONEMORE,
            XML_RNGP_PAT_START_TEXT,
            XML_RNGP_PAT_START_VALUE,
            XML_RNGP_PREFIX_UNDEFINED,
            XML_RNGP_REF_CREATE_FAILED,
            XML_RNGP_REF_CYCLE,
            XML_RNGP_REF_NAME_INVALID,
            XML_RNGP_REF_NOT_EMPTY,
            XML_RNGP_REF_NO_DEF,
            XML_RNGP_REF_NO_NAME,
            XML_RNGP_START_CHOICE_AND_INTERLEAVE,
            XML_RNGP_START_CONTENT,
            XML_RNGP_START_EMPTY,
            XML_RNGP_START_MISSING,
            XML_RNGP_TEXT_EXPECTED,
            XML_RNGP_TEXT_HAS_CHILD,
            XML_RNGP_TYPE_MISSING,
            XML_RNGP_TYPE_NOT_FOUND,
            XML_RNGP_TYPE_VALUE,
            XML_RNGP_UNKNOWN_ATTRIBUTE,
            XML_RNGP_UNKNOWN_COMBINE,
            XML_RNGP_UNKNOWN_CONSTRUCT,
            XML_RNGP_UNKNOWN_TYPE_LIB,
            XML_RNGP_URI_FRAGMENT,
            XML_RNGP_URI_NOT_ABSOLUTE,
            XML_RNGP_VALUE_EMPTY,
            XML_RNGP_VALUE_NO_CONTENT,
            XML_RNGP_XMLNS_NAME,
            XML_RNGP_XML_NS,
            XML_SAVE_AS_HTML,
            XML_SAVE_AS_XML,
            XML_SAVE_CHAR_INVALID,
            XML_SAVE_FORMAT,
            XML_SAVE_NOT_UTF8,
            XML_SAVE_NO_DECL,
            XML_SAVE_NO_DOCTYPE,
            XML_SAVE_NO_EMPTY,
            XML_SAVE_NO_XHTML,
            XML_SAVE_UNKNOWN_ENCODING,
            XML_SAVE_WSNONSIG,
            XML_SAVE_XHTML,
            XML_SAX2_MAGIC,
            XML_SCHEMAP_AG_PROPS_CORRECT,
            XML_SCHEMAP_ATTRFORMDEFAULT_VALUE,
            XML_SCHEMAP_ATTRGRP_NONAME_NOREF,
            XML_SCHEMAP_ATTR_NONAME_NOREF,
            XML_SCHEMAP_AU_PROPS_CORRECT,
            XML_SCHEMAP_AU_PROPS_CORRECT_2,
            XML_SCHEMAP_A_PROPS_CORRECT_2,
            XML_SCHEMAP_A_PROPS_CORRECT_3,
            XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF,
            XML_SCHEMAP_COS_ALL_LIMITED,
            XML_SCHEMAP_COS_CT_EXTENDS_1_1,
            XML_SCHEMAP_COS_CT_EXTENDS_1_2,
            XML_SCHEMAP_COS_CT_EXTENDS_1_3,
            XML_SCHEMAP_COS_ST_DERIVED_OK_2_1,
            XML_SCHEMAP_COS_ST_DERIVED_OK_2_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_1_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_1_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4,
            XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4,
            XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5,
            XML_SCHEMAP_COS_VALID_DEFAULT_1,
            XML_SCHEMAP_COS_VALID_DEFAULT_2_1,
            XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1,
            XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2,
            XML_SCHEMAP_CT_PROPS_CORRECT_1,
            XML_SCHEMAP_CT_PROPS_CORRECT_2,
            XML_SCHEMAP_CT_PROPS_CORRECT_3,
            XML_SCHEMAP_CT_PROPS_CORRECT_4,
            XML_SCHEMAP_CT_PROPS_CORRECT_5,
            XML_SCHEMAP_CVC_SIMPLE_TYPE,
            XML_SCHEMAP_C_PROPS_CORRECT,
            XML_SCHEMAP_DEF_AND_PREFIX,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2,
            XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3,
            XML_SCHEMAP_ELEMFORMDEFAULT_VALUE,
            XML_SCHEMAP_ELEM_DEFAULT_FIXED,
            XML_SCHEMAP_ELEM_NONAME_NOREF,
            XML_SCHEMAP_EXTENSION_NO_BASE,
            XML_SCHEMAP_E_PROPS_CORRECT_2,
            XML_SCHEMAP_E_PROPS_CORRECT_3,
            XML_SCHEMAP_E_PROPS_CORRECT_4,
            XML_SCHEMAP_E_PROPS_CORRECT_5,
            XML_SCHEMAP_E_PROPS_CORRECT_6,
            XML_SCHEMAP_FACET_NO_VALUE,
            XML_SCHEMAP_FAILED_BUILD_IMPORT,
            XML_SCHEMAP_FAILED_LOAD,
            XML_SCHEMAP_FAILED_PARSE,
            XML_SCHEMAP_GROUP_NONAME_NOREF,
            XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI,
            XML_SCHEMAP_IMPORT_REDEFINE_NSNAME,
            XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI,
            XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI,
            XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI,
            XML_SCHEMAP_INTERNAL,
            XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE,
            XML_SCHEMAP_INVALID_ATTR_COMBINATION,
            XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION,
            XML_SCHEMAP_INVALID_ATTR_NAME,
            XML_SCHEMAP_INVALID_ATTR_USE,
            XML_SCHEMAP_INVALID_BOOLEAN,
            XML_SCHEMAP_INVALID_ENUM,
            XML_SCHEMAP_INVALID_FACET,
            XML_SCHEMAP_INVALID_FACET_VALUE,
            XML_SCHEMAP_INVALID_MAXOCCURS,
            XML_SCHEMAP_INVALID_MINOCCURS,
            XML_SCHEMAP_INVALID_REF_AND_SUBTYPE,
            XML_SCHEMAP_INVALID_WHITE_SPACE,
            XML_SCHEMAP_MG_PROPS_CORRECT_1,
            XML_SCHEMAP_MG_PROPS_CORRECT_2,
            XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD,
            XML_SCHEMAP_NOATTR_NOREF,
            XML_SCHEMAP_NOROOT,
            XML_SCHEMAP_NOTATION_NO_NAME,
            XML_SCHEMAP_NOTHING_TO_PARSE,
            XML_SCHEMAP_NOTYPE_NOREF,
            XML_SCHEMAP_NOT_DETERMINISTIC,
            XML_SCHEMAP_NOT_SCHEMA,
            XML_SCHEMAP_NO_XMLNS,
            XML_SCHEMAP_NO_XSI,
            XML_SCHEMAP_PREFIX_UNDEFINED,
            XML_SCHEMAP_P_PROPS_CORRECT_1,
            XML_SCHEMAP_P_PROPS_CORRECT_2_1,
            XML_SCHEMAP_P_PROPS_CORRECT_2_2,
            XML_SCHEMAP_RECURSIVE,
            XML_SCHEMAP_REDEFINED_ATTR,
            XML_SCHEMAP_REDEFINED_ATTRGROUP,
            XML_SCHEMAP_REDEFINED_ELEMENT,
            XML_SCHEMAP_REDEFINED_GROUP,
            XML_SCHEMAP_REDEFINED_NOTATION,
            XML_SCHEMAP_REDEFINED_TYPE,
            XML_SCHEMAP_REF_AND_CONTENT,
            XML_SCHEMAP_REF_AND_SUBTYPE,
            XML_SCHEMAP_REGEXP_INVALID,
            XML_SCHEMAP_RESTRICTION_NONAME_NOREF,
            XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
            XML_SCHEMAP_S4S_ATTR_MISSING,
            XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED,
            XML_SCHEMAP_S4S_ELEM_MISSING,
            XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED,
            XML_SCHEMAP_SIMPLETYPE_NONAME,
            XML_SCHEMAP_SRC_ATTRIBUTE_1,
            XML_SCHEMAP_SRC_ATTRIBUTE_2,
            XML_SCHEMAP_SRC_ATTRIBUTE_3_1,
            XML_SCHEMAP_SRC_ATTRIBUTE_3_2,
            XML_SCHEMAP_SRC_ATTRIBUTE_4,
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1,
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2,
            XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3,
            XML_SCHEMAP_SRC_CT_1,
            XML_SCHEMAP_SRC_ELEMENT_1,
            XML_SCHEMAP_SRC_ELEMENT_2_1,
            XML_SCHEMAP_SRC_ELEMENT_2_2,
            XML_SCHEMAP_SRC_ELEMENT_3,
            XML_SCHEMAP_SRC_IMPORT,
            XML_SCHEMAP_SRC_IMPORT_1_1,
            XML_SCHEMAP_SRC_IMPORT_1_2,
            XML_SCHEMAP_SRC_IMPORT_2,
            XML_SCHEMAP_SRC_IMPORT_2_1,
            XML_SCHEMAP_SRC_IMPORT_2_2,
            XML_SCHEMAP_SRC_IMPORT_3_1,
            XML_SCHEMAP_SRC_IMPORT_3_2,
            XML_SCHEMAP_SRC_INCLUDE,
            XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE,
            XML_SCHEMAP_SRC_REDEFINE,
            XML_SCHEMAP_SRC_RESOLVE,
            XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE,
            XML_SCHEMAP_SRC_SIMPLE_TYPE_1,
            XML_SCHEMAP_SRC_SIMPLE_TYPE_2,
            XML_SCHEMAP_SRC_SIMPLE_TYPE_3,
            XML_SCHEMAP_SRC_SIMPLE_TYPE_4,
            XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES,
            XML_SCHEMAP_ST_PROPS_CORRECT_1,
            XML_SCHEMAP_ST_PROPS_CORRECT_2,
            XML_SCHEMAP_ST_PROPS_CORRECT_3,
            XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE,
            XML_SCHEMAP_TYPE_AND_SUBTYPE,
            XML_SCHEMAP_UNION_NOT_EXPRESSIBLE,
            XML_SCHEMAP_UNKNOWN_ALL_CHILD,
            XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD,
            XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD,
            XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP,
            XML_SCHEMAP_UNKNOWN_ATTR_CHILD,
            XML_SCHEMAP_UNKNOWN_BASE_TYPE,
            XML_SCHEMAP_UNKNOWN_CHOICE_CHILD,
            XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD,
            XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD,
            XML_SCHEMAP_UNKNOWN_ELEM_CHILD,
            XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD,
            XML_SCHEMAP_UNKNOWN_FACET_CHILD,
            XML_SCHEMAP_UNKNOWN_FACET_TYPE,
            XML_SCHEMAP_UNKNOWN_GROUP_CHILD,
            XML_SCHEMAP_UNKNOWN_IMPORT_CHILD,
            XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD,
            XML_SCHEMAP_UNKNOWN_LIST_CHILD,
            XML_SCHEMAP_UNKNOWN_MEMBER_TYPE,
            XML_SCHEMAP_UNKNOWN_NOTATION_CHILD,
            XML_SCHEMAP_UNKNOWN_PREFIX,
            XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD,
            XML_SCHEMAP_UNKNOWN_REF,
            XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD,
            XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD,
            XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD,
            XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD,
            XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD,
            XML_SCHEMAP_UNKNOWN_TYPE,
            XML_SCHEMAP_UNKNOWN_UNION_CHILD,
            XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH,
            XML_SCHEMAP_WARN_ATTR_REDECL_PROH,
            XML_SCHEMAP_WARN_SKIP_SCHEMA,
            XML_SCHEMAP_WARN_UNLOCATED_SCHEMA,
            XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER,
            XML_SCHEMAS_ANYATTR_LAX,
            XML_SCHEMAS_ANYATTR_SKIP,
            XML_SCHEMAS_ANYATTR_STRICT,
            XML_SCHEMAS_ANYSIMPLETYPE,
            XML_SCHEMAS_ANYTYPE,
            XML_SCHEMAS_ANYURI,
            XML_SCHEMAS_ANY_LAX,
            XML_SCHEMAS_ANY_SKIP,
            XML_SCHEMAS_ANY_STRICT,
            XML_SCHEMAS_ATTRGROUP_GLOBAL,
            XML_SCHEMAS_ATTRGROUP_HAS_REFS,
            XML_SCHEMAS_ATTRGROUP_MARKED,
            XML_SCHEMAS_ATTRGROUP_REDEFINED,
            XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED,
            XML_SCHEMAS_ATTR_FIXED,
            XML_SCHEMAS_ATTR_GLOBAL,
            XML_SCHEMAS_ATTR_INTERNAL_RESOLVED,
            XML_SCHEMAS_ATTR_NSDEFAULT,
            XML_SCHEMAS_ATTR_USE_OPTIONAL,
            XML_SCHEMAS_ATTR_USE_PROHIBITED,
            XML_SCHEMAS_ATTR_USE_REQUIRED,
            XML_SCHEMAS_BASE64BINARY,
            XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION,
            XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION,
            XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION,
            XML_SCHEMAS_BOOLEAN,
            XML_SCHEMAS_BYTE,
            XML_SCHEMAS_DATE,
            XML_SCHEMAS_DATETIME,
            XML_SCHEMAS_DECIMAL,
            XML_SCHEMAS_DOUBLE,
            XML_SCHEMAS_DURATION,
            XML_SCHEMAS_ELEM_ABSTRACT,
            XML_SCHEMAS_ELEM_BLOCK_ABSENT,
            XML_SCHEMAS_ELEM_BLOCK_EXTENSION,
            XML_SCHEMAS_ELEM_BLOCK_RESTRICTION,
            XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION,
            XML_SCHEMAS_ELEM_CIRCULAR,
            XML_SCHEMAS_ELEM_DEFAULT,
            XML_SCHEMAS_ELEM_FINAL_ABSENT,
            XML_SCHEMAS_ELEM_FINAL_EXTENSION,
            XML_SCHEMAS_ELEM_FINAL_RESTRICTION,
            XML_SCHEMAS_ELEM_FIXED,
            XML_SCHEMAS_ELEM_GLOBAL,
            XML_SCHEMAS_ELEM_INTERNAL_CHECKED,
            XML_SCHEMAS_ELEM_INTERNAL_RESOLVED,
            XML_SCHEMAS_ELEM_NILLABLE,
            XML_SCHEMAS_ELEM_NSDEFAULT,
            XML_SCHEMAS_ELEM_REF,
            XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD,
            XML_SCHEMAS_ELEM_TOPLEVEL,
            XML_SCHEMAS_ENTITIES,
            XML_SCHEMAS_ENTITY,
            XML_SCHEMAS_ERR_,
            XML_SCHEMAS_ERR_ATTRINVALID,
            XML_SCHEMAS_ERR_ATTRUNKNOWN,
            XML_SCHEMAS_ERR_CONSTRUCT,
            XML_SCHEMAS_ERR_ELEMCONT,
            XML_SCHEMAS_ERR_EXTRACONTENT,
            XML_SCHEMAS_ERR_FACET,
            XML_SCHEMAS_ERR_HAVEDEFAULT,
            XML_SCHEMAS_ERR_INTERNAL,
            XML_SCHEMAS_ERR_INVALIDATTR,
            XML_SCHEMAS_ERR_INVALIDELEM,
            XML_SCHEMAS_ERR_ISABSTRACT,
            XML_SCHEMAS_ERR_MISSING,
            XML_SCHEMAS_ERR_NOROLLBACK,
            XML_SCHEMAS_ERR_NOROOT,
            XML_SCHEMAS_ERR_NOTDETERMINIST,
            XML_SCHEMAS_ERR_NOTEMPTY,
            XML_SCHEMAS_ERR_NOTNILLABLE,
            XML_SCHEMAS_ERR_NOTSIMPLE,
            XML_SCHEMAS_ERR_NOTTOPLEVEL,
            XML_SCHEMAS_ERR_NOTYPE,
            XML_SCHEMAS_ERR_OK,
            XML_SCHEMAS_ERR_UNDECLAREDELEM,
            XML_SCHEMAS_ERR_VALUE,
            XML_SCHEMAS_ERR_WRONGELEM,
            XML_SCHEMAS_ERR_XXX,
            XML_SCHEMAS_FACET_COLLAPSE,
            XML_SCHEMAS_FACET_PRESERVE,
            XML_SCHEMAS_FACET_REPLACE,
            XML_SCHEMAS_FACET_UNKNOWN,
            XML_SCHEMAS_FINAL_DEFAULT_EXTENSION,
            XML_SCHEMAS_FINAL_DEFAULT_LIST,
            XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION,
            XML_SCHEMAS_FINAL_DEFAULT_UNION,
            XML_SCHEMAS_FLOAT,
            XML_SCHEMAS_GDAY,
            XML_SCHEMAS_GMONTH,
            XML_SCHEMAS_GMONTHDAY,
            XML_SCHEMAS_GYEAR,
            XML_SCHEMAS_GYEARMONTH,
            XML_SCHEMAS_HEXBINARY,
            XML_SCHEMAS_ID,
            XML_SCHEMAS_IDREF,
            XML_SCHEMAS_IDREFS,
            XML_SCHEMAS_INCLUDING_CONVERT_NS,
            XML_SCHEMAS_INT,
            XML_SCHEMAS_INTEGER,
            XML_SCHEMAS_LANGUAGE,
            XML_SCHEMAS_LONG,
            XML_SCHEMAS_NAME,
            XML_SCHEMAS_NCNAME,
            XML_SCHEMAS_NINTEGER,
            XML_SCHEMAS_NMTOKEN,
            XML_SCHEMAS_NMTOKENS,
            XML_SCHEMAS_NNINTEGER,
            XML_SCHEMAS_NORMSTRING,
            XML_SCHEMAS_NOTATION,
            XML_SCHEMAS_NPINTEGER,
            XML_SCHEMAS_PINTEGER,
            XML_SCHEMAS_QNAME,
            XML_SCHEMAS_QUALIF_ATTR,
            XML_SCHEMAS_QUALIF_ELEM,
            XML_SCHEMAS_SHORT,
            XML_SCHEMAS_STRING,
            XML_SCHEMAS_TIME,
            XML_SCHEMAS_TOKEN,
            XML_SCHEMAS_TYPE_ABSTRACT,
            XML_SCHEMAS_TYPE_BLOCK_DEFAULT,
            XML_SCHEMAS_TYPE_BLOCK_EXTENSION,
            XML_SCHEMAS_TYPE_BLOCK_RESTRICTION,
            XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE,
            XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION,
            XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION,
            XML_SCHEMAS_TYPE_FACETSNEEDVALUE,
            XML_SCHEMAS_TYPE_FINAL_DEFAULT,
            XML_SCHEMAS_TYPE_FINAL_EXTENSION,
            XML_SCHEMAS_TYPE_FINAL_LIST,
            XML_SCHEMAS_TYPE_FINAL_RESTRICTION,
            XML_SCHEMAS_TYPE_FINAL_UNION,
            XML_SCHEMAS_TYPE_FIXUP_1,
            XML_SCHEMAS_TYPE_GLOBAL,
            XML_SCHEMAS_TYPE_HAS_FACETS,
            XML_SCHEMAS_TYPE_INTERNAL_INVALID,
            XML_SCHEMAS_TYPE_INTERNAL_RESOLVED,
            XML_SCHEMAS_TYPE_MARKED,
            XML_SCHEMAS_TYPE_MIXED,
            XML_SCHEMAS_TYPE_NORMVALUENEEDED,
            XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD,
            XML_SCHEMAS_TYPE_REDEFINED,
            XML_SCHEMAS_TYPE_VARIETY_ABSENT,
            XML_SCHEMAS_TYPE_VARIETY_ATOMIC,
            XML_SCHEMAS_TYPE_VARIETY_LIST,
            XML_SCHEMAS_TYPE_VARIETY_UNION,
            XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE,
            XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE,
            XML_SCHEMAS_TYPE_WHITESPACE_REPLACE,
            XML_SCHEMAS_UBYTE,
            XML_SCHEMAS_UINT,
            XML_SCHEMAS_ULONG,
            XML_SCHEMAS_UNKNOWN,
            XML_SCHEMAS_USHORT,
            XML_SCHEMAS_WILDCARD_COMPLETE,
            XML_SCHEMATRONV_ASSERT,
            XML_SCHEMATRONV_REPORT,
            XML_SCHEMAV_ATTRINVALID,
            XML_SCHEMAV_ATTRUNKNOWN,
            XML_SCHEMAV_CONSTRUCT,
            XML_SCHEMAV_CVC_ATTRIBUTE_1,
            XML_SCHEMAV_CVC_ATTRIBUTE_2,
            XML_SCHEMAV_CVC_ATTRIBUTE_3,
            XML_SCHEMAV_CVC_ATTRIBUTE_4,
            XML_SCHEMAV_CVC_AU,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_1,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_4,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1,
            XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2,
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1,
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2,
            XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3,
            XML_SCHEMAV_CVC_ELT_1,
            XML_SCHEMAV_CVC_ELT_2,
            XML_SCHEMAV_CVC_ELT_3_1,
            XML_SCHEMAV_CVC_ELT_3_2_1,
            XML_SCHEMAV_CVC_ELT_3_2_2,
            XML_SCHEMAV_CVC_ELT_4_1,
            XML_SCHEMAV_CVC_ELT_4_2,
            XML_SCHEMAV_CVC_ELT_4_3,
            XML_SCHEMAV_CVC_ELT_5_1_1,
            XML_SCHEMAV_CVC_ELT_5_1_2,
            XML_SCHEMAV_CVC_ELT_5_2_1,
            XML_SCHEMAV_CVC_ELT_5_2_2_1,
            XML_SCHEMAV_CVC_ELT_5_2_2_2_1,
            XML_SCHEMAV_CVC_ELT_5_2_2_2_2,
            XML_SCHEMAV_CVC_ELT_6,
            XML_SCHEMAV_CVC_ELT_7,
            XML_SCHEMAV_CVC_ENUMERATION_VALID,
            XML_SCHEMAV_CVC_FACET_VALID,
            XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID,
            XML_SCHEMAV_CVC_IDC,
            XML_SCHEMAV_CVC_LENGTH_VALID,
            XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID,
            XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID,
            XML_SCHEMAV_CVC_MAXLENGTH_VALID,
            XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID,
            XML_SCHEMAV_CVC_MININCLUSIVE_VALID,
            XML_SCHEMAV_CVC_MINLENGTH_VALID,
            XML_SCHEMAV_CVC_PATTERN_VALID,
            XML_SCHEMAV_CVC_TOTALDIGITS_VALID,
            XML_SCHEMAV_CVC_TYPE_1,
            XML_SCHEMAV_CVC_TYPE_2,
            XML_SCHEMAV_CVC_TYPE_3_1_1,
            XML_SCHEMAV_CVC_TYPE_3_1_2,
            XML_SCHEMAV_CVC_WILDCARD,
            XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING,
            XML_SCHEMAV_ELEMCONT,
            XML_SCHEMAV_ELEMENT_CONTENT,
            XML_SCHEMAV_EXTRACONTENT,
            XML_SCHEMAV_FACET,
            XML_SCHEMAV_HAVEDEFAULT,
            XML_SCHEMAV_INTERNAL,
            XML_SCHEMAV_INVALIDATTR,
            XML_SCHEMAV_INVALIDELEM,
            XML_SCHEMAV_ISABSTRACT,
            XML_SCHEMAV_MISC,
            XML_SCHEMAV_MISSING,
            XML_SCHEMAV_NOROLLBACK,
            XML_SCHEMAV_NOROOT,
            XML_SCHEMAV_NOTDETERMINIST,
            XML_SCHEMAV_NOTEMPTY,
            XML_SCHEMAV_NOTNILLABLE,
            XML_SCHEMAV_NOTSIMPLE,
            XML_SCHEMAV_NOTTOPLEVEL,
            XML_SCHEMAV_NOTYPE,
            XML_SCHEMAV_UNDECLAREDELEM,
            XML_SCHEMAV_VALUE,
            XML_SCHEMAV_WRONGELEM,
            XML_SCHEMA_CONTENT_ANY,
            XML_SCHEMA_CONTENT_BASIC,
            XML_SCHEMA_CONTENT_ELEMENTS,
            XML_SCHEMA_CONTENT_EMPTY,
            XML_SCHEMA_CONTENT_MIXED,
            XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS,
            XML_SCHEMA_CONTENT_SIMPLE,
            XML_SCHEMA_CONTENT_UNKNOWN,
            XML_SCHEMA_EXTRA_ATTR_USE_PROHIB,
            XML_SCHEMA_EXTRA_QNAMEREF,
            XML_SCHEMA_FACET_ENUMERATION,
            XML_SCHEMA_FACET_FRACTIONDIGITS,
            XML_SCHEMA_FACET_LENGTH,
            XML_SCHEMA_FACET_MAXEXCLUSIVE,
            XML_SCHEMA_FACET_MAXINCLUSIVE,
            XML_SCHEMA_FACET_MAXLENGTH,
            XML_SCHEMA_FACET_MINEXCLUSIVE,
            XML_SCHEMA_FACET_MININCLUSIVE,
            XML_SCHEMA_FACET_MINLENGTH,
            XML_SCHEMA_FACET_PATTERN,
            XML_SCHEMA_FACET_TOTALDIGITS,
            XML_SCHEMA_FACET_WHITESPACE,
            XML_SCHEMA_TYPE_ALL,
            XML_SCHEMA_TYPE_ANY,
            XML_SCHEMA_TYPE_ANY_ATTRIBUTE,
            XML_SCHEMA_TYPE_ATTRIBUTE,
            XML_SCHEMA_TYPE_ATTRIBUTEGROUP,
            XML_SCHEMA_TYPE_ATTRIBUTE_USE,
            XML_SCHEMA_TYPE_BASIC,
            XML_SCHEMA_TYPE_CHOICE,
            XML_SCHEMA_TYPE_COMPLEX,
            XML_SCHEMA_TYPE_COMPLEX_CONTENT,
            XML_SCHEMA_TYPE_ELEMENT,
            XML_SCHEMA_TYPE_EXTENSION,
            XML_SCHEMA_TYPE_FACET,
            XML_SCHEMA_TYPE_GROUP,
            XML_SCHEMA_TYPE_IDC_KEY,
            XML_SCHEMA_TYPE_IDC_KEYREF,
            XML_SCHEMA_TYPE_IDC_UNIQUE,
            XML_SCHEMA_TYPE_LIST,
            XML_SCHEMA_TYPE_NOTATION,
            XML_SCHEMA_TYPE_PARTICLE,
            XML_SCHEMA_TYPE_RESTRICTION,
            XML_SCHEMA_TYPE_SEQUENCE,
            XML_SCHEMA_TYPE_SIMPLE,
            XML_SCHEMA_TYPE_SIMPLE_CONTENT,
            XML_SCHEMA_TYPE_UNION,
            XML_SCHEMA_TYPE_UR,
            XML_SCHEMA_VAL_VC_I_CREATE,
            XML_SCHEMA_WHITESPACE_COLLAPSE,
            XML_SCHEMA_WHITESPACE_PRESERVE,
            XML_SCHEMA_WHITESPACE_REPLACE,
            XML_SCHEMA_WHITESPACE_UNKNOWN,
            XML_SKIP_IDS,
            XML_SUBSTITUTE_BOTH,
            XML_SUBSTITUTE_NONE,
            XML_SUBSTITUTE_PEREF,
            XML_SUBSTITUTE_REF,
            XML_TEXTREADER_MODE_CLOSED,
            XML_TEXTREADER_MODE_EOF,
            XML_TEXTREADER_MODE_ERROR,
            XML_TEXTREADER_MODE_INITIAL,
            XML_TEXTREADER_MODE_INTERACTIVE,
            XML_TEXTREADER_MODE_READING,
            XML_TEXT_NODE,
            XML_TREE_INVALID_DEC,
            XML_TREE_INVALID_HEX,
            XML_TREE_NOT_UTF8,
            XML_TREE_UNTERMINATED_ENTITY,
            XML_WAR_CATALOG_PI,
            XML_WAR_ENTITY_REDEFINED,
            XML_WAR_LANG_VALUE,
            XML_WAR_NS_COLUMN,
            XML_WAR_NS_URI,
            XML_WAR_NS_URI_RELATIVE,
            XML_WAR_SPACE_VALUE,
            XML_WAR_UNDECLARED_ENTITY,
            XML_WAR_UNKNOWN_VERSION,
            XML_WITH_AUTOMATA,
            XML_WITH_C14N,
            XML_WITH_CATALOG,
            XML_WITH_DEBUG,
            XML_WITH_DEBUG_MEM,
            XML_WITH_DEBUG_RUN,
            XML_WITH_EXPR,
            XML_WITH_FTP,
            XML_WITH_HTML,
            XML_WITH_HTTP,
            XML_WITH_ICONV,
            XML_WITH_ICU,
            XML_WITH_ISO8859X,
            XML_WITH_LEGACY,
            XML_WITH_LZMA,
            XML_WITH_MODULES,
            XML_WITH_NONE,
            XML_WITH_OUTPUT,
            XML_WITH_PATTERN,
            XML_WITH_PUSH,
            XML_WITH_READER,
            XML_WITH_REGEXP,
            XML_WITH_SAX1,
            XML_WITH_SCHEMAS,
            XML_WITH_SCHEMATRON,
            XML_WITH_THREAD,
            XML_WITH_TREE,
            XML_WITH_UNICODE,
            XML_WITH_VALID,
            XML_WITH_WRITER,
            XML_WITH_XINCLUDE,
            XML_WITH_XPATH,
            XML_WITH_XPTR,
            XML_WITH_ZLIB,
            XML_XINCLUDE_BUILD_FAILED,
            XML_XINCLUDE_DEPRECATED_NS,
            XML_XINCLUDE_END,
            XML_XINCLUDE_ENTITY_DEF_MISMATCH,
            XML_XINCLUDE_FALLBACKS_IN_INCLUDE,
            XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE,
            XML_XINCLUDE_FRAGMENT_ID,
            XML_XINCLUDE_HREF_URI,
            XML_XINCLUDE_INCLUDE_IN_INCLUDE,
            XML_XINCLUDE_INVALID_CHAR,
            XML_XINCLUDE_MULTIPLE_ROOT,
            XML_XINCLUDE_NO_FALLBACK,
            XML_XINCLUDE_NO_HREF,
            XML_XINCLUDE_PARSE_VALUE,
            XML_XINCLUDE_RECURSION,
            XML_XINCLUDE_START,
            XML_XINCLUDE_TEXT_DOCUMENT,
            XML_XINCLUDE_TEXT_FRAGMENT,
            XML_XINCLUDE_UNKNOWN_ENCODING,
            XML_XINCLUDE_XPTR_FAILED,
            XML_XINCLUDE_XPTR_RESULT,
            XML_XPATH_CHECKNS,
            XML_XPATH_ENCODING_ERROR,
            XML_XPATH_EXPRESSION_OK,
            XML_XPATH_EXPR_ERROR,
            XML_XPATH_INVALID_ARITY,
            XML_XPATH_INVALID_CHAR_ERROR,
            XML_XPATH_INVALID_CTXT_POSITION,
            XML_XPATH_INVALID_CTXT_SIZE,
            XML_XPATH_INVALID_OPERAND,
            XML_XPATH_INVALID_PREDICATE_ERROR,
            XML_XPATH_INVALID_TYPE,
            XML_XPATH_MEMORY_ERROR,
            XML_XPATH_NOVAR,
            XML_XPATH_NUMBER_ERROR,
            XML_XPATH_START_LITERAL_ERROR,
            XML_XPATH_UNCLOSED_ERROR,
            XML_XPATH_UNDEF_PREFIX_ERROR,
            XML_XPATH_UNDEF_VARIABLE_ERROR,
            XML_XPATH_UNFINISHED_LITERAL_ERROR,
            XML_XPATH_UNKNOWN_FUNC_ERROR,
            XML_XPATH_VARIABLE_REF_ERROR,
            XML_XPTR_CHILDSEQ_START,
            XML_XPTR_EVAL_FAILED,
            XML_XPTR_EXTRA_OBJECTS,
            XML_XPTR_RESOURCE_ERROR,
            XML_XPTR_SUB_RESOURCE_ERROR,
            XML_XPTR_SYNTAX_ERROR,
            XML_XPTR_UNKNOWN_SCHEME,
            XPATH_BOOLEAN,
            XPATH_ENCODING_ERROR,
            XPATH_EXPRESSION_OK,
            XPATH_EXPR_ERROR,
            XPATH_FORBID_VARIABLE_ERROR,
            XPATH_INVALID_ARITY,
            XPATH_INVALID_CHAR_ERROR,
            XPATH_INVALID_CTXT,
            XPATH_INVALID_CTXT_POSITION,
            XPATH_INVALID_CTXT_SIZE,
            XPATH_INVALID_OPERAND,
            XPATH_INVALID_PREDICATE_ERROR,
            XPATH_INVALID_TYPE,
            XPATH_LOCATIONSET,
            XPATH_MEMORY_ERROR,
            XPATH_NODESET,
            XPATH_NUMBER,
            XPATH_NUMBER_ERROR,
            XPATH_OP_LIMIT_EXCEEDED,
            XPATH_POINT,
            XPATH_RANGE,
            XPATH_RECURSION_LIMIT_EXCEEDED,
            XPATH_STACK_ERROR,
            XPATH_START_LITERAL_ERROR,
            XPATH_STRING,
            XPATH_UNCLOSED_ERROR,
            XPATH_UNDEFINED,
            XPATH_UNDEF_PREFIX_ERROR,
            XPATH_UNDEF_VARIABLE_ERROR,
            XPATH_UNFINISHED_LITERAL_ERROR,
            XPATH_UNKNOWN_FUNC_ERROR,
            XPATH_USERS,
            XPATH_VARIABLE_REF_ERROR,
            XPATH_XSLT_TREE,
            XPTR_RESOURCE_ERROR,
            XPTR_SUB_RESOURCE_ERROR,
            XPTR_SYNTAX_ERROR,
            libxmljs_debug,
            xmlFree,
            xmlIsBaseCharGroup,
            xmlIsCharGroup,
            xmlIsCombiningGroup,
            xmlIsDigitGroup,
            xmlIsExtenderGroup,
            xmlIsIdeographicGroup,
            xmlIsPubidChar_tab,
            xmlMalloc,
            xmlMallocAtomic,
            xmlMemStrdup,
            xmlParserMaxDepth,
            xmlRealloc,
            xmlStringComment,
            xmlStringText,
            xmlStringTextNoenc,
            xmlXPathNAN,
            xmlXPathNINF,
            xmlXPathPINF,
        fromBufferAsync,
        xmlPtrToXmlNode,
        xmlPtrToXmlDoc,
        xmlPtrToXmlAttr,
        xmlPtrToXmlElement,
        xmlPtrToXmlDtd,
        xmlPtrToXmlNs,
} = bindings as NativeBindings;

export type XMLReferenceType = xmlNodePtr | xmlDocPtr | xmlDtdPtr | xmlAttrPtr | xmlElementPtr | xmlNsPtr;

const refMap = new WeakMap();

export function createXMLReference<T>(constructorFn: new (_ref: XMLReferenceType) => T, _ref: any): T {
    if (_ref === null) {
        return new constructorFn(_ref);
    }

    let instance = refMap.get(_ref);

    if (!instance) {
        instance = new constructorFn(_ref);

        refMap.set(_ref, instance);
    }

    return instance;
};

export class XMLReference<T> {
    private _ref: T | null;

    constructor(_ref: T) {
        this._ref = _ref;
    }

    public getSelfOrThrow(error: string) {
        if (this._ref === null) {
            throw new Error(error);
        }

        return this;
    }

    public getSelfOrNull() {
        if (this._ref === null) {
            return null;
        }

        return this;
    }

    public isNull(): boolean {
        return (this._ref === null);
    }

    public getNativeReference(): T | null {
        return this._ref;
    }

    public getNativeReferenceOrReturnNull<returnType>(callback: (_ref: T) => returnType): returnType | null {
        if (this._ref !== null) {
            return callback(this._ref);
        }

        return null;
    }

    public getNativeReferenceOrThrow(error: string): T {
        if (this._ref === null) {
            throw new Error(error);
        }

        return this._ref;
    }

    protected setNativeReference(ref: T): void {
        this._ref = ref;

        refMap.set(ref as Object, this);
    }
};

export default bindings as NativeBindings;
